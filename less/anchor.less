//
//  AnchorLESS v1.3.0
//  http://invader365.github.io/anchorLESS/
//
//  Animation and Transition

//
//  .animation(@name, @duration, @timing-function, @delay, @iteration-count, @direction, @fill-mode, @play-state, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @name            :  name of the @keyframes animation
//   @duration        :  -time-|initial|inherit
//   @timing-function :  linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start/end)|initial|inherit
//   @delay           :  -time-|initial|inherit
//   @iteration-count :  -number-|infinite|initial|inherit
//   @direction       :  normal|reverse|alternate|alternate-reverse|initial|inherit
//   @fill-mode       :  none|forwards|backwards|both|initial|inherit
//   @play-state      :  paused|running|initial|inherit

.animation(@name:_, @duration:_, @timing:_, @delay:_, @iteration:_, @direction:_, @fill-mode:_, @play-state:_, @min-query:_, @max-query:_) {

    @1: if(not (@name=_); @name);
    @2: if(@duration=_;   @1; @1 @duration);
    @3: if(@timing=_;     @2; @2 @timing);
    @4: if(@delay=_;      @3; @3 @delay);
    @5: if(@iteration=_;  @4; @4 @iteration);
    @6: if(@direction=_;  @5; @5 @direction);
    @7: if(@fill-mode=_;  @6; @6 @fill-mode);
    @args: if(@play-state=_; @7; @7 @play-state);
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@name=_) and (@minmax=_) {
        -webkit-animation: @args;  // Safari, Chrome
           -moz-animation: @args;
            -ms-animation: @args;
                animation: @args;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @animation: @name, @duration, @timing, @delay, @iteration, @direction, @fill-mode, @play-state;
        );
    }
    
    & when (@name=fade-in)      { ._fade-in(); }
    
    & when (@name=fade-out)     { ._fade-out(); }
    
    & when (@name=shake)        { ._shake(); }
    
    & when (@name=slide-down)   { ._slide-down(); }
    
    & when (@name=slide-up)     { ._slide-up(); }

    & when (@name=zoom-in)      { ._zoom-in(); }
    
    & when (@name=zoom-out)     { ._zoom-out(); }
}

//
//  .transition(@property, @duration, @timing-function, @delay, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @property        :  none|all|-property-|initial|inherit
//   @duration        :  -time-|initial|inherit
//   @timing-function :  linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start/end)|initial|inherit
//   @delay           :  -time-|initial|inherit

.transition(@property:_, @duration:_, @timing:_, @delay:_, @min-query:_, @max-query:_) {

    @1: if((not (@property=_)); @property);
    @2: if((not (@duration=_)); @1 @duration; @1 1s);
    @3: if((not (@timing=_)); @2 @timing; @2);
    @args: if((not (@delay=_)); @3 @delay; @3);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@property=_) and (@minmax=_) {
        -webkit-transition: @args;
             -o-transition: @args;
                transition: @args;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @transition: @property, @duration, @timing, @delay;
        );
    }
}

//
//   Box-model properties

//
//  .border(@width, @style, @color, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @width     :  medium|thin|thick|-length-|initial|inherit
//   @style     :  none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit
//   @color     :  color|transparent|initial|inherit

.border(@width:_, @style:_, @color:_, @min-query:_, @max-query:_) {

    @params: if(length(@width) = 1 and length(@style) = 1 and length(@color) = 1; single);
    @minmax: if(@min-query=_ and @max-query=_; _; @min-query, @max-query);

    & when not (@style=_) and (@params=single) and (@minmax=_) {
        @rest: if(@color=_; @style; @style @color);
        border: @width @rest;
    }

    & when not (@width=_) and (@style=_)  and (@minmax=_) {
        border-width: @width;
    }

    & when not (@width=_) and (@params=multi)  and (@minmax=_) {
        border-width: @width;
    }

    & when not (@style=_) and (@params=multi) and (@minmax=_) {
        border-style: @style;
    }

    & when not (@color=_) and (@style=_) and (@minmax=_) {
        border-color: @color;
    }

    & when not (@color=_) and (@params=multi) and (@minmax=_) {
        border-color: @color;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @border: @width, @style, @color;
        );
    }
}

//  .display(@mode, @property1, @property2, @property3, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @mode                    :  inline|block|inline-block|flex|grid|list-item|table|table-row|table-column|table-cell|none|initial|inherit
//   when (@mode = block) 
//     @width                 :  auto|-length-|initial|inherit
//     @height                :  auto|-length-|initial|inherit
//   when (@mode = flex)
//     @flex-flow             :  flex-direction flex-wrap|initial|inherit
//     @justify-content       :  flex-start|flex-end|center|space-between|space-around|initial|inherit
//     @align-items           :  flex-start|flex-end|center|space-between|space-around|initial|inherit
//   when (@mode = grid)
//     @grid-template-columns :  none|auto|max-content|min-content|-length-|initial|inherit
//     @grid-template-rows    :  none|auto|max-content|min-content|-length-|initial|inherit
//     @grid-gap              :  grid-row-gap grid-column-gap

.display(@mode:_, @property1:_, @property2:_, @property3:_, @min-query:_, @max-query:_) {

    @prop1: if(@mode=flex; flex-flow;       if(@mode=grid; grid-template-columns; width););
    @prop2: if(@mode=flex; justify-content; if(@mode=grid; grid-template-rows; height););
    @prop3: if(@mode=flex; align-items;     if(@mode=grid; gap); _);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@mode=_) and (@minmax=_) {
        display: @mode;
    }

    & when not (@property1=_) and (@minmax=_) {
        @{prop1}: @property1;
    }

    & when not (@property2=_) and (@minmax=_) {
        @{prop2}: @property2;
    }

    & when not (@property3=_) and (@minmax=_) {
        @{prop3}: @property3;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @display: @mode, @property1, @property2, @property3;
        );
    }
}

.display(@mode:_, @property1:_) {
    & when (@mode=block), (@mode=inline-block) {
        .display(@mode, @property1, @property1);
    }
}

//
//  .minmax-size(@min-width, @max-width, @min-height, @max-heigh, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @min-width      :  -length-|initial|inherit
//   @max-width      :  -length-|initial|inherit
//   @min-height     :  -length-|initial|inherit
//   @max-height     :  -length-|initial|inherit

.minmax-size(@min-width:_, @max-width:_, @min-height:_, @max-height:_, @min-query:_, @max-query:_) {
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@min-width=_) and (@minmax=_) {
        min-width: @min-width;
    }

    & when not (@max-width=_) and (@minmax=_) {
        max-width: @max-width;
    }

    & when not (@min-height=_) and (@minmax=_) {
        min-height: @min-height;
    }

    & when not (@max-height=_) and (@minmax=_) {
        max-height: @max-height;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @minmax-size: @min-width, @max-width, @min-height, @max-height;
        );
    }
}

//
//  .overflow(@overflow-x, @overflow-y, [@min-query, @max-query])
//   ------------------------------------------------------
//   overflow-x         :  visible|hidden|scroll|auto|initial|inherit
//   overflow-y         :  visible|hidden|scroll|auto|initial|inherit

.overflow(@overflow-x:_, @overflow-y:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when (@overflow-x=@overflow-y) and (@minmax=_) {
        overflow: @overflow-x;
    }

    & when not (@overflow-y=_) and (@minmax=_) {
        overflow-y: @overflow-y;
    }
        
    & when not (@overflow-x=_) and (@minmax=_) {
        overflow-x: @overflow-x;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @overflow: @overflow-x, @overflow-y;
        );
    }
}

//
//  .size(@width, @height, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @width         :  auto|-length-|initial|inherit
//   @heigth        :  auto|-length-|initial|inherit

.size(@width:_, @height:_, @min-query:_, @max-query:_) {
  
    @vheight: if(@height=_; @width; @height);
    @minmax:  if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@width=_) and (@minmax=_) {
        width: @width;
    }
  
    & when not (@vheight=_) and (@minmax=_) {
        height: @vheight;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @size: @width, @height;
        );
    }
}

//
//  .spacing(@margin, @padding, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @margin         :  -length-|auto|initial|inherit
//   @padding        :  -length-|auto|initial|inherit

.spacing (@margin:_, @padding:_, @min-query:_, @max-query:_) {
  
    @vpadding: if(not (@margin=_) and (@padding=_); @margin; @padding);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@margin=_) and (@minmax=_) {
        margin: @margin;
    }

    & when not (@vpadding=_) and (@minmax=_) {
        padding: @vpadding;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @spacing: @margin, @padding;
        );
    }
}

//
//   Filter properties

//
//  .blur(@pixels[, @min-query, @max-query]);
//   ------------------------------------------------------
//   blur           :  pixels

.blur(@pixels:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@pixels=_) and (@minmax=_) {
        -webkit-filter+_: blur(@pixels);
                filter+_: blur(@pixels);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @blur: @pixels;
        );
    }
}

//
//  .brightness(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   brightness         :  percentage

.brightness(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: brightness(@percentage);
                filter+_: brightness(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @brightness: @percentage;
        );
    }
}

//
//  .contrast(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   contrast         :  percentage

.contrast(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: contrast(@percentage);
                filter+_: contrast(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @contrast: @percentage;
        );
    }
}

//
//  .drop-shadow(@offset, @color[, @min-query, @max-query]);
//   ------------------------------------------------------
//   offset         :  none|h-offset v-offset blur|inset|initial|inherit
//   blur           :  -length-
//   color          :  -color-|transparent|initial|inherit

.drop-shadow(@offset:_, @blur:_, @color:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@offset=_) and (@minmax=_) {

        -webkit-filter+_: drop-shadow(@offset @blur @color);
                filter+_: drop-shadow(@offset @blur @color);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @drop-shadow: @offset, @blur, @color;
        );
    }
}

//
//  .filter(@pixels[, @min-query, @max-query]);
//   ------------------------------------------------------
//   filter:         :  none|filter-function|initial|inherit

.filter(@params:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@params=_) and (@minmax=_) {
        -webkit-filter+_: @params;
                filter+_: @params;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @filter: @params;
        );
    }
}

//
//  .grayscale(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   grayscale         :  percentage

.grayscale(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: grayscale(@percentage);
                filter+_: grayscale(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @grayscale: @percentage;
        );
    }
}

//
//  .huerotate(@degrees[, @min-query, @max-query]);
//   ------------------------------------------------------
//   huerotate         :  degrees

.hue-rotate(@degrees:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@degrees=_) and (@minmax=_) {
        -webkit-filter+_: hue-rotate(@degrees);
                filter+_: hue-rotate(@degrees);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @hue-rotate: @degrees;
        );
    }
}

//
//  .invert(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   invert         :  percentage

.invert(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: invert(@percentage);
                filter+_: invert(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @invert: @percentage;
        );
    }
}

//
//  .saturate(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   saturate         :  percentage

.saturate(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: saturate(@percentage);
                filter+_: saturate(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @saturate: @percentage;
        );
    }
}

//
//  .sepia(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   sepia         :  percentage

.sepia(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: sepia(@percentage);
                filter+_: sepia(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @sepia: @percentage;
        );
    }
}

//
//  .url(@url[, @min-query, @max-query]);
//   ------------------------------------------------------
//   url         :  location of the svg filter

.url(@svg-url:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@svg-url=_) and (@minmax=_) {
        -webkit-filter+_: url(@svg-url);
                filter+_: url(@svg-url);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @url: @svg-url;
        );
    }
}
  
//
//  Keyframes

//
//  ._fade-in()
//  ._fade-out()
//  ._shake()
//  ._slide-down()
//  ._slide-up()
//  ._zoom-in()
//  ._zoom-out()

._fade-in() {
    @-webkit-keyframes fade-in {
        @fade-in();
    }

    @keyframes fade-in {
        @fade-in();
    }
    @fade-in: {
        0% {
            opacity: 0;
        }

        100% {
            opacity: 1;
        }
    }
}

._fade-out() {
    @-webkit-keyframes fade-out {
        @fade-out();
    }

    @keyframes fade-out {
        @fade-out();
    }
    @fade-out: {
        0% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }
}

._shake() {
    @-webkit-keyframes shake {
        @shake();
    }

    @keyframes shake {
        @shake();
    }

    @shake: {
        0%, 100% {
            .translate3d(0, 0, 0);
        }

        10%, 30%, 50%, 70%, 90% {
            .translate3d(0, 0, -10px);
        }

        20%, 40%, 60%, 80% {
            .translate3d(0, 0, 10px);
        }
    }
}

._slide-down() {
    @-webkit-keyframes slide-down {
        @slide-down();
    }

    @keyframes slide-down {
        @slide-down();
    }
    @slide-down: {
        0% {
            opacity: 0;
            .transform(translateY(-20px) perspective(600px) rotateX(15deg));
        }

        100% {
            opacity: 1;
            .transform(translateY(0) perspective(600px) rotateX(0deg));
        }
    }
}

._slide-up() {
    @-webkit-keyframes slide-up {
        @slide-up();
    }

    @keyframes slide-up {
        @slide-up();
    }

    @slide-up: {
        0% {
            opacity: 1;
            .transform(translateY(0) perspective(600px) rotateX(0deg));
        }
        100% {
            opacity: 0;
            .transform(translateY(-20px) perspective(600px) rotateX(15deg));
        }
    }
}

._zoom-in() {
    @-webkit-keyframes zoom-in {
        @zoom-in();
    }

    @keyframes zoom-in {
        @zoom-in();
    }

    @zoom-in: {
        0% {
            opacity: 0;
            .scale3d(0.3, 0.3, 0);
        }
        50% {
            opacity: 1;
        }
    }
}

._zoom-out() {
    @-webkit-keyframes zoom-out {
        @zoom-out();
    }

    @keyframes zoom-out {
        @zoom-out();
    }
    @zoom-out: {
        0% {
            opacity: 1;
            .scale3d(1, 1, 1);
        }

        50% {
            opacity: 0;
            .scale3d(0.3, 0.3, 0);
        }

        100% {
            opacity: 0;
        }
    }
}

//
//  Layout properties

//
//  .align(@top, @right, @bottom, @left, [@min-query, @max-query]) 
//   ------------------------------------------------------
//   @top      :  auto|length|initial|inherit
//   @right    :  auto|length|initial|inherit
//   @bottom   :  auto|length|initial|inherit
//   @left     :  auto|length|initial|inherit

.align(@top:_) {

    & when not (@top=_) {
        .align(@top, @top, @top, @top);
    }
}

.align(@top:_, @right:_, @bottom:_, @left:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@top=_) and (@minmax=_) {
        top: @top;
    }

    & when not (@right=_) and (@minmax=_) {
        right: @right;
    }

    & when not (@bottom=_) and (@minmax=_) {
        bottom: @bottom;
    }

    & when not (@left=_) and (@minmax=_) {
        left: @left;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @align: @top, @right, @bottom, @left;
        );
    }
}

//
//  .float(@float, [@min-width-query, @max-width-query]);
//   ------------------------------------------------------
//   @float      :  none|left|right|initial|inherit

.float (@float:_, @min-query:_, @max-query:_) {
 
    & when not (@float=_) and (@min-query=_) and (@max-query=_) {
        float: @float;
    }

    & when not (@min-query=_), not (@max-query=_) {
        .mixins(
            @query: @min-query, @max-query;
            @float: @float;
        );
    }
}

//
//   .list-style(@type, @position, @image[, @min-width-query, @max-width-query]);
//   ------------------------------------------------------
//   @type      :  none|disc|circle|square|decimal|decimal-leading-zero|lower-roman|upper-roman|lower-greek|lower-latin|upper-latin|armenian|georgian|lower-alpha|upper-alpha|hiragana|katakana|initial|inherit
//   @position  :  inside|outside|initial|inherit

.list-style(@type:_, @position:_, @image:_) {
    
    @vtype: if((@type=_); disc; @type);
    @vpos:  if((@position=_); outside; @position);
    @img:   if(@image=_; none; if(@image=none; none; url('@{image}')));

    list-style: @vtype @vpos @img;
}

//
//  .position(@position, @top, @right, @bottom, @left, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @position :  static|absolute|fixed|relative|sticky|initial|inherit
//   @top      :  auto|length|initial|inherit
//   @right    :  auto|length|initial|inherit
//   @bottom   :  auto|length|initial|inherit
//   @left     :  auto|length|initial|inherit

.position(@position:_, @top:_, @right:_, @bottom:_, @left:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@position=_) and (@minmax=_) {
        position: @position;
    }

    & when not (@top=_) and (@minmax=_) {
        top: @top;
    }

    & when not (@right=_) and (@minmax=_) {
        right: @right;
    }

    & when not (@bottom=_) and (@minmax=_) {
        bottom: @bottom;
    }

    & when not (@left=_) and (@minmax=_) {
        left: @left;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @position: @position, @top, @right, @bottom, @left;
        );
    }
}

.position(@position:_, @top:_) {
    & when not (@top=_) {
        .position(@position, @top, @top, @top, @top);
    }
}

//
//  .zindex(z-index, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @z-index :   auto|number|initial|inherit

.zindex(@index:_, @min-query:_, @max-query:_) {

    & when not (@index=_) and (@min-query=_) and (@max-query=_) {
        z-index: @index;
    }

    & when not (@min-query=_), not (@max-query=_) {
        .mixins(
            @query: @min-query, @max-query;
            @index: @index;
        );
    }
}

//
//  Anchor mixins

.mixins(@query:_; @after:_; @align:_; @animation:_; @backface:_; @background:_; @before:_; @blur:_; @border:_; @brightness:_; @center:_; @center-h:_; @center-v:_; @color:_; @contrast:_; 
    @custom:_; @display:_; @drop-shadow:_; @filter:_; @first-letter:_; @first-line:_; @float:_; @font:_; @fontface:_; @gradient:_; @grayscale:_; @hue-rotate:_; @invert:_; @list-style:_; @minmax-size:_; 
    @opacity:_; @origin:_; @overflow:_; @paragraph:_; @perspective:_; @placeholder:_; @position:_; @resize:_; @rotate3d:_; @rounded:_; @saturate:_; @scale3d:_; @sepia:_; @selection:_; @shadow:_; 
    @size:_; @skew:_; @spacing:_; @table-cell-color:_; @text:_; @text-decoration:_; @text-shadow:_; @text-transform:_; @transform:_; @transition:_; @translate3d:_; @triangle:_; @url:_; @zindex:_;) {

    @ruleset: {

        // Box-model
        & when not (@display=_) {
            .parse(@display);
            & when (length(@display)=2) { .display(.loop[1], .loop[2]); }
            & when (length(@display)>2) { .display(.loop[1], .loop[2], .loop[3], .loop[4]); }
        }
        & when not (@size=_) {
            .parse(@size);
            .size(.loop[1], .loop[2]);
        }
        & when not (@minmax-size=_) { 
            .parse(@minmax-size);
            .minmax-size(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@spacing=_) { 
            .parse(@spacing);
            .spacing(.loop[1], .loop[2]);
        }
        & when not (@border=_) {
            .parse(@border);
            .border(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@overflow=_) {
            .parse(@overflow);
            .overflow(.loop[1], .loop[2]);
        }
            
        // Layout
        & when not (@position=_) { 
            .parse(@position);
            & when (length(@position)=2) { .position(.loop[1], .loop[2]); }
            & when (length(@position)>2) { .position(.loop[1], .loop[2], .loop[3], .loop[4], .loop[5]); }
        }
        & when not (@align=_) { 
            .parse(@align);
            .align(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@float=_) { 
            .float(@float); 
        }
        & when not (@list-style=_) { 
            .list-style(@list-style); 
        }
        & when not (@zindex=_) { 
            .zindex(@zindex); 
        }

        // Visual
        & when not (@color=_) { 
            .parse(@color);
            .color(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@background=_) { 
            .parse(@background);
            .background(.loop[1], .loop[2], .loop[3], .loop[4], .loop[5], .loop[6], .loop[7]);
        }
        & when not (@gradient=_) { 
            .parse(@gradient);
            .gradient(.loop[1], .loop[2], .loop[3], .loop[4], .loop[5]);
        }
        & when not (@rounded=_) {
            .parse(@rounded);
            .rounded(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@shadow=_) {
            .parse(@shadow);
            .shadow(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@opacity=_) { 
            .opacity(@opacity); 
        }
            
        // Typographic
        & when not (@font=_) { 
            .parse(@font);
            .font(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@fontface=_) { 
            .parse(@fontface); 
            .fontface(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@paragraph=_) { 
            .parse(@paragraph); 
            .paragraph(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@text=_) { 
            .parse(@text); 
            .text(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@text-decoration=_) { 
            .parse(@text-decoration); 
            .text-decoration(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@text-shadow=_) { 
            .parse(@text-shadow); 
            .text-shadow(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@text-transform=_) { 
            .text-transform(@text-transform); 
        }

        // Transform
        & when not (@transform=_) {
            .transform(@transform); 
        }
        & when not (@perspective=_) { 
            .perspective(@perspective); 
        }
        & when not (@rotate3d=_) { 
            .parse(@rotate3d); 
            .rotate3d(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@scale3d=_) { 
            .parse(@scale3d); 
            .scale3d(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@skew=_) { 
            .parse(@skew); 
            .skew(.loop[1], .loop[2]);
        }
        & when not (@translate3d=_) { 
            .parse(@translate3d); 
            .translate3d(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@backface=_) { 
            .backface(@backface); 
        }
        & when not (@origin=_) { 
            .parse(@origin); 
            .origin(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@resize=_) { 
            .resize(@resize); 
        }

        // Filters
        & when not (@filter=_) { 
            .filter(@filter); 
        }
        & when not (@blur=_) { 
            .blur(@blur); 
        }
        & when not (@brightness=_) { 
            .brightness(@brightness); 
        }
        & when not (@contrast=_) { 
            .contrast(@contrast); 
        }
        & when not (@drop-shadow=_) { 
            .parse(@drop-shadow); 
            .drop-shadow(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@grayscale=_) { 
            .grayscale(@grayscale); 
        }
        & when not (@hue-rotate=_) { 
            .hue-rotate(@hue-rotate); 
        }
        & when not (@invert=_) { 
            .invert(@invert); 
        }
        & when not (@saturate=_) { 
            .saturate(@saturate); 
        }
        & when not (@sepia=_) { 
            .sepia(@sepia); 
        }
        & when not (@url=_) { 
            .url(@url); 
        }

        // Animation
        & when not (@animation=_) { 
            .parse(@animation);
            .animation(.loop[1], .loop[2], .loop[3], .loop[4], .loop[5], .loop[6], .loop[7], .loop[8]);
        }
        & when not (@transition=_) { 
            .parse(@transition);
            .transition(.loop[1], .loop[2], .loop[3], .loop[4]);
        }

        // Pseudo-elements
        & when not (@after=_) { 
            .parse(@after);
            .after(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@before=_) { 
            .parse(@before);
            .before(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@first-letter=_) { 
            .parse(@first-letter);
            .first-letter(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@first-line=_) { 
            .parse(@first-line);
            .first-line(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@placeholder=_) { 
            .parse(@placeholder);
            .placeholder(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@selection=_) { 
            .parse(@selection);
            .selection(.loop[1], .loop[2], .loop[3]);
        }

        // Helpers
        & when not (@center=_) { 
            .parse(@center);
            .center(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@center-h=_) { 
            .parse(@center-h);
            .center-h(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@center-v=_) { 
            .parse(@center-v);
            .center-v(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@table-cell-color=_) { 
            .parse(@table-cell-color);
            .table.cell-color(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@triangle=_) { 
            .parse(@triangle);
            .triangle(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@custom=_) { 
            .parse(@custom);
            .custom(.loop[1], .loop[2], .loop[3], .loop[4], .loop[5], .loop[6]);
        }

        .parse(@params) {
            .loop(@i:8) when (@i > 0) {
                .loop((@i - 1));
                @{i}: if(length(@params) >= @i; extract(@params, @i); _);
            }
        }
    }

    & when not (@query=_) {

        @min: extract(@query, 1);
        @max: extract(@query, 2);
        
        @minW:    if((@min=_); ''; 'and (minWidth: @{min}) ');
        @min-max: if((@max=_); ~'@{minW}'; ~'@{minW}and (max-width: @{max})');

        @media all @min-max {
            @ruleset();
        }
    }

    & when (@query=_) {
        @ruleset();
    }
}

//
//  Transform properties

//
//  .backface(@visibility, [@min-query, @max-query]);
//   ------------------------------------------------------
//   backface         :  visible|hidden|initial|inherit

.backface(@visibility:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@visibility=_) and (@minmax=_) {
        -webkit-backface-visibility: @visibility;
           -moz-backface-visibility: @visibility;
                backface-visibility: @visibility;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @backface: @visibility;
        );
    }
}

//
//  .origin(@x-axis, @y-axis, @z-axis, [@min-query, @max-query]);
//   ------------------------------------------------------
//   x-axis             :  left|center|right|-length-|percentage
//   y-axis             :  top|center|bottom|-length-|percentage
//   z-axis             :  -length-

.origin(@x-axis:_, @y-axis:_, @z-axis:0, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@x-axis=_) and (@y-axis=_) and (@minmax=_) {
        -webkit-transform-origin: @x-axis @y-axis @z-axis;
            -ms-transform-origin: @x-axis @y-axis @z-axis;
                transform-origin: @x-axis @y-axis @z-axis;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @origin: @x-axis, @y-axis, @z-axis;
        );
    }
}

//
//  .perspective(@length, [@min-query, @max-query]);
//   ------------------------------------------------------
//   length         :  -length-|none

.perspective(@length, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@length=_) and (@minmax=_) {
        -webkit-perspective: @length;
           -moz-perspective: @length;
                perspective: @length;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @perspective: @length;
        );
    }
}

//
//  .resize(@direction, [@min-query, @max-query]);
//   ------------------------------------------------------
//   direction          :  none|both|horizontal|vertical|initial|inherit

.resize(@direction:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@direction=_) and (@minmax=_) {
        resize: @direction;
        overflow: auto;      // Fix for Safari
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @resize: @direction;
        );
    }
}

//
//  .rotate3d(@x-axis, @y-axis, @z-axis, @angle, [@min-query, @max-query]);
//   ------------------------------------------------------
//   x-axis             :  1 (x-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   y-axis             :  1 (y-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   z-axis             :  1 (z-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   angle              :  degree|gradian|radian|turn

.rotate3d(@x-axis:1, @y-axis:1, @z-axis:1, @angle:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@angle=_) and (@minmax=_) {
        -webkit-transform+_: rotate3d(@x-axis, @y-axis, @z-axis, @angle);
            -ms-transform+_: rotate3d(@x-axis, @y-axis, @z-axis, @angle);
                transform+_: rotate3d(@x-axis, @y-axis, @z-axis, @angle);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @rotate: @x-axis, @y-axis, @z-axis, @angle;
        );
    }
}

//
//  .scale3d(@x-axis, @y-axis, @z-axis, [@min-query, @max-query]);
//   ------------------------------------------------------
//   x-axis             :  1 (x-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   y-axis             :  1 (y-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   z-axis             :  1 (z-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)

.scale3d(@x-axis:_, @y-axis:_, @z-axis:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@x-axis=_) and not (@y-axis=_) and not (@z-axis=_) and (@minmax=_) {
        -webkit-transform+_: scale3d(@x-axis, @y-axis, @z-axis);
            -ms-transform+_: scale3d(@x-axis, @y-axis, @z-axis);
                transform+_: scale3d(@x-axis, @y-axis, @z-axis);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @scale3d: @x-axis, @y-axis, @z-axis;
        );
    }
}

//
//  .skew(@transform, [@min-query, @max-query]);
//   ------------------------------------------------------
//   x-axis             :  1 (x-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   y-axis             :  1 (y-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)

.skew(@x-axis:_, @y-axis:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@x-axis=_) and not (@y-axis=_) and  (@minmax=_) {
        -webkit-transform+_: skewX(@x-axis) skewY(@y-axis);
            -ms-transform+_: skewX(@x-axis) skewY(@y-axis);
                transform+_: skewX(@x-axis) skewY(@y-axis);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @skew: @x-axis, @y-axis;
        );
    }
}

//
//  .transform(@transform, [@min-query, @max-query]);
//   ------------------------------------------------------
//   transform          :  none|transform-functions|initial|inherit

.transform(@transform:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@transform=_) and (@min-query=_) and (@max-query=_) {
        -webkit-transform+_: @transform;
            -ms-transform+_: @transform;
                transform+_: @transform;
    }

    & when not (@min-query=_), not (@max-query=_) {
        .mixins(
            @query: @min-query, @max-query;
            @transform: @transform;
        );
    }
}


//
//  .translate3d(@x-axis, @y-axis, @z-axis, [@min-query, @max-query]);
//   ------------------------------------------------------
//   x-axis             :  -length-|percentage
//   y-axis             :  -length-|percentage
//   z-axis             :  -length-|percentage

.translate3d(@x-axis:_, @y-axis:_, @z-axis:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@x-axis=_) and not (@x-axis=_) and not (@x-axis=_) and (@minmax=_) {
        -webkit-transform+_: translate3d(@x-axis, @y-axis, @z-axis);
            -ms-transform+_: translate3d(@x-axis, @y-axis, @z-axis);   
                transform+_: translate3d(@x-axis, @y-axis, @z-axis);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @translate3d: @x-axis, @y-axis, @z-axis;
        );
    }
}

//
//  Typography

//
//  .font(@size, @line-height, @weight, @family, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @size          :  medium|xx-small|x-small|small|large|x-large|xx-large|smaller|larger|length|initial|inherit
//   @style         :  normal|italic|oblique|initial|inherit
//   @weight/ style :  normal|bold|bolder|lighter|-number-|initial|inherit/ none|normal|italic
//   @family        :  family-name|initial|inherit

.font(@size:_, @line-height:_, @weight:_, @family:_, @min-query:_, @max-query:_) {

    @vfamily: if(@size=_ or @family=_; _);
    @vsize:  if(not (@line-height=_); if(not (@size=_); e('@{size}/@{line-height}'); _); @size);
    @minmax: if(@min-query=_ and @max-query=_; _; @min-query, @max-query);

    & when not (@vsize=_) and not (@weight=_) and not (@family=_) and (@minmax=_) {
        font: @weight @vsize @family;
    }

    & when not (@vsize=_) and (@weight=_) and not (@family=_) and (@minmax=_) {
        font: @vsize @family;
    }

    & when not (@size=_) and (@family=_) and (@minmax=_) {
        font-size: @size;
    }

    & when not (@line-height=_) and (@vfamily=_) and (@minmax=_) {
        line-height: @line-height;
    }

    & when not (@weight=_) and (@vfamily=_) and (@minmax=_) {
        font-weight: extract(@weight, 1);
    }

    & when (@size=_) and not (@family=_) and (@minmax=_) {
        font-family: @family;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @font: @size, @weight, @family;
        );
    }
}

//
//  .fontface(@family, @path, @weight, @style[, @min-query, @max-query]);
//   ------------------------------------------------------
//   @family  :  font-family name
//   @path    :  absolute/relative file path
//   @weight  :  normal|bold|bolder|lighter|-number-|initial|inherit;
//   @style   :  italic|normal|inherit

.fontface(@family:_, @path:_, @weight:_, @style:_, @min-query:_, @max-query:_) {

    @vweight: if(@weight=_; 400; @weight);
    @vstyle:  if(@style=_; normal; @style);

    & when not (@family=_) and not (@path=_) {
        @fontface {
            font-family: @family;
            src: url('@{path}.eot');  // IE9
            src: url('@{path}.eot?#iefix') format('embedded-opentype'),     
                 url('@{path}.woff') format('woff'),
                 url('@{path}.ttf') format('truetype'),
                 url('@{path}.svg#@{@family}') format('svg');
            font-weight: @vweight;
            font-style: @vstyle;
        }
    }

    & when not (@min-query=_), not (@max-query=_) {
        .mixins(
            @query: @min-query, @max-query;
            @fontface: @family, @path, @weight, @style;
        );
    }
}

//
//  .paragraph(@line-height, @align, @indent[, @min-query, @max-query]);
//   ------------------------------------------------------
//   @line-height   :  normal|number|-length-|initial|inherit
//   @align         :  left|right|center|justify|initial|inherit
//   @indent        :  -length-|initial|inherit

.paragraph(@line-height:_, @align:_, @indent:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@line-height=_) and (@minmax=_) {
        line-height: @line-height;
    }

    & when not (@align=_) and (@minmax=_) {
        text-align: @align;
    }

    & when not (@indent=_) and (@minmax=_) {
        text-indent: @indent;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @paragraph: @line-height, @align, @indent;
        );
    }
}

//
// .text(@size, @weight, @color[, @min-query, @max-query])
//   ------------------------------------------------------
//   @line      :  none|underline|overline|line-through|initial|inherit

.text(@size:_, @weight:_, @color:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@size=_) and (@minmax=_) {
        font-size: @size;
    }

    & when not (@weight=_) and (@minmax=_) {
        font-weight: @weight;
    }

    & when not (@color=_) and (@minmax=_) {
        color: @color;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @text: @size, @weight, @color;
        );
    }
}

//
// .text-decoration(@line, @color, @style[, @min-query, @max-query])
//   ------------------------------------------------------
//   @line      :  none|underline|overline|line-through|initial|inherit
//   @color     :  -color-|initial|inherit
//   @style     :  solid|double|dotted|dashed|wavy|initial|inherit;

.text-decoration(@line:_, @color:_, @style:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@line=_) and not (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration: @line @color @style
    }
    & when not (@line=_) and not (@color=_) and (@style=_) and (@minmax=_) {
        text-decoration: @line @color
    }

    & when not (@line=_) and (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration: @line @style
    }

    & when (@line=_) and not (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration-color: @color;  // IE not supported
        text-decoration-style: @style;  // IE not supported
    }

    & when not (@line=_) and (@color=_) and (@style=_) and (@minmax=_) {
        text-decoration-line: @line
    }

    & when (@line=_) and not (@color=_) and (@style=_) and (@minmax=_) {
        text-decoration-color: @color  // IE not supported
    }

    & when (@line=_) and (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration-style: @style  // IE not supported
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @text-decoration: @size, @weight, @family;
        );
    }
}
    
//
//  .text-shadow(@spread, @color, @alpha[, @min-query, @max-query]);
//   ------------------------------------------------------
//   @spread    :  h-shadow v-shadow [blur-radius]
//   @color     :  -color-|initial|inherit

.text-shadow(@spread:_, @color:_, @alpha:100%, @min-query:_, @max-query:_) {

    @percentage: if(ispercentage(@alpha); @alpha; @alpha*100%);
    @rgba: fade(@color, @percentage);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@spread=_) and not (@color=_) and (@minmax=_) {
        text-shadow: @spread @rgba;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @text-shadow: @spread, @color, @alpha;
        );
    }
}
    
//
//  .text-transform(@spread, @color, @alpha[, @min-query, @max-query]);
//   ------------------------------------------------------
//   text-transform      :  none|capitalize|uppercase|lowercase|initial|inherit

.text-transform(@transform, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@transform=_) and (@minmax=_) {
        text-transform: @transform;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @text-transform: @transform;
        );
    }
}

//
//  Visual appearance properties

//
//  .background(@color, @image, @repeat, @position/backsize, @repeat, @origin, @clip, @attachment[, @min-query, @max-query]);
//   ------------------------------------------------------
//   @color          :  -color-|transparent|initial|inherit
//   @image          :  none|url|initial|inherit
//   @repeat         :  repeat|repeat-x|repeat-y|no-repeat|initial|inherit
//   @position/ size :  center|hpos vpos|xpos ypos|initial|inherit/ auto|-length-|cover|contain|initial|inherit

.background(@color:_, @image:_, @position:_, @repeat:_, @origin:_, @clip:_, @attachment:_, @min-query:_, @max-query:_) {
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    @1: if((not (@color=_)); if((isstring(@color)); url('@{color}'); @color));
    @2: if((not (@image=_)); @1 if((isstring(@image)); url('@{image}'); @image); @1);
    @3: if((not (@position=_)); @2 @position; @2);
    @4: if((not (@repeat=_)); @3 @repeat; @3);
    @5: if((not (@origin=_)); @4 @origin; @4);
    @6: if((not (@clip=_)); @5 @clip; @5);
    @args: if((not (@attachment=_)); @6 @attachment; @6);

    & when not (@color=_) and (@minmax=_) {
        background: @args;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @back: @color, @image, @position, @repeat, @origin, @clip, @attachment;
        );
    }
}

//
//  .color(@text, @background, @border[, @min-query, @max-query]);
//   ------------------------------------------------------
//   @text              :  -color-|initial|inherit
//   @background        :  -color-|transparent|initial|inherit
//   @border            :  -color-|transparent|initial|inherit

.color(@text:_, @background:_, @border:_, @min-query:_, @max-query:_) {
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@text=_) and (@minmax=_) {
        color: @text;
    }

    & when not (@background=_) and (@minmax=_) {
        background-color: @background;
    }

    & when not (@border=_) and (@minmax=_) {
        border-color: @border;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @color: @text, @background, @border;
        );
    }
}

//
//  .gradient(@gradient, @start, @stop1, @stop2, @stop3[, @min-query, @max-query]);
//   ------------------------------------------------------
//   @gradient         :  linear|-angle-|to-top|to-bottom|to-right|to-left|radial|ellipse|circle
//   @start            :  -color- [position]
//   @stops            :  -color- [position]

.gradient(@gradient:_, @start:_, @stop1:_, @stop2:_, @stop3:_, @min-query:_, @max-query:_) {
    
    @mode: if((@gradient=radial) or (@gradient=ellipse) or (@gradient=circle); radial; linear);
    
    @a0: if((@gradient=_) or (@gradient=linear); 180deg; @gradient);
    @a1: if((@a0=to-left);   270deg; @a0);
    @a2: if((@a1=to-bottom); 180deg; @a1);
    @a3: if((@a2=to-right);   90deg; @a2);
    @angle: if((@a3=to-top);   0deg; @a3);
    
    @shape: if((@gradient=radial); circle; ellipse);

    @s1: if(not (@stop1=_); @stop1);
    @s2: if(not (@stop2=_); @s1, @stop2; @s1);
    @stops: if(not (@stop3=_); @s2, @stop3; @s2);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when (iscolor(extract(@gradient, 1))) and (iscolor(extract(@start, 1))) and (@stop1=_) and (@minmax=_) {
        .gradient(linear, @gradient, @start);
    }

    & when not (@gradient=_) and not (@mode=radial) and not (@start=_) and not (@stop1=_) and (@minmax=_) {
        background-image: -webkit-linear-gradient(@angle, @start, @stops);  // Safari 5.1+, Chrome 10+
        background-image:    -moz-linear-gradient(@angle, @start, @stops);  // Firefox 3.6+
        background-image:         linear-gradient(@angle, @start, @stops);  // IE10
    }
    
    & when not (@gradient=_) and (@mode=radial) and not (@start=_) and not (@stop1=_) and (@minmax=_) {
        background-image: -webkit-radial-gradient(center, @shape, @start, @stops);  // Safari 5.1+, Chrome 10+
        background-image:    -moz-radial-gradient(center, @shape, @start, @stops);   // Firefox 3.6+
        background-image:       radial-gradient(@shape at center, @start, @stops);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @gradient: @gradient, @start, @stop1, @stop2, @stop3;
        );
    }
}

//
//  .opacity(@opacity, [@min-query, @max-query])
//   ------------------------------------------------------
//   opacity             :  -number-|initial|inherit

.opacity(@opacity:_, @min-query:_, @max-query:_) {

    & when not (@opacity=_) and (@min-query=_) and (@max-query=_) {
        @filter: @opacity * 100;
        opacity: @opacity;
        filter: ~"alpha(opacity=@{filter})";
    }

    & when not (@min-query=_), not (@max-query=_) {
        .mixins(
            @query: @minmax;
            @opacity: @opacity;
        );
    }
}

//
//  .rounded.top-left(@radius, [@min-query, @max-query]);
//  .rounded.top-right(@radius, [@min-query, @max-query]);
//  .rounded.bottom-right(@radius, [@min-query, @max-query]);
//  .rounded.bottom-left(@radius, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @radius     :  -length- [length]|initial|inherit

.rounded {
    .top-left(@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-top-left-radius: @radius;
                -moz-border-radius-topleft: @radius;
                    border-top-left-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @top-left: @radius;
            );
        }
    }

    .top-right(@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
        
        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-top-right-radius: @radius;
                -moz-border-radius-topright: @radius;
                    border-top-right-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @top-right: @radius;
            );
        }
    }

    .bottom-right (@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
        
        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-bottom-right-radius: @radius;
                -moz-border-radius-bottomright: @radius;
                    border-bottom-right-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @bottom-right: @radius;
            );
        }
    }

    .bottom-left (@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
        
        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-bottom-left-radius: @radius;
                -moz-border-radius-bottomleft: @radius;
                    border-bottom-left-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @bottom-left: @radius;
            );
        }
    }
}

//
//  .rounded(@top-left, @top-right, @bottom-right, @bottom-left, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @top-left      :  -length-|initial|inherit
//   @top-right     :  -length-|initial|inherit
//   @bottom-left   :  -length-|initial|inherit
//   @bottom-left   :  -length-|initial|inherit

.rounded(@top-left:_, @top-right:_, @bottom-right:_, @bottom-left:_, @min-query:_, @max-query:_) {

    @borders: if(
                 (@top-left=@top-right) 
             and (@bottom-left=@bottom-right) 
             and (@top-left=@bottom-right); 
                  @top-left;
                  @top-left @top-right @bottom-right @bottom-left
             );
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        -webkit-border-radius: @borders;
           -moz-border-radius: @borders;
                border-radius: @borders;
    }
    
    & when not (@top-left=_) and (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded(@top-left, @top-left, @top-left, @top-left);
    }

    & when (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.top-right(@top-right);
    }

    & when (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.bottom-right(@bottom-right)
    }

    & when (@top-left=_) and (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.bottom-left(@bottom-left)
    }

    & when (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.bottom-right(@bottom-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.top-right(@top-right);
        .rounded.bottom-right(@bottom-right)
    }

    & when not (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.top-right(@top-right)
    }

    & when not (@top-left=_) and (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.bottom-right(@bottom-right)
    }

    & when (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.top-right(@top-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.top-right(@top-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.bottom-right(@bottom-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.top-right(@top-right);
        .rounded.bottom-right(@bottom-right)
    }

    & when (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.top-right(@top-right);
        .rounded.bottom-right(@bottom-right);
        .rounded.bottom-left(@bottom-left);
    }

    & when not (@minmax=_) {
        .mixins(            
            @query: @minmax;
            @rounded: @top-left, @top-right, @bottom-right, @bottom-left;
        );
    }
}

//
//  .shadow(@offset, @color, @alpha[, @inset, @min-query, @max-query]);
//   ------------------------------------------------------
//   @offset     :  none|h-offset v-offset blur|inset|initial|inherit
//   @color      :  -color-|transparent|initial|inherit
//   @alpha      :  none|0-1|-percentage-
//   @inset      :  inner shadow

.shadow(@offset:_, @color:_, @alpha:_, @inset:_, @min-query:_, @max-query:_) {
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@offset=_) and not (@color=_) and (@minmax=_) {
        
        @valpha: if(isnumber(@alpha); if(ispercentage(@alpha); @alpha; @alpha*100%); 100%);
        @rgba: fade(@color, @valpha);
        @vcolor: if(not (@inset=_); @rgba inset; @rgba);

        -webkit-box-shadow: @offset @vcolor;  // Android 2.3+, iOS 4.0.2-4.2
                box-shadow: @offset @vcolor;  // Chrome 6+, Firefox 4+, IE 9+
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @shadow: @offset, @color, @alpha, @inset;
        );
    }
}

//
//  Centering

//  .center(@mode, @width, @height);
//   ------------------------------------------------------
//   mode           :  none

.center(@mode:_, @width:_, @height:_, @container-width:100%, @container-height:100%) {
    & when (@mode=_) {
    }
}

//
//  .center-h(@mode, @width, @container-width);
//   ------------------------------------------------------
//   mode               :  none|negative|offset|absolute|flex
//   width              :  auto|-length-|initial|inherit
//   container-width    :  -percentage-  

.center-h(@mode:_, @width:_, @container-width:100%) {

    & when (@mode=_) { 
        // Element has width: @width;
        margin-left: auto;
        margin-right: auto;
        float: none;
    }

    & when (@mode=negative) and not (@width=_) {
        // Element has width: @width;
        margin-left: @container-width / 2;
        left: (@width / 2) * -1;
    }

    & when (@mode=offset) and not (@width=_) {
        @padding : @width; // missing padding
        @offset: @container-width * @padding / (@container-width - @padding);
        margin-left: round(-@offset, 2);
        padding-left: round(@offset, 2);
        padding-right: round(@offset, 2);
        .content-box();
    }

    & when (@mode=absolute) and not (@width=_) {
        // Element has position: absolute; and width;
        left:  @container-width / 2;
        margin-left: (@width / 2) * -1;
    }

    & when (@mode=flex) {
        // Element has display: flex and height;
        flex-direction: row;
        align-items: center;
    }
}

//  .center-v(@mode, @height, @container-height);
//   ------------------------------------------------------
//   mode               :  none|negative|offset|absolute|flex
//   height             :  auto|-length-|initial|inherit
//   container-height   :  -percentage-

.center-v(@mode:_, @height:_, @container-height:100%) {

    & when (@mode=negative) and not (@height=_) {
        // Element has height: @height;
        margin-top: @container-height / 2;
        top: (@height / 2) * -1;
    }

    & when (@mode=offset) and not (@height=_) {
        // not tested
        @padding : @height; // missing padding
        @offset:  @container-height * @padding / (@container-height - @padding);
        margin-top: round(-@offset, 2);
        padding-top: round(@offset, 2);
        padding-bottom: round(@offset, 2);
        .content-box;
    }

    & when (@mode=absolute) and not (@height=_) {
        // Element has position: absolute; and height;
        top: @container-height / 2;
        margin-top: (@length / 2) * -1;
    }

    & when (@mode=flex) and not (@height=_) {
        // Element has display: flex and height;
        flex-direction: column;
        justify-content: center;
    }
}

//
// Custom

//
//  .custom(property, value, [property.., value.., min-width, max-width]);
//   ------------------------------------------------------
//   property            :  custom property name
//   value               :  custom value

.custom(@property1:_, @value1:_, @property2:_, @value2:_, @property3:_, @value3:_, @min-query:_, @max-query:_) {
    
    @args: @property1, @value1, @property2, @value2, @property3, @value3;
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    .loop(@i: 5) when (@i > 0) {
        .loop(@i - 2);
        @prop: extract(@args, @i);
        @val:  extract(@args, @i+1);

        & when not (@prop=_) and not (@val=_) and (@minmax=_) {
            @{prop}: @val;
        }
    }
}

//
//  .custom(property, value, [property.., value.., min-width, max-width]);
//   ------------------------------------------------------
//   property            :  custom property name
//   value               :  custom value

.custom-prefixed(@property1:_, @value1:_, @property2:_, @value2:_, @property3:_, @value3:_, @min-query:_, @max-query:_) {
    
    @args: @property1, @value1, @property2, @value2, @property3, @value3;
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    .loop(@i: 5) when (@i > 0) {
        .loop(@i - 2);
        @prop: extract(@args, @i);
        @val:  extract(@args, @i+1);

        & when not (@prop=_) and not (@val=_) and (@minmax=_) {
            -webkit-@{prop}: @val;
               -moz-@{prop}: @val;
                -ms-@{prop}: @val;
                    @{prop}: @val;
        }
    }
}

//
//  Helpers

//  .border-box(); .content-box(); .clearfix(); .ellipsis(); .hide-text(); .hyphens(); .line-break(); 
//  .nowrap(); .noselect(); .word-break(); .wrap();

.border-box() {
    -webkit-box-sizing: border-box;    // Safari 5
       -moz-box-sizing: border-box;    // Firefox 19
            box-sizing: border-box;    // IE 8+
}

.content-box() {
    -webkit-box-sizing: content-box;    // Safari 5
       -moz-box-sizing: content-box;    // Firefox 19
            box-sizing: content-box;    // IE 8+
}

.clearfix() {
    &:after { 
        content: ''; 
        display: table; 
        clear: both; 
    }
}

.ellipsis() { 
    text-overflow: ellipsis;    // IE8 rendering issue
    white-space: nowrap; 
    overflow: hidden; 
}

.hide-text() { 
    text-indent: -9999px; 
    text-align: left;
    overflow: hidden; 
}

.hyphens() {
    -webkit-hyphens: auto;
        -moz-hyphens: auto;
            hyphens: auto;
}

.line-break() {  
    margin-left: 0; 
    clear: left; 
}

.nowrap() {
    white-space: nowrap;
}

.noselect() {
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;

    -webkit-touch-callout: none;
    -webkit-text-size-adjust: none;
        -ms-text-size-adjust: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
}

.word-break() {
    -ms-word-break: break-all;
        word-break: break-all;
        word-break: break-word;
}

.wrap() {
    white-space: normal; // validate
}

//
//  Pseudo-elements

//
//  .after(@content, @width, @height);
//   ------------------------------------------------------
//   @content       :  none|normal|counter|attr|string|open-quote|close-quote|no-open-quote|no-close-quote|url|initial|inherit
//   @width         :  auto|-length-|initial|inherit
//   @heigth        :  auto|-length-|initial|inherit

.after(@content:_, @width:_, @height:_) {
    
    @ruleset: {
        display: inline-block;
        content: @content;
        width: @width;
        & when not (@width=_) and (@height=_) {
            height: @width;
        }
        & when not (@height=_) {
            height: @height;
        }
    }

    .pseudo(after, @ruleset);
}

//
//  .before(@content, @width, @height);
//   ------------------------------------------------------
//   @content       :  none|normal|counter|attr|string|open-quote|close-quote|no-open-quote|no-close-quote|url|initial|inherit
//   @width         :  auto|-length-|initial|inherit
//   @heigth        :  auto|-length-|initial|inherit

.before(@content:_, @width:_, @height:_) {
    
    @ruleset: {
        display: inline-block;
        content: @content;
        width: @width;
        & when not (@width=_) and (@height=_) {
            height: @width;
        }
        & when not (@height=_) {
            height: @height;
        }
    }

    .pseudo(before, @ruleset);
}

//
//  .first-letter(@content, @width, @height);
//   ------------------------------------------------------

.first-letter(@size:_, @style:_, @color:_, @text-shadow:none) {
    
    @ruleset: {
        .text(@size, @style, @color);
        & when not (@text-shadow=_) {
            text-shadow: @text-shadow;
        }
    }

    .pseudo(first-letter, @ruleset);
}

//
//  .first-line(@content, @width, @height);
//   ------------------------------------------------------

.first-line(@size:_, @style:_, @color:_, @text-shadow:none) {
    
    @ruleset: {
        .text(@size, @style, @color);
        & when not (@text-shadow=_) {
            text-shadow: @text-shadow;
        }
    }

    .pseudo(first-line, @ruleset);
}

//
//  .placeholder(@text-color, @background-color, @text-shadow[, @min-query, @max-query]);
//   ------------------------------------------------------
//   @text-color        :  -color-|initial|inherit
//   @background-color  :  -color-|transparent|initial|inherit
//   @border-color      :  -color-|transparent|initial|inherit

.placeholder(@color:_, @background:_, @text-shadow: none, @min-query:_, @max-query:_) {

    @ruleset: {
        color: @color;
        background-color: @background;
        & when not (@text-shadow=_) {
            text-shadow: @text-shadow;
        }
    }

    // Chrome, Safari, Edge
    &::-webkit-input-placeholder { @ruleset(); }

    // Firefox 19+
    &::-moz-placeholder          { @ruleset(); }

    // IE
    &:-ms-input-placeholder      { @ruleset(); }

    // IE 10+
    &::-ms-input-placeholder     { @ruleset(); }

    &::placeholder               { @ruleset(); }
}

//
//  .pseudo(@pseudo, @rules);
//   ------------------------------------------------------
//  @pseudo     :  ::after, ::before, ::first-letter, ::first-line, ::selection
//  @rules      :  { css declarations; }

.pseudo(@pseudo:_, @rules: {}) {
    & when (@pseudo=after),  (@pseudo=before) {
        position: relative; 
        overflow: visible;    // overflow IE 8/9
    }
    @vpseudo: ~'::@{pseudo}';

    &@{vpseudo} {
        @rules();
    }
}

//
//  .selection(@text-color, @background-color, @text-shadow[, @min-query, @max-query]);
//   ------------------------------------------------------
//   @text-color        :  -color-|initial|inherit
//   @background-color  :  -color-|transparent|initial|inherit
//   @border-color      :  -color-|transparent|initial|inherit

.selection(@text-color:_, @background-color:_, @text-shadow:_) {
    @ruleset: {
        color: @text-color;
        background-color: @background-color;
        text-shadow: @text-shadow;
    }
    .pseudo(selection, @ruleset);
}

//
//  Tables

//
//  .table.padding(@padding);
//  .table.border(@width, @style, @color);
//  .table.color(@color, @background, @rows);
//  .table.rounded(@weight, @line-height, @style, @family);
//   ------------------------------------------------------
//   @width         :  auto|-length-|initial|inherit
//   @style         :  none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit
//   @color         :  -color-|initial|inherit
//   @rows          :  all|even|odd

.table {

    .cell-padding (@padding: 0) {
        & tr th,
        & tr td { 
            padding: @padding; 
        }
    }

    .cell-border(@width:_, @style:_, @color:_) {
        & tr th,
        & tr td { 
            .border(@width, @style, @color);
        }
    }

    .cell-color(@text-color:_, @background-color:_, @rows: all) when (@rows=all) {
        & tr th,
        & tr td { 
            .color(@text-color, @background-color); 
        }
    }

    .cell-color(@text-color:_, @background-color:_, @rows: all) when not (@rows=all) {
        & when (@rows=odd) {
            & tr th { 
                .color(@text-color, @background-color); 
            }
        }
        & when not (@rows=_) {
            & tr:nth-child(@{rows}) td { 
                .color(@text-color, @background-color); 
            }
        }
    }
    
    .cell-rounded (@radius: none) {
        border-collapse: separate;      //
        border-spacing: 0;              // border radius fix
        border: none;                   //
        .re-rounded(@radius) {          // maximum stack call fix
            .rounded(@radius);
        }
        & tr:first-child th:first-child { 
            .rounded.top-left(@radius); 
        }
        & tr:first-child th:last-child  { 
            .rounded.top-right(@radius); 
        }
        & tr:last-child  td:first-child { 
            .rounded.bottom-left(@radius); 
        }
        & tr:last-child  td:last-child  { 
            .rounded.bottom-right(@radius); 
        }
    }
}

//
//  Triangle

//
//  .triangle.(@direction, @width, @height, @color);
//   ------------------------------------------------------
//   @direction      :  top|right|bottom|left|top-right|top-left|bottom-right|bottom-left
//   @width          :  auto|-length-|initial|inherit
//   @heigth         :  auto|-length-|initial|inherit
//   @color          :  -color-|transparent|initial|inherit

.triangle(top, @width: 0, @height: 0, @color: black) {
    ._triangle-base();
    border-width: 0 @width/2 @height @width/2;
    border-color: @trn @trn @color @trn;
}

.triangle(right, @width: 0, @height: 0, @color: black) {
    ._triangle-base();
    border-width: @height/2 0 @height/2 @width;
    border-color: @trn @trn @trn @color;
}

.triangle(bottom, @width: 0, @height: 0, @color: black) {
    ._triangle-base();
    border-width: @height @width/2 0 @width/2;
    border-color: @color @trn @trn @trn;
}
    
.triangle(left, @width: 0, @height: 0, @color: black) {
    ._triangle-base();
    border-width: @height/2 @width @height/2 0;
    border-color: @trn @color @trn @trn;
}

.triangle(top-left, @width: 0, @height: 0, @color: black) {
    ._triangle-base();
    border-width: @height @width 0 0;
    border-color: @color @trn @trn @trn;
}

.triangle(top-right, @width: 0, @height: 0, @color: black) {
    ._triangle-base();
    border-width: 0 @width @height 0;
    border-color: @trn @trn @color @trn;
}

.triangle(bottom-left, @width: 0, @height: 0, @color: black) {
    ._triangle-base();
    border-width: @width 0 0 @height;
    border-color: @trn @trn @trn @color;
}

.triangle(bottom-right, @width: 0, @height: 0, @color: black) {
    ._triangle-base();
    border-width: 0 0 @height @width;
    border-color: @trn @color @trn @trn;
}

._triangle-base()  {
    width: 0;
    height: 0;
    border-style: solid;
}

//
//  Easing

@ease-in-back       : cubic-bezier(0.600, -0.280, 0.735, 0.045);
@ease-out-back      : cubic-bezier(0.175,  0.885, 0.320, 1.275);
@ease-in-out-back   : cubic-bezier(0.680, -0.550, 0.265, 1.550);

@ease-in-cubic      : cubic-bezier(0.550, 0.055, 0.675, 0.190);
@ease-out-cubic     : cubic-bezier(0.215, 0.610, 0.355, 1.000);
@ease-in-out-cubic  : cubic-bezier(0.645, 0.045, 0.355, 1.000);

@ease-in-circ       : cubic-bezier(0.600, 0.040, 0.980, 0.335);
@ease-out-circ      : cubic-bezier(0.075, 0.820, 0.165, 1.000);
@ease-in-out-circ   : cubic-bezier(0.785, 0.135, 0.150, 0.860);

@ease-in-expo       : cubic-bezier(0.950, 0.050, 0.795, 0.035);
@ease-out-expo      : cubic-bezier(0.190, 1.000, 0.220, 1.000);
@ease-in-out-expo   : cubic-bezier(1.000, 0.000, 0.000, 1.000);

@ease-in-quad       : cubic-bezier(0.550, 0.085, 0.680, 0.530);
@ease-out-quad      : cubic-bezier(0.250, 0.460, 0.450, 0.940);
@ease-in-out-quad   : cubic-bezier(0.455, 0.030, 0.515, 0.955);

@ease-in-quart      : cubic-bezier(0.895, 0.030, 0.685, 0.220);
@ease-out-quart     : cubic-bezier(0.165, 0.840, 0.440, 1.000);
@ease-in-out-quart  : cubic-bezier(0.770, 0.000, 0.175, 1.000);

@ease-in-quint      : cubic-bezier(0.755, 0.050, 0.855, 0.060);
@ease-out-quint     : cubic-bezier(0.230, 1.000, 0.320, 1.000);
@ease-in-out-quint  : cubic-bezier(0.860, 0.000, 0.070, 1.000);

@ease-in-sine       : cubic-bezier(0.470, 0.000, 0.745, 0.715);
@ease-out-sine      : cubic-bezier(0.390, 0.575, 0.565, 1.000);
@ease-in-out-sine   : cubic-bezier(0.445, 0.050, 0.550, 0.950);
//
//  Constants 

//  ie.
//  .font(@size @s @line-height);

@s  :  e('/');


//  Transparent

@trn                    :  transparent;
//
//  Hexadecimal grayscale

@hex0                   :  #000;
@hex1                   :  #111;
@hex2                   :  #222;
@hex3                   :  #333;
@hex4                   :  #444;
@hex5                   :  #555;
@hex6                   :  #666;
@hex7                   :  #777;
@hex8                   :  #888;
@hex9                   :  #999;
@hexa                   :  #aaa;
@hexb                   :  #bbb;
@hexc                   :  #ccc;
@hexd                   :  #ddd;
@hexe                   :  #eee;
@hexf                   :  #fff;
@hexf0                  :  #f0f0f0;
@hexf1                  :  #f1f1f1;
@hexf2                  :  #f2f2f2;
@hexf3                  :  #f3f3f3;
@hexf4                  :  #f4f4f4;
@hexf5                  :  #f5f5f5;
@hexf6                  :  #f6f6f6;
@hexf7                  :  #f7f7f7;
@hexf8                  :  #f8f8f8;

//
//  Web safe font families

@safe-font-monospace         :  'Menlo, Monaco, Consolas, monospace';
@safe-font-sans-serif        :  'Helvetica Neue, Helvetica, Arial, sans-serif';
@safe-font-script            :  'Brush Script MT', 'Comic Sans MS', cursive;
@safe-font-serif             :  'Georgia, Times New Roman, Times, serif';

//
//  Svg filters

@svg-grayscale      : "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0'/></filter></svg>#grayscale";
@svg-grayscale-ie10 : "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0'/></filter></svg>#grayscale";
