//
//  AnchorLESS v1.3.0
//  http://invader365.github.io/anchorLESS/
//
//  Animation and Transition

//
//  .animation(@name, @duration, @timing-function, @delay, @iteration-count, @direction, @fill-mode, @play-state, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @name            :  name of the @keyframes animation
//   @duration        :  -time-|initial|inherit
//   @timing-function :  linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start/end)|initial|inherit
//   @delay           :  -time-|initial|inherit
//   @iteration-count :  -number-|infinite|initial|inherit
//   @direction       :  normal|reverse|alternate|alternate-reverse|initial|inherit
//   @fill-mode       :  none|forwards|backwards|both|initial|inherit
//   @play-state      :  paused|running|initial|inherit

.animation(@name:_, @duration:_, @timing:_, @delay:_, @iteration:_, @direction:_, @fill-mode:_, @play-state:_, @min-query:_, @max-query:_) {

    @1: if((not (@name=_)); @name);
    @2: if((not (@duration=_)); @1 @duration; @1);
    @3: if((not (@timing=_)); @2 @timing; @2);
    @4: if((not (@delay=_)); @3 @delay; @3);
    @5: if((not (@iteration=_)); @4 @iteration; @4);
    @6: if((not (@direction=_)); @5 @direction; @5);
    @7: if((not (@fill-mode=_)); @6 @fill-mode; @6);
    @args: if((not (@play-state=_)); @7 @play-state; @7);
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@name=_) and not (@duration=_) and (@minmax=_) {
        -webkit-animation: @args;  // Safari, Chrome
           -moz-animation: @args;
            -ms-animation: @args;
                animation: @args;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @animation: @name, @duration, @timing, @delay, @iteration, @direction, @fill-mode, @play-state;
        );
    }
    
    .parse(@args) {

        .loop(@i:8) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .animation(.loop[$1], .loop[$2], .loop[$3], .loop[$4], .loop[$5], .loop[$6], .loop[$7], .loop[$8]);
    }
}

//
//  .transition(@property, @duration, @timing-function, @delay, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @property        :  none|all|-property-|initial|inherit
//   @duration        :  -time-|initial|inherit
//   @timing-function :  linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start/end)|initial|inherit
//   @delay           :  -time-|initial|inherit

.transition(@property:_, @duration:_, @timing:_, @delay:_, @min-query:_, @max-query:_) {

    @1: if((not (@property=_)); @property);
    @2: if((not (@duration=_)); @1 @duration; @1);
    @3: if((not (@timing=_)); @2 @timing; @2);
    @args: if((not (@delay=_)); @3 @delay; @3);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@property=_) and not (@duration=_) and (@minmax=_) {
        -webkit-transition: @args;
                transition: @args;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @transition: @property, @duration, @timing, @delay;
        );
    }
    
    .parse(@args) {

        .loop(@i:4) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .transition(.loop[$1], .loop[$2], .loop[$3], .loop[$4]);
    }
}

//
//   Box-model properties

//
//  .border(@width, @style, @color, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @width     :  medium|thin|thick|-length-|initial|inherit
//   @style     :  none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit
//   @color     :  color|transparent|initial|inherit

.border(@width:_, @style:_, @color:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@width=_) and not (@style=_) and not (@color=_) and (@minmax=_) {
        border: @width @style @color;
    }

    & when not (@width=_) and not (@style=_) and (@color=_) and (@minmax=_) {
        border: @width @style;
    }

    & when (@width=_) and not (@style=_) and not (@color=_) and (@minmax=_) {
        border: @style @color;
    }

    & when (@width=_) and not (@style=_) and (@color=_) and (@minmax=_) {
        border: @style;
    }

    & when not (@width=_) and (@style=_) and (@color=_) and (@minmax=_) {
        border-width: @width;
    }

    & when not (@width=_) and (@style=_) and not (@color=_) and (@minmax=_) {
        border-width: @width;
        border-color: @color;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @border: @width, @style, @color;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .border(.loop[$1], .loop[$2], .loop[$3]);
    }
}

//  .display(@mode, @property1, @property2, @property3, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @mode                    :  inline|block|inline-block|flex|grid|list-item|table|table-row|table-column|table-cell|none|initial|inherit
//   when (@mode = block) 
//     @width                 :  auto|-value-|initial|inherit
//     @height                :  auto|-value-|initial|inherit
//   when (@mode = flex)
//     @flex-flow             :  flex-direction flex-wrap|initial|inherit
//     @justify-content       :  flex-start|flex-end|center|space-between|space-around|initial|inherit
//     @align-items           :  flex-start|flex-end|center|space-between|space-around|initial|inherit
//   when (@mode = grid)
//     @grid-template-columns :  none|auto|max-content|min-content|-length-|initial|inherit
//     @grid-template-rows    :  none|auto|max-content|min-content|-length-|initial|inherit
//     @grid-gap              :  grid-row-gap grid-column-gap;

.display(@mode:_, @property1:_, @property2:_, @property3:_, @min-query:_, @max-query:_) {

    @prop1: if(@mode=flex; flex-flow;       if(@mode=grid; grid-template-columns; width););
    @prop2: if(@mode=flex; justify-content; if(@mode=grid; grid-template-rows; height););
    @prop3: if(@mode=flex; align-items;     if(@mode=grid; gap););

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@mode=_) and (@minmax=_) {
        display: @mode;
    }

    & when not (@property1=_) and (@minmax=_) {
        @{prop1}: @property1;
    }

    & when not (@property2=_) and (@minmax=_) {
        @{prop2}: @property2;
    }

    & when not (@property3=_) and (@minmax=_) {
        @{prop3}: @property3;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @display: @mode, @property1, @property2, @property3;
        );
    }
    
    .parse(@args) {

        .loop(@i:4) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .display(.loop[$1], .loop[$2], .loop[$3], .loop[$4]);
    }
}

//
//  .minmax-size(@min-width, @max-width, @min-height, @max-heigh, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @min-width      :  -length-|initial|inherit
//   @max-width      :  -length-|initial|inherit
//   @min-height     :  -length-|initial|inherit
//   @max-height     :  -length-|initial|inherit

.minmax-size(@min-width:_, @max-width:_, @min-height:_, @max-height:_, @min-query:_, @max-query:_) {
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@min-width=_) and (@minmax=_) {
        min-width: @min-width;
    }

    & when not (@max-width=_) and (@minmax=_) {
        max-width: @max-width;
    }

    & when not (@min-height=_) and (@minmax=_) {
        min-height: @min-height;
    }

    & when not (@max-height=_) and (@minmax=_) {
        max-height: @max-height;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @minmax-size: @min-width, @max-width, @min-height, @max-height;
        );
    }
    
    .parse(@args) {

        .loop(@i:4) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .minmax-size(.loop[$1], .loop[$2], .loop[$3], .loop[$4]);
    }
}

//
//  .rounded.top-left(@radius, [@min-query, @max-query]);
//  .rounded.top-right(@radius, [@min-query, @max-query]);
//  .rounded.bottom-right(@radius, [@min-query, @max-query]);
//  .rounded.bottom-left(@radius, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @radius     :  -length- [length]|initial|inherit

.rounded {
    .top-left(@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-top-left-radius: @radius;
                -moz-border-radius-topleft: @radius;
                    border-top-left-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @top-left: @radius;
            );
        }
    }

    .top-right(@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
        
        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-top-right-radius: @radius;
                -moz-border-radius-topright: @radius;
                    border-top-right-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @top-right: @radius;
            );
        }
    }

    .bottom-right (@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
        
        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-bottom-right-radius: @radius;
                -moz-border-radius-bottomright: @radius;
                    border-bottom-right-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @bottom-right: @radius;
            );
        }
    }

    .bottom-left (@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
        
        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-bottom-left-radius: @radius;
                -moz-border-radius-bottomleft: @radius;
                    border-bottom-left-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @bottom-left: @radius;
            );
        }
    }
}

//
//  .size(@width, @height, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @width         :  auto|-value-|initial|inherit
//   @heigth        :  auto|-value-|initial|inherit

.size(@width:_, @height:_, @min-query:_, @max-query:_) {
  
    @vheight: if(@height=_; @width; @height);
  
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@width=_) and (@minmax=_) {
        width: @width;
    }
  
    & when not (@vheight=_) and (@minmax=_) {
        height: @vheight;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @size: @width, @height;
        );
    }
    
    .parse(@args) {

        .loop(@i:2) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .size(.loop[$1], .loop[$2]);
    }
}

//
//  .spacing(@margin, @padding, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @margin         :  -length-|auto|initial|inherit
//   @padding        :  -length-|auto|initial|inherit

.spacing (@margin:_, @padding:_, @min-query:_, @max-query:_) {
  
    @vpadding: if(not (@margin=_) and (@padding=_); @margin; @padding);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@margin=_) and (@minmax=_) {
        margin: @margin;
    }

    & when not (@vpadding=_) and (@minmax=_) {
        padding: @vpadding;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @spacing: @margin, @padding;
        );
    }
    
    .parse(@args) {

        .loop(@i:2) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .spacing(.loop[$1], .loop[$2]);
    }
}

//
//   Filter properties

//
//  .blur(@pixels[, @min-query, @max-query]);
//   ------------------------------------------------------
//   blur           :  pixels

.blur(@pixels:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@pixels=_) and (@minmax=_) {
        -webkit-filter+_: blur(@pixels);
                filter+_: blur(@pixels);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @blur: @pixels;
        );
    }
}

//
//  .brightness(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   brightness         :  percentage

.brightness(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: brightness(@percentage);
                filter+_: brightness(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @brightness: @percentage;
        );
    }
}

//
//  .contrast(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   contrast         :  percentage

.contrast(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: contrast(@percentage);
                filter+_: contrast(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @contrast: @percentage;
        );
    }
}

//
//  .dropshadow(@offset, @color[, @min-query, @max-query]);
//   ------------------------------------------------------
//   offset         :  none|h-offset v-offset blur|inset|initial|inherit
//   blur           :  -length-
//   color          :  -color-|transparent|initial|inherit

.dropshadow(@offset:_, @blur:_, @color:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@offset=_) and (@minmax=_) {

        -webkit-filter+_: drop-shadow(@offset @blur @color);
                filter+_: drop-shadow(@offset @blur @color);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @dropshadow: @offset, @blur, @color;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .dropshadow(.loop[$1], .loop[$2], .loop[$3]);
    }
}

//
//  .filter(@pixels[, @min-query, @max-query]);
//   ------------------------------------------------------
//   filter:         :  none|filter-function|initial|inherit

.filter(@params:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@params=_) and (@minmax=_) {
        -webkit-filter+_: @params;
                filter+_: @params;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @filter: @params;
        );
    }
}

//
//  .grayscale(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   grayscale         :  percentage

.grayscale(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: grayscale(@percentage);
                filter+_: grayscale(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @grayscale: @percentage;
        );
    }
}

//
//  .huerotate(@degrees[, @min-query, @max-query]);
//   ------------------------------------------------------
//   huerotate         :  degrees

.huerotate(@degrees:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@degrees=_) and (@minmax=_) {
        -webkit-filter+_: hue-rotate(@degrees);
                filter+_: hue-rotate(@degrees);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @huerotate: @degrees;
        );
    }
}

//
//  .invert(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   invert         :  percentage

.invert(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: invert(@percentage);
                filter+_: invert(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @invert: @percentage;
        );
    }
}

//
//  .saturate(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   saturate         :  percentage

.saturate(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: saturate(@percentage);
                filter+_: saturate(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @saturate: @percentage;
        );
    }
}

//
//  .sepia(@percentage[, @min-query, @max-query]);
//   ------------------------------------------------------
//   sepia         :  percentage

.sepia(@percentage:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@percentage=_) and (@minmax=_) {
        -webkit-filter+_: sepia(@percentage);
                filter+_: sepia(@percentage);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @sepia: @percentage;
        );
    }
}

//
//  .url(@url[, @min-query, @max-query]);
//   ------------------------------------------------------
//   url         :  location of the svg filter

.url(@svg-url:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@svg-url=_) and (@minmax=_) {
        -webkit-filter+_: url(@svg-url);
                filter+_: url(@svg-url);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @url: @svg-url;
        );
    }
}
  
//
//  Font properties

//
//  .font(@style, @weight, @size, @family, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @style    :  normal|italic|oblique|initial|inherit
//   @weight   :  normal|bold|bolder|lighter|-number-|initial|inherit
//   @family   :  family-name|initial|inherit

.font(@size:_, @weight:_, @family:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@size=_) and not (@weight=_) and not (@family=_) and (@minmax=_) {
        font: @weight @size @family;
    }

    & when not (@size=_) and (@weight=_) and not (@family=_) and (@minmax=_) {
        font: @size @family;
    }

    & when not (@size=_) and not (@weight=_) and (@family=_) and (@minmax=_) {
        font-size: @size;
        font-weight: @weight;
    }

    & when (@size=_) and not (@weight=_) and not (@family=_) and (@minmax=_) {
        font-weight: @weight;
        font-family: @family;
    }

    & when not (@size=_) and (@weight=_) and (@family=_) and (@minmax=_) {
        font-size: @size;
    }

    & when (@size=_) and not (@weight=_) and (@family=_) and (@minmax=_) {
        font-weight: @weight;
    }

    & when (@size=_) and (@weight=_) and not (@family=_) and (@minmax=_) {
        font-family: @family;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @font: @size, @weight, @family;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .font(.loop[$1], .loop[$2], .loop[$3]);
    }
}

//
//  .font-face(@family, @path, @weight, @style, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @family  :  font-family name
//   @path    :  absolute/relative file path
//   @weight  :  normal|bold|bolder|lighter|-number-|initial|inherit;
//   @style   :  italic|normal|inherit

.fontface(@family:_, @path:_, @weight:_, @style:_, @min-query:_, @max-query:_) {

    @vweight: if(@weight=_; 400; @weight);
    @vstyle:  if(@style=_; normal; @style);

    & when not (@family=_) and not (@path=_) {
        @font-face {
            font-family: @family;
            src: url('@{path}.eot');  // IE9
            src: url('@{path}.eot?#iefix') format('embedded-opentype'),     
                 url('@{path}.woff') format('woff'),
                 url('@{path}.ttf') format('truetype'),
                 url('@{path}.svg#@{@family}') format('svg');
            font-weight: @vweight;
            font-style: @vstyle;
        }
    }

    & when not (@min-query=_), not (@max-query=_) {
        .mixins(
            @query: @min-query, @max-query;
            @paragraph: @family, @path, @weight, @style;
        );
    }
    
    .parse(@args) {

        .loop(@i:4) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .fontface(.loop[$1], .loop[$2], .loop[$3], .loop[$4]);
    }
}

//
//  .paragraph(@align, @indent, @transform, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @align      :  left|right|center|justify|initial|inherit
//   @indent     :  -length-|initial|inherit
//   @transform  :  none|capitalize|uppercase|lowercase|initial|inherit

.paragraph(@align:_, @indent:_, @transform:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@align=_) and (@minmax=_) {
        text-align: @align;
    }

    & when not (@indent=_) and (@minmax=_) {
        text-indent: @indent;
    }

    & when not (@transform=_) and (@minmax=_) {
        text-transform: @transform;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @paragraph: @indent, @align, @transform;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .paragraph(.loop[$1], .loop[$2], .loop[$3]);
    }
}

//
// .textdecoration(@line, @color, @style, [@min-query, @max-query])
//   ------------------------------------------------------
//   @line      :  none|underline|overline|line-through|initial|inherit
//   @color     :  -color-|initial|inherit
//   @style     :  solid|double|dotted|dashed|wavy|initial|inherit;

.textdecoration(@line:_, @color:_, @style:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@line=_) and not (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration: @line @color @style
    }
    & when not (@line=_) and not (@color=_) and (@style=_) and (@minmax=_) {
        text-decoration: @line @color
    }

    & when not (@line=_) and (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration: @line @style
    }

    & when (@line=_) and not (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration-color: @color;  // IE not supported
        text-decoration-style: @style;  // IE not supported
    }

    & when not (@line=_) and (@color=_) and (@style=_) and (@minmax=_) {
        text-decoration-line: @line
    }

    & when (@line=_) and not (@color=_) and (@style=_) and (@minmax=_) {
        text-decoration-color: @color  // IE not supported
    }

    & when (@line=_) and (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration-style: @style  // IE not supported
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @textdecoration: @size, @weight, @family;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .textdecoration(.loop[$1], .loop[$2], .loop[$3]);
    }
}
    
//
//  .text-shadow(@spread, @color, @alpha, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @spread    :  h-shadow v-shadow [blur-radius]
//   @color     :  -color-|initial|inherit

.textshadow(@spread:_, @color:_, @alpha:100%, @min-query:_, @max-query:_) {

    @percentage: if(ispercentage(@alpha); @alpha; @alpha*100%);
    @rgba: fade(@color, @percentage);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@spread=_) and not (@color=_) and (@minmax=_) {
        text-shadow: @spread @rgba;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @textshadow: @spread, @color, @alpha;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .textshadow(.loop[$1], .loop[$2], .loop[$3]);
    }
}

//
//  Layout properties

//
//  .align(@top, @right, @bottom, @left, [@min-query, @max-query]) 
//   ------------------------------------------------------
//   @top      :  auto|length|initial|inherit
//   @right    :  auto|length|initial|inherit
//   @bottom   :  auto|length|initial|inherit
//   @left     :  auto|length|initial|inherit

.align(@top:_) {

    & when not (@top=_) {
        .align(@top, @top, @top, @top);
    }
}

.align(@top:_, @right:_, @bottom:_, @left:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@top=_) and (@minmax=_) {
        top: @top;
    }

    & when not (@right=_) and (@minmax=_) {
        right: @right;
    }

    & when not (@bottom=_) and (@minmax=_) {
        bottom: @bottom;
    }

    & when not (@left=_) and (@minmax=_) {
        left: @left;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @align: @top, @right, @bottom, @left;
        );
    }

    .parse(@args) {

        @length: length(@args);
        
        & when (@length = 1) { .align(@args) }
        
        & when not (@length = 1) {
            .loop(@i: 4) when (@i > 0) {
                .loop((@i - 1));
                @{i}: if(@length >= @i; extract(@args, @i); _);
            }

            .align(.loop[$1], .loop[$2], .loop[$3], .loop[$4]);
        }
    }
}

//
//  .float(@float, [@min-width-query, @max-width-query]);
//   ------------------------------------------------------
//   @float      :  none|left|right|initial|inherit

.float (@float:_, @min-query:_, @max-query:_) {
 
    & when not (@float=_) and (@min-query=_) and (@max-query=_) {
        float: @float;
    }

    & when not (@min-query=_), not (@max-query=_) {
        .mixins(
            @query: @min-query, @max-query;
            @float: @float;
        );
    }
}

//
//  .position(@position, @top, @right, @bottom, @left, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @position :  static|absolute|fixed|relative|sticky|initial|inherit
//   @top      :  auto|length|initial|inherit
//   @right    :  auto|length|initial|inherit
//   @bottom   :  auto|length|initial|inherit
//   @left     :  auto|length|initial|inherit

.position(@position:_, @top:_) {

    & when not (@top=_) {
        .position(@position, @top, @top, @top, @top);
    }
}

.position(@position:_, @top:_, @right:_, @bottom:_, @left:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@position=_) and (@minmax=_) {
        position: @position;
    }

    & when not (@top=_) and (@minmax=_) {
        top: @top;
    }

    & when not (@right=_) and (@minmax=_) {
        right: @right;
    }

    & when not (@bottom=_) and (@minmax=_) {
        bottom: @bottom;
    }

    & when not (@left=_) and (@minmax=_) {
        left: @left;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @position: @position, @top, @right, @bottom, @left;
        );
    }

    .parse(@args) {

        @length: length(@args);

        .loop(@i: 5) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(@length >= @i; extract(@args, @i); _);
        }
        
        & when (@length = 2) { 
          .position(.loop[$1], .loop[$2]); 
        }
        
        & when not (@length = 2) { 
           .position(.loop[$1], .loop[$2], .loop[$3], .loop[$4], .loop[$5]);
        }
    }
}

//
//  .zindex(z-index, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @z-index :   auto|number|initial|inherit

.zindex(@index:_, @min-query:_, @max-query:_) {

    & when not (@index=_) and (@min-query=_) and (@max-query=_) {
        z-index: @index;
    }

    & when not (@min-query=_), not (@max-query=_) {
        .mixins(
            @query: @min-query, @max-query;
            @index: @index;
        );
    }
}

//
// Misc properties

//
//  .custom(property, value, [property.., value.., min-width, max-width]);
//   ------------------------------------------------------
//   property            :  custom property name
//   value               :  custom value

.custom(@property1:_, @value1:_, @property2:_, @value2:_, @property3:_, @value3:_, @min-query:_, @max-query:_) {
    
    @args: @property1, @value1, @property2, @value2, @property3, @value3;
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    .loop(@i: 5) when (@i > 0) {
        .loop(@i - 2);
        @prop: extract(@args, @i);
        @val:  extract(@args, @i+1);

        & when not (@prop=_) and not (@val=_) and (@minmax=_) {
            @{prop}: @val;
        }
    }
    
    .loop();

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @custom: @property1, @value1, @property2, @value2, @property3, @value3;
        );
    }
    
    .parse(@args) {

        .loop(@i:6) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .custom(.loop[$1], .loop[$2], .loop[$3], .loop[$4], .loop[$5], .loop[$6]);
    }
}

//
//  .overflow(@overflow-x, @overflow-y, [@min-query, @max-query])
//   ------------------------------------------------------
//   overflow-x         :  visible|hidden|scroll|auto|initial|inherit
//   overflow-y         :  visible|hidden|scroll|auto|initial|inherit

.overflow(@overflow-x:_, @overflow-y:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when (@overflow-x=@overflow-y) and (@minmax=_) {
        overflow: @overflow-x;
    }

    & when not (@overflow-y=_) and (@minmax=_) {
        overflow-y: @overflow-y;
    }
        
    & when not (@overflow-x=_) and (@minmax=_) {
        overflow-x: @overflow-x;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @overflow: @overflow-x, @overflow-y;
        );
    }
}

//
//  Anchor mixins

.mixins(@query:_; @align:_; @animation:_; @backface:_; @background:_; @blur:_; @border:_; @brightness:_; @color:_; @contrast:_; @custom:_; @display:_; 
    @dropshadow:_; @filter:_; @float:_; @font:_; @fontface:_; @gradient:_; @grayscale:_; @huerotate:_; @invert:_; @minmax-size:_; @opacity:_; 
    @origin:_; @paragraph:_; @perspective:_; @position:_; @resize:_; @rotate3d:_; @rounded:_; @saturate:_; @scale3d:_; @sepia:_; @shadow:_; @size:_; 
    @skew:_; @spacing:_; @transition:_; @translate3d:_; @transform:_; @textdecoration:_; @textshadow:_; @url:_; @zindex:_;) {

    @min: extract(@query, 1);
    @max: extract(@query, 2);

    & when (@query=_) {
        .return-mixins(@align; @animation; @backface; @background; @blur; @border; @brightness; @color; @contrast; @custom; @display; @dropshadow; 
            @filter; @float; @font; @fontface; @gradient; @grayscale; @huerotate; @invert; @minmax-size; @opacity; @origin; @paragraph; @perspective; 
            @position; @resize; @rotate3d; @rounded; @saturate; @scale3d; @sepia; @shadow; @size; @skew; @spacing; @transition; @translate3d; 
            @transform; @textdecoration; @textshadow; @url; @zindex;);
    }

    & when not (@query=_) {
        @minW:   if((@min=_); ''; 'and (minWidth: @{min}) ');
        @min-max: if((@max=_); ~'@{minW}'; ~'@{minW}and (max-width: @{max})');

        @media all @min-max {
            .return-mixins(@align; @animation; @backface; @background; @blur; @border; @brightness; @color; @contrast; @custom; @display; @dropshadow; 
                @filter; @float; @font; @fontface; @gradient; @grayscale; @huerotate; @invert; @minmax-size; @opacity; @origin; @paragraph; @perspective; 
                @position; @resize; @rotate3d; @rounded; @saturate; @scale3d; @sepia; @shadow; @size; @skew; @spacing; @transition; @translate3d; 
                @transform; @textdecoration; @textshadow; @url; @zindex;);
        }
    }
}

.return-mixins(@align; @animation; @backface; @background; @blur; @border; @brightness; @color; @contrast; @custom; @display; @dropshadow; 
    @filter; @float; @font; @fontface; @gradient; @grayscale; @huerotate; @invert; @minmax-size; @opacity; @origin; @paragraph; @perspective; 
    @position; @resize; @rotate3d; @rounded; @saturate; @scale3d; @sepia; @shadow; @size; @skew; @spacing; @transition; @translate3d; 
    @transform; @textdecoration; @textshadow; @url; @zindex;) {
            
    // Box-model
    & when not (@display=_) { .display.parse(@display); }
    & when not (@size=_) { .size.parse(@size); }
    & when not (@minmax-size=_) { .minmax-size.parse(@minmax-size); }
    & when not (@spacing=_) { .spacing.parse(@spacing); }
    & when not (@border=_) { .border.parse(@border); }
        
    // Layout
    & when not (@position=_) { .position.parse(@position); }
    & when not (@align=_) { .align.parse(@align); }
    & when not (@float=_) { .float(@float); }
    & when not (@zindex=_) { .zindex(@zindex); }

    // Visual
    & when not (@color=_) { .color.parse(@color); }
    & when not (@background=_) { .back.parse(@background); }
    & when not (@gradient=_) { .gradient.parse(@gradient); }
    & when not (@rounded=_) { .rounded.parse(@rounded); }
    & when not (@shadow=_) { .shadow.parse(@shadow); }
    & when not (@opacity=_) { .opacity(@opacity); }
        
    // Typographic
    & when not (@font=_) { .font.parse(@font); }
    & when not (@fontface=_) { .fontface.parse(@fontface); }
    & when not (@paragraph=_) { .paragraph.parse(@paragraph); }
    & when not (@textdecoration=_) { .textdecoration.parse(@textdecoration); }
    & when not (@textshadow=_) { .textshadow.parse(@textshadow); }

    // Transform
    & when not (@transform=_) { .transform(@transform); }
    & when not (@perspective=_) { .perspective(@perspective); }
    & when not (@rotate3d=_) { .rotate3d.parse(@rotate3d); }
    & when not (@scale3d=_) { .scale3d.parse(@scale3d); }
    & when not (@skew=_) { .skew.parse(@skew); }
    & when not (@translate3d=_) { .translate3d.parse(@translate3d); }
    & when not (@backface=_) { .backface(@backface); }
    & when not (@origin=_) { .origin.parse(@origin); }
    & when not (@resize=_) { .resize(@resize); }

    // Filters
    & when not (@filter=_) { .filter(@filter); }
    & when not (@blur=_) { .blur(@blur); }
    & when not (@brightness=_) { .brightness(@brightness); }
    & when not (@contrast=_) { .contrast(@contrast); }
    & when not (@dropshadow=_) { .dropshadow.parse(@dropshadow); }
    & when not (@grayscale=_) { .grayscale(@grayscale); }
    & when not (@huerotate=_) { .huerotate(@huerotate); }
    & when not (@invert=_) { .invert(@invert); }
    & when not (@saturate=_) { .saturate(@saturate); }
    & when not (@sepia=_) { .sepia(@sepia); }
    & when not (@url=_) { .url(@url); }

    // Animation
    & when not (@animation=_) { .animation.parse(@animation); }
    & when not (@transition=_) { .transition.parse(@transition); }

    // Others
    & when not (@custom=_) { .custom.parse(@custom); }
}

//
//  Transform properties

//
//  .backface(@visibility, [@min-query, @max-query]);
//   ------------------------------------------------------
//   backface         :  visible|hidden|initial|inherit

.backface(@visibility:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@visibility=_) and (@minmax=_) {
        -webkit-backface-visibility: @visibility;
           -moz-backface-visibility: @visibility;
                backface-visibility: @visibility;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @backface: @visibility;
        );
    }
}

//
//  .origin(@x-axis, @y-axis, @z-axis, [@min-query, @max-query]);
//   ------------------------------------------------------
//   x-axis             :  left|center|right|-length-|percentage
//   y-axis             :  top|center|bottom|-length-|percentage
//   z-axis             :  -length-

.origin(@x-axis:_, @y-axis:_, @z-axis:0, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@x-axis=_) and (@y-axis=_) and (@minmax=_) {
        -webkit-transform-origin: @x-axis @y-axis @z-axis;
            -ms-transform-origin: @x-axis @y-axis @z-axis;
                transform-origin: @x-axis @y-axis @z-axis;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @origin: @x-axis, @y-axis, @z-axis;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .origin(.loop[$1], .loop[$2], .loop[$3]);
    }
    
}

//
//  .perspective(@length, [@min-query, @max-query]);
//   ------------------------------------------------------
//   length         :  -length-|none

.perspective(@length, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@length=_) and (@minmax=_) {
        -webkit-perspective: @length;
           -moz-perspective: @length;
                perspective: @length;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @perspective: @length;
        );
    }
}

//
//  .resize(@direction, [@min-query, @max-query]);
//   ------------------------------------------------------
//   direction          :  none|both|horizontal|vertical|initial|inherit

.resize(@direction:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@direction=_) and (@minmax=_) {
        resize: @direction;
        overflow: auto;      // Fix for Safari
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @resize: @direction;
        );
    }
}

//
//  .rotate3d(@x-axis, @y-axis, @z-axis, @angle, [@min-query, @max-query]);
//   ------------------------------------------------------
//   x-axis             :  1 (x-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   y-axis             :  1 (y-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   z-axis             :  1 (z-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   angle              :  degree|gradian|radian|turn

.rotate3d(@x-axis:1, @y-axis:1, @z-axis:1, @angle:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@angle=_) and (@minmax=_) {
        -webkit-transform+_: rotate3d(@x-axis, @y-axis, @z-axis, @angle);
            -ms-transform+_: rotate3d(@x-axis, @y-axis, @z-axis, @angle);
                transform+_: rotate3d(@x-axis, @y-axis, @z-axis, @angle);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @rotate: @x-axis, @y-axis, @z-axis, @angle;
        );
    }
    
    .parse(@args) {

        .loop(@i:4) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .rotate3d(.loop[$1], .loop[$2], .loop[$3], .loop[$4]);
    }
}

//
//  .scale3d(@factor, [@min-query, @max-query]);
//   ------------------------------------------------------
//   x-axis             :  1 (x-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   y-axis             :  1 (y-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   z-axis             :  1 (z-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)

.scale3d(@x-axis:_, @y-axis:_, @z-axis:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@x-axis=_) and not (@y-axis=_) and not (@z-axis=_) and (@minmax=_) {
        -webkit-transform+_: scale3d(@x-axis, @y-axis, @z-axis);
            -ms-transform+_: scale3d(@x-axis, @y-axis, @z-axis);
                transform+_: scale3d(@x-axis, @y-axis, @z-axis);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @scale3d: @x-axis, @y-axis, @z-axis;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .scale3d(.loop[$1], .loop[$2], .loop[$3]);
    }
}

//
//  .skew(@transform, [@min-query, @max-query]);
//   ------------------------------------------------------
//   x-axis             :  1 (x-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)
//   y-axis             :  1 (y-axis rotation)|0 (no rotation)|-1 (opposite rotation direction)

.skew(@x-axis:_, @y-axis:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@x-axis=_) and not (@y-axis=_) and  (@minmax=_) {
        -webkit-transform+_: skewX(@x-axis) skewY(@y-axis);
            -ms-transform+_: skewX(@x-axis) skewY(@y-axis);
                transform+_: skewX(@x-axis) skewY(@y-axis);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @skew: @x-axis, @y-axis;
        );
    }
    
    .parse(@args) {

        .loop(@i:2) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .skew(.loop[$1], .loop[$2]);
    }
}

//
//  .transform(@transform, [@min-query, @max-query]);
//   ------------------------------------------------------
//   transform          :  none|transform-functions|initial|inherit

.transform(@transform:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@transform=_) and (@min-query=_) and (@max-query=_) {
        -webkit-transform+_: @transform;
            -ms-transform+_: @transform;
                transform+_: @transform;
    }

    & when not (@min-query=_), not (@max-query=_) {
        .mixins(
            @query: @min-query, @max-query;
            @transform: @transform;
        );
    }
}


//
//  .translate3d(@x-axis, @y-axis, @z-axis, [@min-query, @max-query]);
//   ------------------------------------------------------
//   x-axis             :  -length-|percentage
//   y-axis             :  -length-|percentage
//   z-axis             :  -length-|percentage

.translate3d(@x-axis:_, @y-axis:_, @z-axis:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@x-axis=_) and not (@x-axis=_) and not (@x-axis=_) and (@minmax=_) {
        -webkit-transform+_: translate3d(@x-axis, @y-axis, @z-axis);
            -ms-transform+_: translate3d(@x-axis, @y-axis, @z-axis);   
                transform+_: translate3d(@x-axis, @y-axis, @z-axis);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @translate3d: @x-axis, @y-axis, @z-axis;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .translate3d(.loop[$1], .loop[$2], .loop[$3]);
    }
}

//
//  Visual appearance properties

//
//  .back(@color, @image, @repeat, @position/backsize, @repeat, @origin, @clip, @attachment, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @color          :  -color-|transparent|initial|inherit
//   @image          :  none|url|initial|inherit
//   @repeat         :  repeat|repeat-x|repeat-y|no-repeat|initial|inherit
//   @position/size  :  center|hpos vpos|xpos ypos|initial|inherit / auto|-length-|cover|contain|initial|inherit

.back(@color:_, @image:_, @pos-size:_, @repeat:_, @origin:_, @clip:_, @attachment:_, @min-query:_, @max-query:_) {
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    @1: if((not (@color=_)); if((isstring(@color)); url('@{color}'); @color));
    @2: if((not (@image=_)); @1 if((isstring(@image)); url('@{image}'); @image); @1);
    @3: if((not (@pos-size=_)); @2 @pos-size; @2);
    @4: if((not (@repeat=_)); @3 @repeat; @3);
    @5: if((not (@origin=_)); @4 @origin; @4);
    @6: if((not (@clip=_)); @5 @clip; @5);
    @args: if((not (@attachment=_)); @6 @attachment; @6);

    & when not (@color=_) and (@minmax=_) {
        background: @args;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @back: @color, @image, @pos-size, @repeat, @origin, @clip, @attachment;
        );
    }
    
    .parse(@args) {

        .loop(@i:7) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .back(.loop[$1], .loop[$2], .loop[$3], .loop[$4], .loop[$5], .loop[$6], .loop[$7]);
    }
}

//
//  .color(@color, @background-color, @border-color, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @color             :  -color-|initial|inherit
//   @background-color  :  -color-|transparent|initial|inherit
//   @border-color      :  -color-|transparent|initial|inherit

.color(@color:_, @back-color:_, @border-color:_, @min-query:_, @max-query:_) {
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@color=_) and (@minmax=_) {
        color: @color;
    }

    & when not (@back-color=_) and (@minmax=_) {
        background-color: @back-color;
    }

    & when not (@border-color=_) and (@minmax=_) {
        border-color: @border-color;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @color: @color, @back-color, @border-color;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .color(.loop[$1], .loop[$2], .loop[$3]);
    }
}

//
//  .gradient(@gradient, @start, @stop1, @stop2, @stop3, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @gradient         :  linear|-angle-|to-top|to-bottom|to-right|to-left|radial|ellipse|circle
//   @start            :  -color- [position]
//   @stops            :  -color- [position]

.gradient(@gradient:_, @start:_, @stop1:_, @stop2:_, @stop3:_, @min-query:_, @max-query:_) {
    
    @mode: if((@gradient=radial) or (@gradient=ellipse) or (@gradient=circle); radial; linear);
    
    @a0: if((@gradient=_) or (@gradient=linear); 180deg; @gradient);
    @a1: if((@a0=to-left);   270deg; @a0);
    @a2: if((@a1=to-bottom); 180deg; @a1);
    @a3: if((@a2=to-right);   90deg; @a2);
    @angle: if((@a3=to-top);   0deg; @a3);
    
    @shape: if((@gradient=radial); circle; ellipse);

    @s1: if(not (@stop1=_); @stop1);
    @s2: if(not (@stop2=_); @s1, @stop2; @s1);
    @stops: if(not (@stop3=_); @s2, @stop3; @s2);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when (iscolor(extract(@gradient, 1))) and (iscolor(extract(@start, 1))) and (@stop1=_) and (@minmax=_) {
        .gradient(linear, @gradient, @start);
    }

    & when not (@gradient=_) and not (@mode=radial) and not (@start=_) and not (@stop1=_) and (@minmax=_) {
        background-image: -webkit-linear-gradient(@angle, @start, @stops);  // Safari 5.1+, Chrome 10+
        background-image:    -moz-linear-gradient(@angle, @start, @stops);  // Firefox 3.6+
        background-image:         linear-gradient(@angle, @start, @stops);  // IE10
    }
    
    & when not (@gradient=_) and (@mode=radial) and not (@start=_) and not (@stop1=_) and (@minmax=_) {
        background-image: -webkit-radial-gradient(center, @shape, @start, @stops);  // Safari 5.1+, Chrome 10+
        background-image:    -moz-radial-gradient(center, @shape, @start, @stops);   // Firefox 3.6+
        background-image:       radial-gradient(@shape at center, @start, @stops);
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @gradient: @gradient, @start, @stop1, @stop2, @stop3;
        );
    }
    
    .parse(@args) {

        .loop(@i:5) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .gradient(.loop[$1], .loop[$2], .loop[$3], .loop[$4], .loop[$5]);
    }
}

//
//  .opacity(@opacity, [@min-query, @max-query])
//   ------------------------------------------------------
//   opacity             :  -number-|initial|inherit

.opacity(@opacity:_, @min-query:_, @max-query:_) {

    & when not (@opacity=_) and (@min-query=_) and (@max-query=_) {
        @filter: @opacity * 100;
        opacity: @opacity;
        filter: ~"alpha(opacity=@{filter})";
    }

    & when not (@min-query=_), not (@max-query=_) {
        .mixins(
            @query: @minmax;
            @opacity: @opacity;
        );
    }
}

//
//  .rounded(@top-left, @top-right, @bottom-right, @bottom-left, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @top-left      :  -length-|initial|inherit
//   @top-right     :  -length-|initial|inherit
//   @bottom-left   :  -length-|initial|inherit
//   @bottom-left   :  -length-|initial|inherit

.rounded(@top-left:_, @top-right:_, @bottom-right:_, @bottom-left:_, @min-query:_, @max-query:_) {

    @borders: if(
                 (@top-left=@top-right) 
             and (@bottom-left=@bottom-right) 
             and (@top-left=@bottom-right); 
                  @top-left;
                  @top-left @top-right @bottom-right @bottom-left
             );
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        -webkit-border-radius: @borders;
           -moz-border-radius: @borders;
                border-radius: @borders;
    }
    
    & when not (@top-left=_) and (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded(@top-left, @top-left, @top-left, @top-left);
    }

    & when (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.top-right(@top-right);
    }

    & when (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.bottom-right(@bottom-right)
    }

    & when (@top-left=_) and (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.bottom-left(@bottom-left)
    }

    & when (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.bottom-right(@bottom-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.top-right(@top-right);
        .rounded.bottom-right(@bottom-right)
    }

    & when not (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.top-right(@top-right)
    }

    & when not (@top-left=_) and (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.bottom-right(@bottom-right)
    }

    & when (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.top-right(@top-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.top-right(@top-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.bottom-right(@bottom-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@minmax=_) {
        .rounded.top-left(@top-left);
        .rounded.top-right(@top-right);
        .rounded.bottom-right(@bottom-right)
    }

    & when (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@minmax=_) {
        .rounded.top-right(@top-right);
        .rounded.bottom-right(@bottom-right);
        .rounded.bottom-left(@bottom-left);
    }

    & when not (@minmax=_) {
        .mixins(            
            @query: @minmax;
            @rounded: @top-left, @top-right, @bottom-right, @bottom-left;
        );
    }
    
    .parse(@args) {

        .loop(@i:4) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .rounded(.loop[$1], .loop[$2], .loop[$3], .loop[$4]);
    }
}

//
//  .shadow(@offset, @color, @alpha[, @inset, @min-query, @max-query]);
//   ------------------------------------------------------
//   @offset     :  none|h-offset v-offset blur|inset|initial|inherit
//   @color      :  -color-|transparent|initial|inherit
//   @alpha      :  none|0-1|-percentage-
//   @inset      :  inner shadow

.shadow(@offset:_, @color:_, @alpha:_, @inset:_, @min-query:_, @max-query:_) {
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@offset=_) and not (@color=_) and (@minmax=_) {
        
        @valpha: if(isnumber(@alpha); if(ispercentage(@alpha); @alpha; @alpha*100%); 100%);
        @rgba: fade(@color, @valpha);
        @vcolor: if(not (@inset=_); @rgba inset; @rgba);

        -webkit-box-shadow: @offset @vcolor;  // Android 2.3+, iOS 4.0.2-4.2
                box-shadow: @offset @vcolor;  // Chrome 6+, Firefox 4+, IE 9+
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @shadow: @offset, @color, @alpha, @inset;
        );
    }
    
    .parse(@args) {

        .loop(@i:4) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .shadow(.loop[$1], .loop[$2], .loop[$3], .loop[$4]);
    }
}

//
//  Blocks

    .center-block (@width: 0, @query: 0) when (@query = 0) {
        width: @width;
        left: (@width / 2) * -1;
        margin-left: 50%;
    }

    .center-inline (@display: inline-block, @query: 0) when (@query = 0) {
        display: @display;
        margin-left: auto;
        margin-right: auto;
        float: none;
    }

    .center-vertical (@height: 0, @query: 0) when (@query = 0) {
        margin-top: (@height / 2) * -1;
        position: absolute;
        top: 50%;
    }

    .center-block (@width: 0, @query: 0) when (@query > 0) {
        @media all and (min-width: @query) {
            .center-block(@width);
        } 
    }

    .center-inline (@display: inline-block, @query: 0) when (@query > 0) {
        @media all and (min-width: @query) {
            .center-inline(@display);
        } 
    }

    .center-vertical (@height: 0, @query: 0) when (@query > 0) {
        @media all and (min-width: @query) {
            .center-vertical(@height);
        } 
    }

    .offset (@padding: 0, @query: 0) when (@query = 0) {
        @offset: 100% * @padding / (100% - @padding);
        margin-left: round(-@offset, 2);
        padding-left: round(@offset, 2);
        padding-right: round(@offset, 2);
       .box-sizing;
    }

    .reset-block (@margin-left: 0, @query: 0) when (@query = 0) {
        margin-left: @margin-left;
        left: auto;
    }

    .reset-vertical (@margin-top: 0, @query: 0) when (@query = 0) {
        margin-top: @margin-top;
        position: relative;
        top: auto;
    }

    .offset (@offset: 0, @query: 0) when (@query > 0) {
        @media all and (min-width: @query) {
            .offset(@offset);
        }
    }

    .reset-block (@margin-left: 0, @query: 0) when (@query > 0) {
        @media all and (min-width: @query) {
            .reset-block(@margin-left);
        } 
    }

    .reset-vertical (@margin-top: 0, @query: 0) when (@query > 0) {
        @media all and (min-width: @query) {
            .reset-vertical(@margin-top);
        } 
    }
//  Lists
    
    .list-style (@var) 
        when (@var = skip) {}

    .list-style (@type: none, @image: none) 
        when not (@type = skip) and (@type = inherit), (@image = inherit)
    {
        list-style: inherit;
    }

    .list-style (@type: none, @image: none) 
        when not (@type = skip) and not (@type = inherit) and (@image = none)
    {
        list-style: @type inside;
    }

    .list-style (@type: none, @image: none) 
        when not (@type = skip) and not (@image = none) and not (@image = inherit)
    {
        list-style: none inside url('@{image}');
    }
//  Pseudo-elements

//
//  .pseudo-container(@display);
//   ------------------------------------------------------

    .pseudo-container (@display: inline-block) {
        display: @display;
        position: relative; 
        overflow: visible;  // overflow ie8/9
    }

    .pseudo (@content: '', @width: auto, @height: auto) {
        display: inline-block;
        content: @content;
        width: @width;
        height: @height;
        vertical-align: middle;
    }

//
//  .placeholder(@property, @value, [@min-query, @max-query]);
//   ------------------------------------------------------

.placeholder(@property:_, @value:_, @min-query:_, @max-query:_)
    when not (@property=_) and not (@value=_) and (@min-query=_) and (@max-query=_)
{
    &::-webkit-input-placeholder {  // Chrome, Safari, Edge
        @{property}: @value;
    }
    &:-ms-input-placeholder {       // IE 10+
        @{property}: @value;
    }
    &::-moz-placeholder {           // Firefox 19+
        @{property}: @value;
    } 
    &::placeholder {
        @{property}: @value;
    } 
}
//  States

    .hover {
        .color (@color: inherit, @back-color: skip) {
            &:hover             { color: @color; .back.color(@back-color); } // added border
        } 

        .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
            &:hover             { .gradient(@start, @stop, @degrees, @image); }
        }
    }

    .active {
        .color (@color: inherit, @back-color: skip) {
            &:active            { color: @color; .back.color(@back-color); } // added border
        }

        .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
            &:active            { .gradient(@start, @stop, @degrees, @image); }
        }
    }

    .focus {
        .color (@color: inherit, @back-color: skip) {
            &:focus             { color: @color; .back.color(@back-color); } // added border
        }

        .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
            &:focus             { .gradient(@start, @stop, @degrees, @image); }
        }
    }

    .visited {
        .color (@color: inherit, @back-color: skip) {
            &:visited           { color: @color; .back.color(@back-color); } // added border
        }

        .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
            &:visited           { .gradient(@start, @stop, @degrees, @image); }
        }
    }

    .hover-focus {
        .color (@color: inherit, @back-color: skip) {
            &:hover,
            &:focus             { color: @color; .back.color(@back-color); } // added border
        }

        .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
            &:hover,
            &:focus             { .gradient(@start, @stop, @degrees, @image); }
        }
    }

    .normal-active {
        .color (@color: inherit, @back-color: skip) {
            &,
            &:active            { color: @color; .back.color(@back-color); } // added border
        }

        .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
            &,
            &:active            { .gradient(@start, @stop, @degrees, @image); }
        }
    }
    
//  Tables

    .table {
        .border      (@var) when (@var = skip) {}
        .border-outer(@var) when (@var = skip) {}
        .color       (@var) when (@var = skip) {}
        .font        (@var) when (@var = skip) {}
        .head-color  (@var) when (@var = skip) {}
        .head-font   (@var) when (@var = skip) {}
        .padding     (@var) when (@var = skip) {}
        .rounded     (@var) when (@var = skip) {}
    }

    .table {
        .border (@width: 0, @style: none, @color: none) when not (@width = skip) {
            & tr th,
            & tr td             { border-width: @width; border-style: @style; border-color: @color; }
        }
        .border-outer (@width: 0, @style: none, @color: none) when not (@width = skip) {
            &                   { border-width: @width; border-style: @style; border-color: @color; }
        }
        .color (@color: inherit, @back: skip, @rows: all) when not (@color = skip) and not (@rows = all) {
            & tr:nth-child(@{rows}) td,
            & tr.@{rows} td     { color: @color; .back.color(@back) }
        }
        .color (@color: inherit, @back: skip, @rows: all) when not (@color = skip) and (@rows = all) {
            & tr td             { color: @color; .back.color(@back); }
        }
        .font (@font: normal 1em, @family: inherit) when not (@font = skip) {
            & tr td             { .font(@font, @family); }
        }
        .head-color (@color: inherit, @back: skip) when not (@color = skip) {
            & tr th             { .color(@color, @back); }
        }
        .head-font (@font: normal 1em, @family: inherit) when not (@font = skip) {
            & tr th             { .font(@font, @family); }
        }
        .padding (@padding: 0) when not (@padding = skip) {
            & tr th,
            & tr td             { padding: @padding; }
        }
        .rounded (@radius: none) when not (@radius = skip) {  
            &                               { .re-rounded(@radius){ .rounded(@radius); }; }  // Double name stack Fix
            & tr:first-child th:first-child { .rounded.left-top(@radius); }
            & tr:first-child th:last-child  { .rounded.right-top(@radius); }
            & tr:last-child  td:first-child { .rounded.left-bottom(@radius); }
            & tr:last-child  td:last-child  { .rounded.right-bottom(@radius); }
        }
    }
//
//  Triangle

//
//  .triangle.top(@width, @height, @color);
//  .triangle.right(@width, @height, @color);
//  .triangle.bottom(@width, @height, @color);
//  .triangle.left(@width, @height, @color);
//  .triangle.top-left(@width, @height, @color);
//  .triangle.top-right(@width, @height, @color);
//  .triangle.bottom-left(@width, @height, @color);
//  .triangle.bottom-right(@width, @height, @color);
//   ------------------------------------------------------
//   width         :  auto|-value-|initial|inherit
//   heigth        :  auto|-value-|initial|inherit

.triangle {
    .base()  {
        .size(0);
        .border(_, solid, transparent);
    }
    .top(@width: 0, @height: 0, @color: transparent) {
        .triangle.base();
        border-width: 0 @width/2 @height @width/2;
        border-bottom-color: @color;
    }

    .bottom(@width: 0, @height: 0, @color: transparent) when (@query = 0) {
        .triangle.base();
        border-width: @height @width/2 0 @width/2;
        border-top-color: @color;
    }
    
    .left(@width: 0, @height: 0, @color: transparent) when (@query = 0) {
        .triangle.base();
        border-width: @height/2 @width @height/2 0;
        border-right-color: @color;
    }
    .right(@width: 0, @height: 0, @color: transparent) when (@query = 0) {
        .triangle.base();
        border-width: @height/2 0 @height/2 @width;
        border-left-color: @color;
    }

    .top-left(@width: 0, @height: 0, @color: transparent) when (@query = 0) {
        .triangle.base();
        border-width: @height @width 0 0;
        border-top-color: @color;
    }

    .top-right(@width: 0, @height: 0, @color: transparent) when (@query = 0) {
        border-width: 0 @width @height 0;
        border-right-color: @color;
    }

    .bottom-left(@width: 0, @height: 0, @color: transparent) when (@query = 0) {
        .triangle.base();
        border-width: @width 0 0 @height;
        border-left-color: @color;
    }
    
    .bottom-right(@width: 0, @height: 0, @color: transparent) when (@query = 0) {
        border-width: 0 0 @height @width;
        border-bottom-color: @color;
    }
}

//  Constants 

    //  Divider escape
    @d                      :   e('/');

    //  Shades of Gray
    @hex0                   :     #000;
    @hex1                   :     #111;
    @hex2                   :     #222;
    @hex3                   :     #333;
    @hex4                   :     #444;
    @hex5                   :     #555;
    @hex6                   :     #666;
    @hex7                   :     #777;
    @hex8                   :     #888;
    @hex9                   :     #999;
    @hexa                   :     #aaa;
    @hexb                   :     #bbb;
    @hexc                   :     #ccc;
    @hexd                   :     #ddd;
    @hexe                   :     #eee;
    @hexef                  :     #f6f6f7;
    @hexf                   :     #fff;

    //  Colors Codes
    @aqua                   :     #0ff;
    @black                  :     #000;
    @blue                   :     #00f;
    @blueViolet             :     #8a2be2;
    @brown                  :     #a52a2a;
    @fuchsia                :     #f0f;
    @gold                   :     #ffd700;
    @green                  :     #008000;
    @gray                   :     #808080;
    @lime                   :     #0f0;
    @maroon                 :     #85144b;
    @navy                   :     #001f3f;
    @olive                  :     #808000;
    @orange                 :     #ffa500;
    @orangeRed              :     #ff4500;
    @pink                   :     #ffc0cb;
    @purple                 :     #800080;
    @red                    :     #f00;
    @silver                 :     #c0c0c0;
    @teal                   :     #008080;
    @trans                  :     transparent;
    @violet                 :     #ee82ee;
    @white                  :     #fff;
    @yellow                 :     #ff0;
    @yellowGreen            :     #9acd32;

    //  Websafe Fonts
    @font-monospace         :   'Menlo, Monaco, Consolas, monospace';
    @font-sans-serif        :   'Helvetica Neue, Helvetica, Arial, sans-serif';
    @font-script            :   'Brush Script MT', 'Comic Sans MS', cursive;
    @font-serif             :   'Georgia, Times New Roman, Times, serif';
//  Easing

    // Back
    @ease-in-back       : cubic-bezier(0.600, -0.280, 0.735, 0.045);
    @ease-out-back      : cubic-bezier(0.175,  0.885, 0.320, 1.275);
    @ease-in-out-back   : cubic-bezier(0.680, -0.550, 0.265, 1.550);

    // Cubic
    @ease-in-cubic      : cubic-bezier(0.550, 0.055, 0.675, 0.190);
    @ease-out-cubic     : cubic-bezier(0.215, 0.610, 0.355, 1.000);
    @ease-in-out-cubic  : cubic-bezier(0.645, 0.045, 0.355, 1.000);

    // Circ
    @ease-in-circ       : cubic-bezier(0.600, 0.040, 0.980, 0.335);
    @ease-out-circ      : cubic-bezier(0.075, 0.820, 0.165, 1.000);
    @ease-in-out-circ   : cubic-bezier(0.785, 0.135, 0.150, 0.860);

    // Expo
    @ease-in-expo       : cubic-bezier(0.950, 0.050, 0.795, 0.035);
    @ease-out-expo      : cubic-bezier(0.190, 1.000, 0.220, 1.000);
    @ease-in-out-expo   : cubic-bezier(1.000, 0.000, 0.000, 1.000);

    // Quad
    @ease-in-quad       : cubic-bezier(0.550, 0.085, 0.680, 0.530);
    @ease-out-quad      : cubic-bezier(0.250, 0.460, 0.450, 0.940);
    @ease-in-out-quad   : cubic-bezier(0.455, 0.030, 0.515, 0.955);

    // Quart
    @ease-in-quart      : cubic-bezier(0.895, 0.030, 0.685, 0.220);
    @ease-out-quart     : cubic-bezier(0.165, 0.840, 0.440, 1.000);
    @ease-in-out-quart  : cubic-bezier(0.770, 0.000, 0.175, 1.000);

    // Quint
    @ease-in-quint      : cubic-bezier(0.755, 0.050, 0.855, 0.060);
    @ease-out-quint     : cubic-bezier(0.230, 1.000, 0.320, 1.000);
    @ease-in-out-quint  : cubic-bezier(0.860, 0.000, 0.070, 1.000);

    // Sine
    @ease-in-sine       : cubic-bezier(0.470, 0.000, 0.745, 0.715);
    @ease-out-sine      : cubic-bezier(0.390, 0.575, 0.565, 1.000);
    @ease-in-out-sine   : cubic-bezier(0.445, 0.050, 0.550, 0.950);
//  Filters

    @svg-grayscale      : "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0'/></filter></svg>#grayscale";

    @svg-grayscale-ie10 : "data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg'><filter id='grayscale'><feColorMatrix type='matrix' values='1 0 0 0 0, 0 1 0 0 0, 0 0 1 0 0, 0 0 0 1 0'/></filter></svg>#grayscale";
//  Helpers

.block() {
    display: block;
    position: relative;
    float: left;
}

.border-box() {
    -webkit-box-sizing: border-box;    // Safari 5
       -moz-box-sizing: border-box;    // Firefox 19
            box-sizing: border-box;    // IE 8+
}

.content-box() {
    -webkit-box-sizing: content-box;    // Safari 5
       -moz-box-sizing: content-box;    // Firefox 19
            box-sizing: content-box;    // IE 8+
}

.clearfix() {
    &:after { 
        content: ''; 
        display: table; 
        clear: both; 
    }
}

.ellipsis() { 
    text-overflow: ellipsis;    // IE8 rendering issue
    white-space: nowrap; 
    overflow: hidden; 
}

.hide-text() { 
    text-indent: -9999px; 
    text-align: left;
    overflow: hidden; 
}

.hyphens() {
    -webkit-hyphens: auto;
        -moz-hyphens: auto;
            hyphens: auto;
}

.inline() {
    display: inline;
    float: none;
}

.inline-block() {
    display: inline-block;
    position: relative;
    float: none;
}

.line-break() {  
    margin-left: 0; 
    clear: left; 
}

.nowrap() {
    white-space: nowrap;
}

.noselect() {
    -webkit-touch-callout: none;
      -webkit-user-select: none;
       -khtml-user-select: none;
         -moz-user-select: none;
          -ms-user-select: none;
              user-select: none;
}

.noselect() {
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;

    -webkit-touch-callout: none;
    -webkit-text-size-adjust: none;
        -ms-text-size-adjust: none;
    -webkit-tap-highlight-color: rgba(0,0,0,0);
}

.text {
    .left() {
        text-align: left;
    }
    .center() {
        text-align: center;
    }
    .right() {
        text-align: right;
    }
    .justify() {
        text-align: justify;
    }
    .caps() {
        text-transform: capitalize;
    }
    .lower() {
        text-transform: lowercase;
    }
    .upper() {
        text-transform: uppercase;
    }
}

.word-break() {
    -ms-word-break: break-all;
        word-break: break-all;
        word-break: break-word;
}

.wrap() {
    white-space: normal; // validate
}

//  Keyframes

    .keyframes-fade-in () {
        ._fade-in () {
            0% {
                opacity: 0;
            }

            100% {
                opacity: 1;
            }
        }

        @-webkit-keyframes fade-in {
            ._fade-in();
        }

        @keyframes fade-in {
            ._fade-in();
        }
    }

    .keyframes-fade-out () {
        ._fade-out () {
            0% {
                opacity: 1;
            }

            100% {
                opacity: 0;
            }
        }

        @-webkit-keyframes fade-out {
            ._fade-out();
        }

        @keyframes fade-out {
            ._fade-out();
        }
    }

    .keyframes-shake () {
        ._shake () {
            0%, 100% {
                .translate (0);
            }

            10%, 30%, 50%, 70%, 90% {
                .translate (-10px);
            }

            20%, 40%, 60%, 80% {
                .translate (10px);
            }
        }

        @-webkit-keyframes shake {
            ._shake();
        }

        @keyframes shake {
            ._shake();
        }
    }

    .keyframes-slide-down () {
        ._slide-down () {
            0% {
                opacity: 0;
                .transform(translateY(-20px) perspective(600px) rotateX(15deg));
            }

            100% {
                opacity: 1;
                .transform(translateY(0) perspective(600px) rotateX(0deg));
            }
        }

        @-webkit-keyframes slide-down {
            ._slide-down();
        }

        @keyframes slide-down {
            ._slide-down();
        }
    }

    .keyframes-slide-up () {
        ._slide-up () {
            0% {
                opacity: 1;
                .transform(translateY(0) perspective(600px) rotateX(0deg));
            }

            100% {
                opacity: 0;
                .transform(translateY(-20px) perspective(600px) rotateX(15deg));
            }
        }

        @-webkit-keyframes slide-up {
            ._slide-up();
        }

        @keyframes slide-up {
            ._slide-up();
        }
    }

    .keyframes-zoom-in () {
        ._zoom-in () {
            0% {
                opacity: 0;
                .scale(.3);
            }

            50% {
                opacity: 1;
            }
        }

        @-webkit-keyframes zoom-in {
            ._zoom-in();
        }

        @keyframes zoom-in {
            ._zoom-in();
        }
    }

    .keyframes-zoom-out () {
        ._zoom-out () {
            0% {
                opacity: 1;
                .scale(1);
            }

            50% {
                opacity: 0;
                .scale(.3);
            }

            100% {
                opacity: 0;
            }
        }
        
        @-webkit-keyframes zoom-out {
            ._zoom-out();
        }

        @keyframes zoom-out {
            ._zoom-out();
        }
    }
