//
//  Transform properties

//
// .backface(@visibility, [@min-width-query, @max-width-query])

.backface(@visibility) 
    when (@visibility=null) {}

.backface(@visibility:_, @min-width-query:_, @max-width-query:_)
    when not (@visibility=null) and (@visibility=_) and (@min-width-query=_) and (@max-width-query=_)
{
    .backface(visible)
}

.backface(@visibility:_, @min-width-query:_, @max-width-query:_)
    when not (@visibility=null) and not (@visibility=_) and (@min-width-query=_) and (@max-width-query=_)
{
    -webkit-backface-visibility: @visibility;
       -moz-backface-visibility: @visibility;
            backface-visibility: @visibility;
}

.backface(@visibility:_, @min-width-query:_, @max-width-query:_)
    when (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (max-width: @max-width-query) {
        .backface(@visibility)
    }
}

.backface(@visibility:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) {
        .backface(@visibility)
    }
}

.backface(@visibility:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
        .backface(@visibility)
    }
}

.perspective (@param) 
    when (@param = null) {}

.perspective (@length) {
    -webkit-perspective: @length;
        -moz-perspective: @length;
            perspective: @length;
}

.resize (@param) 
    when (@param = null) {}

.resize (@direction: none) 
    when not (@direction = null) 
{
    resize: @direction;
    overflow: auto;      // Safari fix
}

.rotate (@param) 
    when (@param = null) {}

.rotate (@degrees: 0deg) 
    when not (@degrees = null) 
{
    -webkit-transform: rotate(@degrees);
        -ms-transform: rotate(@degrees);
            transform: rotate(@degrees);
}

.rotate-x (@param) 
    when (@param = null) {}

.rotate-x (@degrees: 0deg) 
    when not (@degrees = null) 
{
    -webkit-transform: rotate-x(@degrees);
        -ms-transform: rotate-x(@degrees);
            transform: rotate-x(@degrees);
}

.rotate-y (@param) 
    when (@param = null) {}

.rotate-y (@degrees: 0deg) 
    when not (@degrees = null) 
{
    -webkit-transform: rotate-y(@degrees);
        -ms-transform: rotate-y(@degrees);
            transform: rotate-y(@degrees);
}

.scale (@param) 
    when (@param = null) {}

.scale (@factor: 0) 
    when not (@factor = null) 
{
    -webkit-transform: scale(@factor);
        -ms-transform: scale(@factor);
            transform: scale(@factor);
}


.skew (@param) 
    when (@param = null) {}

.skew (@x: 0, @y: 0) 
    when not (@x = null) 
{
    -webkit-transform: skew(@x, @y);
        -moz-transform: skew(@x, @y);
        -ms-transform: skewX(@x) skewY(@y);
            transform: skew(@x, @y);
}

.transform (@param) 
    when (@param = null) {}

.transform (@transform: none) 
    when not (@transform = null) 
{
    -webkit-transform: @transform;
        -moz-transform: @transform;
        -ms-transform: @transform;
            transform: @transform;
}

.translate (@param) 
    when (@param = null) {}

.translate (@x: 0, @y: 0) 
    when not (@x = null) 
{
    -webkit-transform: translate(@x, @y);
        -moz-transform: translate(@x, @y);
        -ms-transform: translate(@x, @y);   
            transform: translate(@x, @y);
}

.translate3d (@param) 
    when (@param = null) {}

.translate3d (@x: 0, @y: 0, @z: 0) 
    when not (@x = null) 
{
    -webkit-transform: translate3d(@x, @y, @z);
        -moz-transform: translate3d(@x, @y, @z);
            transform: translate3d(@x, @y, @z);
}
