//
//  Font mixins

//
// .font(@font, @family, [@min-width, @max-width])
    
.font(@font)
    when (@font=null) {}

.font(@font:_, @family:_, @min-width-query:_, @max-width-query:_) 
    when not (@font=null) and (@font=_) and (@family=_) and (@min-width-query=_) and (@max-width-query=_)
{
    font: normal 1em a;
}

.font(@font:_, @family:_, @min-width-query:_, @max-width-query:_) 
    when not (@font=null) and not (@font=_) and (@family=inherit) and (@min-width-query=_) and (@max-width-query=_)
{
    font: @font a; // inherit is not a valid family value on font shorthand
    font-family: inherit;
}

.font(@font:_, @family:_, @min-width-query:_, @max-width-query:_) 
    when not (@font=null) and (@font=_) and not (@family=_) and not (@family=inherit) and (@min-width-query=_) and (@max-width-query=_)
{
    font-family: @family;
}

.font(@font:_, @family:_, @min-width-query:_, @max-width-query:_) 
    when not (@font=null) and not (@font=_) and not (@family=_) and not (@family=inherit) and (@min-width-query=_) and (@max-width-query=_)
{
    font: @font @family;
}

.font(@font:_, @family:_, @min-width-query:_, @max-width-query:_)
    when (@min-width-query=_) and not (@max-width-query=_) 
{
    @media all and (max-width: @max-width-query) {
        .font(@font, @family);
    }
}

.font(@font:_, @family:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and (@max-width-query=_) 
{
    @media all and (min-width: @min-width-query) {
        .font(@font, @family);
    }
}

.font(@font:_, @family:_, @min-width-query:_, @max-width-query:_) 
    when not (@min-width-query=_) and not (@max-width-query=_) 
{
    @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
        .font(@font, @family);
    }
}

//
// .font-face(@name, @path, @file-name, [@min-width, @max-width])

.font-face (@name) 
    when (@name=null) {}

.font-face (@name: a, @path: '/', @file-name:_) 
    when not (@name=null) 
{
    @font-face {
        font-family: @name;
        src: url('@{path}.eot');    // IE9
        src: url('@{path}.eot?#iefix') format('embedded-opentype'),     
                url("@{path}.woff") format("woff"),
                url("@{path}.ttf") format("truetype"),
                url('@{path}.svg#@{name}') format('svg');
    }
}

.font-size (@param) 
    when (@param=null) {}

.font-size (@size: 1em, @query: 0) 
    when not (@size=null) and (@query=0) 
{
    font-size: @size;
}

.font-size (@font: none, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .font-size(@font);
    } 
}

.indent (@param) 
    when (@param=null) {}

.indent (@indent: 0, @query: 0) 
    when not (@indent=null) and (@query=0) 
{
    text-indent: @indent;
}

.indent (@indent: 0, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .indent(@indent);
    }
}

.text-align (@param) 
    when (@param=null) {}

.text-align (@align: center, @query: 0) 
    when not (@align=null) and (@query=0) 
{
    text-align: @align;
}

.text-align (@align: center, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .text-align(@align);
    }
}

//
// text-shadow(spread, color, alpha, [min-width-query])

.text-shadow (@param) 
    when (@param=null) {}

.text-shadow (@spread: 0 0, @color: #fff, @alpha: .5, @query: 0) 
    when not (@spread=null) and (@query=0) {
        
    text-shadow: @spread hsla(hue(@color), saturation(@color), lightness(@color), @alpha); 
}

.text-shadow (@spread: 0 0, @color: #fff, @alpha: .5, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .text-shadow(@shadow, @color, @alpha);
    }
}