//
//  Font properties
//

//  .mixins(
//      @min-max: min-width, max-width; 
//      @font: font-style, font-weight, font-size, font-family;
//      @text: text-align, text-indent, text-transform;
//      @tdecoration: spread, color, alpha;
//      @tshadow: spread, color, alpha;
//  );

//
//  .font(font-style, font-weight, font-size, font-family);
//   ------------------------------------------------------
//   font-style   |  normal/italic/oblique/initial/inherit
//   font-weight  |  normal/bold/bolder/lighter/number/initial/inherit  300/400/700
//   font-family  |  family-name|initial|inherit

.font(@size:_, @weight:_, @family:_, @min-width:_, @max-width:_) {

    @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

    & when (@size=null) {}

    & when not (@size=null) and not (@size=_) and not (@weight=_) and not (@family=_) and (@query=_) {
        font: @weight @size @family;
    }

    & when not (@size=null) and not (@size=_) and (@weight=_) and not (@family=_) and (@query=_) {
        font: @size @family;
    }

    & when not (@size=null) and not (@size=_) and not (@weight=_) and (@family=_) and (@query=_) {
        font-size: @size;
        font-weight: @weight;
    }

    & when not (@size=null) and (@size=_) and not (@weight=_) and not (@family=_) and (@query=_) {
        font-weight: @weight;
        font-family: @family;
    }

    & when not (@size=null) and not (@size=_) and (@weight=_) and (@family=_) and (@query=_) {
        font-size: @size;
    }

    & when not (@size=null) and (@size=_) and not (@weight=_) and (@family=_) and (@query=_) {
        font-weight: @weight;
    }

    & when not (@size=null) and (@size=_) and (@weight=_) and not (@family=_) and (@query=_) {
        font-family: @family;
    }

    & when not (@query=_) {
        .mixins(
            @min-max: @query;
            @font: @size, @weight, @family;
        );
    }
}
    
//
//  .font-face(font-family, file-path, font-weight, font-style);
//   ------------------------------------------------------
//   font-family  |  font family name : Arial
//   file-path    |  absolute/relative file path : '../fonts/Arial-Regular'
//   font-weight  |  light/normal/bold/inherit  300/400/700
//   font-style   |  italic/normal/inherit

.font-face(@font-family:_, @font-path:_, @font-weight:400, @font-style:normal) {

    & when not (@font-family=_) and not (@font-path=_) {
        @font-face {
            font-family: @font-family;
            src: url('@{font-path}.eot');  // IE9
            src: url('@{font-path}.eot?#iefix') format('embedded-opentype'),     
                url('@{font-path}.woff') format('woff'),
                url('@{font-path}.ttf') format('truetype'),
                url('@{font-path}.svg#@{@font-family}') format('svg');
            font-weight: @font-weight;
            font-style: @font-style;
        }
    }
}

//
//  .text(text-align, text-indent, text-transform);
//   ------------------------------------------------------
//   text-align      |  left/right/center/justify/initial/inherit
//   text-indent     |  length/initial/inherit
//   text-transform  |  none/capitalize/uppercase/lowercase/initial/inherit

.text(@align:_, @indent:_, @transform:_, @min-width:_, @max-width:_) {

    @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

    & when (@align=null) {}

    & when not (@align=null) and not (@align=_) and (@query=_) {
        text-align: @align;
    }

    & when not (@align=null) and not (@indent=_) and (@query=_) {
        text-indent: @indent;
    }

    & when not (@align=null) and not (@transform=_) and (@query=_) {
        text-transform: @transform;
    }

    & when not (@query=_) {
        .mixins(
            @min-max: @query;
            @text: @indent, @align, @transform;
        );
    }
}

//
// .text.decoration(@line, @color, @style, [@min-width-query, @max-width-query])
// .text-shadow(@spread, @color, @alpha, [@min-width-query, @max-width-query])

.text {

    .decoration(@line:_, @color:_, @style:_, @min-width:_, @max-width:_) {

        @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

        & when (@line=null) {}

        & when not (@line=null) and not (@line=_) and not (@color=_) and not (@style=_) and (@query=_) {
            text-decoration: @line @color @style
        }
        & when not (@line=null) and not (@line=_) and not (@color=_) and (@style=_) and (@query=_) {
            text-decoration: @line @color
        }

        & when not (@line=null) and not (@line=_) and (@color=_) and not (@style=_) and (@query=_) {
            text-decoration: @line @style
        }

        & when not (@line=null) and (@line=_) and not (@color=_) and not (@style=_) and (@query=_) {
            text-decoration-color: @color;  // IE not supported
            text-decoration-style: @style;  // IE not supported
        }

        & when not (@line=null) and not (@line=_) and (@color=_) and (@style=_) and (@query=_) {
            text-decoration-line: @line
        }

        & when not (@line=null) and (@line=_) and not (@color=_) and (@style=_) and (@query=_) {
            text-decoration-color: @color  // IE not supported
        }

        & when not (@line=null) and (@line=_) and (@color=_) and not (@style=_) and (@query=_) {
            text-decoration-style: @style  // IE not supported
        }

        & when not (@query=_) {
            .mixins(
                @min-max: @query;
                @textdeco: @size, @weight, @family;
            );
        }
    }
    
    .shadow(@spread:_, @color:_, @alpha:_, @min-width:_, @max-width:_) {

        @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

        & when (@spread=null) {}
        
        & when not (@spread=null) and not (@spread=_) and not (@color=_) and not (@alpha=_) and (@query=_) {        
            @alphaisp: if(ispercentage(@alpha), @alpha/1, @alpha);
            @rgba: fade(@color, @alphaisp);
            text-shadow: @spread @rgba;
        }
        
        & when not (@spread=null) and not (@spread=_) and (@color=_) and (@alpha=_) and (@query=_) {        
            text-shadow: @spread black;
        }
        
        & when not (@spread=null) and (@spread=_) and not (@color=_) and (@alpha=_) and (@query=_) {        
            text-shadow: 0 0 @color;
        }
        
        & when not (@spread=null) and (@spread=_) and (@color=_) and not (@alpha=_) and (@query=_) {        
            .text.shadow(0 0, black, @alpha)
        }
        
        & when not (@spread=null) and not (@spread=_) and not (@color=_) and (@alpha=_) and (@query=_) {        
            text-shadow: @spread @color;
        }
        
        & when not (@spread=null) and (@spread=_) and not (@color=_) and not (@alpha=_) and (@query=_) {
            .text.shadow(0 0, @color, @alpha)
        }
        
        & when not (@spread=null) and not (@spread=_) and (@color=_) and not (@alpha=_) and (@query=_) {        
            .text.shadow(@spread, black, @alpha)
        }

        & when not (@query=_) {
            .mixins(
                @min-max: @query;
                @tshadow: @spread, @color, @alpha;
            );
        }
    }
}
