//
//  Font properties

//
//  .font(@style, @weight, @size, @family, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @style    :  normal|italic|oblique|initial|inherit
//   @weight   :  normal|bold|bolder|lighter|-number-|initial|inherit
//   @family   :  family-name|initial|inherit

.font(@size:_, @weight:_, @family:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@size=_) and not (@weight=_) and not (@family=_) and (@minmax=_) {
        font: @weight @size @family;
    }

    & when not (@size=_) and (@weight=_) and not (@family=_) and (@minmax=_) {
        font: @size @family;
    }

    & when not (@size=_) and not (@weight=_) and (@family=_) and (@minmax=_) {
        font-size: @size;
        font-weight: @weight;
    }

    & when (@size=_) and not (@weight=_) and not (@family=_) and (@minmax=_) {
        font-weight: @weight;
        font-family: @family;
    }

    & when not (@size=_) and (@weight=_) and (@family=_) and (@minmax=_) {
        font-size: @size;
    }

    & when (@size=_) and not (@weight=_) and (@family=_) and (@minmax=_) {
        font-weight: @weight;
    }

    & when (@size=_) and (@weight=_) and not (@family=_) and (@minmax=_) {
        font-family: @family;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @font: @size, @weight, @family;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .font(.loop[$1], .loop[$2], .loop[$3]);
    }
}

//
//  .font-face(@family, @path, @weight, @style, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @family  :  font-family name
//   @path    :  absolute/relative file path
//   @weight  :  normal|bold|bolder|lighter|-number-|initial|inherit;
//   @style   :  italic|normal|inherit

.fontface(@family:_, @path:_, @weight:_, @style:_, @min-query:_, @max-query:_) {

    @vweight: if(@weight=_; 400; @weight);
    @vstyle:  if(@style=_; normal; @style);

    & when not (@family=_) and not (@path=_) {
        @font-face {
            font-family: @family;
            src: url('@{path}.eot');  // IE9
            src: url('@{path}.eot?#iefix') format('embedded-opentype'),     
                 url('@{path}.woff') format('woff'),
                 url('@{path}.ttf') format('truetype'),
                 url('@{path}.svg#@{@family}') format('svg');
            font-weight: @vweight;
            font-style: @vstyle;
        }
    }

    & when not (@min-query=_), not (@max-query=_) {
        .mixins(
            @query: @min-query, @max-query;
            @paragraph: @family, @path, @weight, @style;
        );
    }
    
    .parse(@args) {

        .loop(@i:4) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .fontface(.loop[$1], .loop[$2], .loop[$3], .loop[$4]);
    }
}

//
//  .paragraph(@align, @indent, @transform, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @align      :  left|right|center|justify|initial|inherit
//   @indent     :  -length-|initial|inherit
//   @transform  :  none|capitalize|uppercase|lowercase|initial|inherit

.paragraph(@align:_, @indent:_, @transform:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@align=_) and (@minmax=_) {
        text-align: @align;
    }

    & when not (@indent=_) and (@minmax=_) {
        text-indent: @indent;
    }

    & when not (@transform=_) and (@minmax=_) {
        text-transform: @transform;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @paragraph: @indent, @align, @transform;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .paragraph(.loop[$1], .loop[$2], .loop[$3]);
    }
}

//
// .textdecoration(@line, @color, @style, [@min-query, @max-query])
//   ------------------------------------------------------
//   @line      :  none|underline|overline|line-through|initial|inherit
//   @color     :  -color-|initial|inherit
//   @style     :  solid|double|dotted|dashed|wavy|initial|inherit;

.textdecoration(@line:_, @color:_, @style:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@line=_) and not (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration: @line @color @style
    }
    & when not (@line=_) and not (@color=_) and (@style=_) and (@minmax=_) {
        text-decoration: @line @color
    }

    & when not (@line=_) and (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration: @line @style
    }

    & when (@line=_) and not (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration-color: @color;  // IE not supported
        text-decoration-style: @style;  // IE not supported
    }

    & when not (@line=_) and (@color=_) and (@style=_) and (@minmax=_) {
        text-decoration-line: @line
    }

    & when (@line=_) and not (@color=_) and (@style=_) and (@minmax=_) {
        text-decoration-color: @color  // IE not supported
    }

    & when (@line=_) and (@color=_) and not (@style=_) and (@minmax=_) {
        text-decoration-style: @style  // IE not supported
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @textdecoration: @size, @weight, @family;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .textdecoration(.loop[$1], .loop[$2], .loop[$3]);
    }
}
    
//
//  .text-shadow(@spread, @color, @alpha, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @spread    :  h-shadow v-shadow [blur-radius]
//   @color     :  -color-|initial|inherit

.textshadow(@spread:_, @color:_, @alpha:100%, @min-query:_, @max-query:_) {

    @percentage: if(ispercentage(@alpha); @alpha; @alpha*100%);
    @rgba: fade(@color, @percentage);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
    
    & when not (@spread=_) and not (@color=_) and (@minmax=_) {
        text-shadow: @spread @rgba;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @textshadow: @spread, @color, @alpha;
        );
    }
    
    .parse(@args) {

        .loop(@i:3) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .textshadow(.loop[$1], .loop[$2], .loop[$3]);
    }
}
