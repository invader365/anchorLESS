//
//  Border mixins

//
//  .border(width, style, color, [min-width, max-width])
//   ------------------------------------------------------
//   width     |  medium/thin/thick/-length-/initial/inherit
//   style     |  none/hidden/dotted/dashed/solid/double/groove/ridge/inset/outset/initial/inherit
//   color     |  color|transparent|initial|inherit

.border(@width:_, @style:_, @color:_, @min-width:_, @max-width:_) {

    @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

    & when not (@width=_) and not (@style=_) and not (@color=_) and (@query=_) {
        border: @width @style @color;
    }

    & when not (@width=_) and not (@style=_) and (@color=_) and (@query=_) {
        border: @width @style;
    }

    & when (@width=_) and not (@style=_) and not (@color=_) and (@query=_) {
        border: @style @color;
    }

    & when (@width=_) and not (@style=_) and (@color=_) and (@query=_) {
        border: @style;
    }

    & when not (@width=_) and (@style=_) and (@color=_) and (@query=_) {
        border-width: @width;
    }

    & when not (@width=_) and (@style=_) and not (@color=_) and (@query=_) {
        border-width: @width;
        border-color: @color;
    }

    & when not (@query=_) {
        .mixins(
            @query; 
            @border: @width, @style, @color;
        );
    }
}

//
//  .rounded.top-left(@radius, [@min-width, @max-width])
//  .rounded.top-right(@radius, [@min-width, @max-width])
//  .rounded.bottom-right(@radius, [@min-width, @max-width])
//  .rounded.bottom-left(@radius, [@min-width, @max-width])
//   ------------------------------------------------------
//   radius     |  -length [length]-/initial/inherit

.rounded {
    .top-left(@radius:_, @min-width:_, @max-width:_) {
    
        @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

        & when not (@radius=_) and (@query=_) {
            -webkit-border-top-left-radius: @radius;
                -moz-border-radius-topleft: @radius;
                    border-top-left-radius: @radius;
        }

        & when not (@query=_) {
            .mixins(
                @query; 
                @top-left: @radius;
            );
        }
    }

    .top-right(@radius:_, @min-width:_, @max-width:_) {
    
        @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);
        
        & when not (@radius=_) and (@query=_) {
            -webkit-border-top-right-radius: @radius;
                -moz-border-radius-topright: @radius;
                    border-top-right-radius: @radius;
        }

        & when not (@query=_) {
            .mixins(
                @query; 
                @top-right: @radius;
            );
        }
    }

    .bottom-right (@radius:_, @min-width:_, @max-width:_) {
    
        @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);
        
        & when not (@radius=_) and (@query=_) {
            -webkit-border-bottom-right-radius: @radius;
                -moz-border-radius-bottomright: @radius;
                    border-bottom-right-radius: @radius;
        }

        & when not (@query=_) {
            .mixins(
                @query; 
                @bottom-right: @radius;
            );
        }
    }

    .bottom-left (@radius:_, @min-width:_, @max-width:_) {
    
        @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);
        
        & when not (@radius=_) and (@query=_) {
            -webkit-border-bottom-left-radius: @radius;
                -moz-border-radius-bottomleft: @radius;
                    border-bottom-left-radius: @radius;
        }

        & when not (@query=_) {
            .mixins(
                @query; 
                @bottom-left: @radius;
            );
        }
    }
}

//
//  .rounded(top-left, top-right, bottom-right, bottom-left, [min-width, max-width])
//   ------------------------------------------------------
//   borders     |  -length-/initial/inherit

.rounded(@top-left:_, @top-right:_, @bottom-right:_, @bottom-left:_, @min-width:_, @max-width:_) {

    @borders: if(
                 (@top-left=@top-right) 
             and (@bottom-left=@bottom-right) 
             and (@top-left=@bottom-right); 
                  @top-left;
                  @top-left @top-right @bottom-right @bottom-left
             );
    
    @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

    & when not (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@query=_) {
        -webkit-border-radius: @borders;
           -moz-border-radius: @borders;
                border-radius: @borders;
    }
    
    & when not (@top-left=_) and (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) and (@query=_) {
        .rounded(@top-left, @top-left, @top-left, @top-left);
    }

    & when (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) and (@query=_) {
        .rounded.top-right(@top-right);
    }

    & when (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@query=_) {
        .rounded.bottom-right(@bottom-right)
    }

    & when (@top-left=_) and (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@query=_) {
        .rounded.bottom-left(@bottom-left)
    }

    & when (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@query=_) {
        .rounded.bottom-right(@bottom-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@query=_) {
        .rounded.top-right(@top-right);
        .rounded.bottom-right(@bottom-right)
    }

    & when not (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) and (@query=_) {
        .rounded.top-left(@top-left);
        .rounded.top-right(@top-right)
    }

    & when not (@top-left=_) and (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@query=_) {
        .rounded.top-left(@top-left);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@query=_) {
        .rounded.top-left(@top-left);
        .rounded.bottom-right(@bottom-right)
    }

    & when (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@query=_) {
        .rounded.top-right(@top-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) and (@query=_) {
        .rounded.top-left(@top-left);
        .rounded.top-right(@top-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@query=_) {
        .rounded.top-left(@top-left);
        .rounded.bottom-right(@bottom-right);
        .rounded.bottom-left(@bottom-left)
    }

    & when not (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) and (@query=_) {
        .rounded.top-left(@top-left);
        .rounded.top-right(@top-right);
        .rounded.bottom-right(@bottom-right)
    }

    & when (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) and (@query=_) {
        .rounded.top-right(@top-right);
        .rounded.bottom-right(@bottom-right);
        .rounded.bottom-left(@bottom-left);
    }

    & when not (@query=_) {
        .mixins(
            @query; 
            @rounded: @top-left, @top-right, @bottom-right, @bottom-left;
        );
    }
}
