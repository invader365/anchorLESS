//
//  Visual appearance properties

//
//  .background(@color, @image, @repeat, @position/backsize, @repeat, @origin, @clip, @attachment);
//   ------------------------------------------------------
//   @color          :  -color-|transparent|initial|inherit
//   @image          :  none|url|initial|inherit
//   @repeat         :  repeat|repeat-x|repeat-y|no-repeat|initial|inherit
//   @position/ size :  center|hpos vpos|xpos ypos|initial|inherit/ auto|-length-|cover|contain|initial|inherit

.background(@color:_, @image:_, @position:_, @repeat:_, @origin:_, @clip:_, @attachment:_) {

    @1: if((not (@color=_)); if((isstring(@color)); url('@{color}'); @color));
    @2: if((not (@image=_)); @1 if((isstring(@image)); url('@{image}'); @image); @1);
    @3: if((not (@position=_)); @2 @position; @2);
    @4: if((not (@repeat=_)); @3 @repeat; @3);
    @5: if((not (@origin=_)); @4 @origin; @4);
    @6: if((not (@clip=_)); @5 @clip; @5);
    @args: if((not (@attachment=_)); @6 @attachment; @6);

    & when not (@color=_) {
        background: @args;
    }
}

//
//  .color(@text, @background, @border);
//   ------------------------------------------------------
//   @text              :  -color-|initial|inherit
//   @background        :  -color-|transparent|initial|inherit
//   @border            :  -color-|transparent|initial|inherit

.color(@text:_, @background:_, @border:_) {

    & when not (@text=_) {
        color: @text;
    }

    & when not (@background=_) {
        background-color: @background;
    }

    & when not (@border=_) {
        border-color: @border;
    }
}

//
//  .gradient(@direction, @start, @stop1[, @stop2, @stop3, @min-query, @max-query]);
//   ------------------------------------------------------
//   @direction         :  linear|-angle-|to-top|to-bottom|to-right|to-left|radial|ellipse|circle
//   @start            :  -color- [position]
//   @stops            :  -color- [position]

.gradient(@direction:_, @start:_, @stop1:_, @stop2:_, @stop3:_) {
    
    @mode: if((@direction=radial) or (@direction=ellipse) or (@direction=circle); radial; linear);
    
    @a0: if((@direction=_) or (@direction=linear); 180deg; @direction);
    @a1: if((@a0=to-left);   270deg; @a0);
    @a2: if((@a1=to-bottom); 180deg; @a1);
    @a3: if((@a2=to-right);   90deg; @a2);
    @angle: if((@a3=to-top);   0deg; @a3);
    
    @shape: if((@direction=radial); circle; ellipse);

    @s1: if(not (@stop1=_); @stop1);
    @s2: if(not (@stop2=_); @s1, @stop2; @s1);
    @stops: if(not (@stop3=_); @s2, @stop3; @s2);

    & when (iscolor(extract(@direction, 1))) and (iscolor(extract(@start, 1))) and (@stop1=_) {
        .gradient(linear, @direction, @start);
    }

    & when not (@direction=_) and not (@mode=radial) and not (@start=_) and not (@stop1=_) {
        background-image: -webkit-linear-gradient(@angle, @start, @stops);  // Safari 5.1+, Chrome 10+
        background-image:    -moz-linear-gradient(@angle, @start, @stops);  // Firefox 3.6+
        background-image:         linear-gradient(@angle, @start, @stops);  // IE10
    }
    
    & when not (@direction=_) and (@mode=radial) and not (@start=_) and not (@stop1=_) {
        background-image: -webkit-radial-gradient(center, @shape, @start, @stops);  // Safari 5.1+, Chrome 10+
        background-image:    -moz-radial-gradient(center, @shape, @start, @stops);   // Firefox 3.6+
        background-image:       radial-gradient(@shape at center, @start, @stops);
    }
}

//
//  .opacity(@level)
//   ------------------------------------------------------
//   opacity             :  -number-|initial|inherit

.opacity(@level:_) {

    & when not (@level=_) {
        @filter: @level * 100;
        opacity: @level;
        filter: ~"alpha(opacity=@{filter})";
    }
}

//
//  .rounded(@top-left, @top-right, @bottom-right, @bottom-left);
//   ------------------------------------------------------
//   @top-left      :  -length-|initial|inherit
//   @top-right     :  -length-|initial|inherit
//   @bottom-left   :  -length-|initial|inherit
//   @bottom-left   :  -length-|initial|inherit

.rounded(@top-left:_, @top-right:_, @bottom-right:_, @bottom-left:_) {

    @borders: if(
                 (@top-left=@top-right) 
             and (@bottom-left=@bottom-right) 
             and (@top-left=@bottom-right); 
                  @top-left;
                  @top-left @top-right @bottom-right @bottom-left
             );

    & when not (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) {
        border-radius: @borders;
    }
    
    & when not (@top-left=_) and (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) {
        .rounded(@top-left, @top-left, @top-left, @top-left);
    }

    & when (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) {
        border-top-right-radius: @radius;
    }

    & when (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) {
        border-bottom-right-radius: @radius;
    }

    & when (@top-left=_) and (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) {
        border-bottom-left-radius: @radius;
    }

    & when (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) {
        border-bottom-right-radius: @radius;
        border-bottom-left-radius: @radius;
    }

    & when (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) {
        border-top-right-radius: @radius;
        border-bottom-right-radius: @radius;
    }

    & when not (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and (@bottom-left=_) {
        border-top-left-radius: @radius;
        border-top-right-radius: @radius;
    }

    & when not (@top-left=_) and (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) {
        border-top-left-radius: @radius;
        border-bottom-left-radius: @radius;
    }

    & when not (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) {
        border-top-left-radius: @radius;
        border-bottom-right-radius: @radius;
    }

    & when (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) {
        border-top-right-radius: @radius;
        border-bottom-left-radius: @radius;
    }

    & when not (@top-left=_) and not (@top-right=_) and (@bottom-right=_) and not (@bottom-left=_) {
        border-top-left-radius: @radius;
        border-top-right-radius: @radius;
        border-bottom-left-radius: @radius;
    }

    & when not (@top-left=_) and (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) {
        border-top-left-radius: @radius;
        border-bottom-right-radius: @radius;
        border-bottom-left-radius: @radius;
    }

    & when not (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and (@bottom-left=_) {
        border-top-left-radius: @radius;
        border-top-right-radius: @radius;
        border-bottom-right-radius: @radius;
    }

    & when (@top-left=_) and not (@top-right=_) and not (@bottom-right=_) and not (@bottom-left=_) {
        border-top-right-radius: @radius;
        border-bottom-right-radius: @radius;
        border-bottom-left-radius: @radius;
    }
}

//
//  .shadow(@offset, @color[, @alpha, @inset, @min-query, @max-query]);
//   ------------------------------------------------------
//   @offset     :  none|h-offset v-offset blur|inset|initial|inherit
//   @color      :  -color-|transparent|initial|inherit
//   @alpha      :  none|0-1|-percentage-
//   @inset      :  inner shadow

.shadow(@offset:_, @color:_, @alpha:_, @inset:_) {

    & when not (@offset=_) and not (@color=_) {
        
        @valpha: if(isnumber(@alpha); if(ispercentage(@alpha); @alpha; @alpha*100%); 100%);
        @rgba: fade(@color, @valpha);
        @vcolor: if(not (@inset=_); @rgba inset; @rgba);

        -webkit-box-shadow: @offset @vcolor;  // Android 2.3+, iOS 4.0.2-4.2
                box-shadow: @offset @vcolor;  // Chrome 6+, Firefox 4+, IE 9+
    }
}
