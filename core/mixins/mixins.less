//
//  Anchor mixins

.mixins(@query:_; @after:_; @align:_; @animation:_; @backface:_; @background:_; @blur:_; @border:_; @brightness:_; @center:_; @center-h:_; @center-v:_; @color:_; @contrast:_; 
    @custom:_; @display:_; @drop-shadow:_; @filter:_; @first-letter:_; @first-line:_; @float:_; @font:_; @fontface:_; @gradient:_; @grayscale:_; @huerotate:_; @invert:_; @list-style:_; @minmax-size:_; 
    @opacity:_; @origin:_; @overflow:_; @paragraph:_; @perspective:_; @placeholder:_; @position:_; @pseudo:_; @resize:_; @rotate3d:_; @rounded:_; @saturate:_; @scale3d:_; @sepia:_; @selection:_; @shadow:_; 
    @size:_; @skew:_; @spacing:_; @text-decoration:_; @text-shadow:_; @transform:_; @transition:_; @translate3d:_; @triangle:_; @url:_; @zindex:_;) {

    @min: extract(@query, 1);
    @max: extract(@query, 2);

    & when (@query=_) {
        .return-mixins(@after; @align; @animation; @backface; @background; @before; @blur; @border; @brightness; @center; @center-h; @center-v; @color; @contrast; @custom; @display; @drop-shadow; 
            @filter; @first-letter; @first-line; @float; @font; @fontface; @gradient; @grayscale; @huerotate; @invert; @list-style; @minmax-size; @opacity; @origin; @overflow; @paragraph; @perspective; 
            @placeholder; @position; @pseudo; @resize; @rotate3d; @rounded; @saturate; @scale3d; @selection; @sepia; @shadow; @size; @skew; @spacing; @transition; @translate3d; 
            @text-decoration; @text-shadow; @transform; @triangle; @url; @zindex;);
    }

    & when not (@query=_) {
        @minW:   if((@min=_); ''; 'and (minWidth: @{min}) ');
        @min-max: if((@max=_); ~'@{minW}'; ~'@{minW}and (max-width: @{max})');

        @media all @min-max {
            .return-mixins(@after; @align; @animation; @backface; @background; @before; @blur; @border; @brightness; @center; @center-h; @center-v; @color; @contrast; @custom; @display; @drop-shadow; 
                @filter; @first-letter; @first-line; @float; @font; @fontface; @gradient; @grayscale; @huerotate; @invert; @list-style; @minmax-size; @opacity; @origin; @overflow; @paragraph; @perspective; 
                @placeholder; @position; @pseudo; @resize; @rotate3d; @rounded; @saturate; @scale3d; @selection; @sepia; @shadow; @size; @skew; @spacing; @transition; @translate3d; 
                @text-decoration; @text-shadow; @transform; @triangle; @url; @zindex;);
        }
    }
}

.return-mixins(@after; @align; @animation; @backface; @background; @before; @blur; @border; @brightness; @center; @center-h; @center-v; @color; @contrast; @custom; @display; @drop-shadow; 
    @filter; @first-letter; @first-line; @float; @font; @fontface; @gradient; @grayscale; @huerotate; @invert; @list-style; @minmax-size; @opacity; @origin; @overflow; @paragraph; @perspective; 
    @placeholder; @position; @pseudo; @resize; @rotate3d; @rounded; @saturate; @scale3d; @selection; @sepia; @shadow; @size; @skew; @spacing; @transition; @translate3d; 
    @text-decoration; @text-shadow; @transform; @triangle; @url; @zindex;) {
            
    // Box-model
        & when not (@display=_) {
            .parse(@display);
            & when (length(@display)=2) { .display(.loop[1], .loop[2]); }
            & when (length(@display)>2) { .display(.loop[1], .loop[2], .loop[3], .loop[4]); }
        }
        & when not (@size=_) {
            .parse(@size);
            .size(.loop[1], .loop[2]);
        }
        & when not (@minmax-size=_) { 
            .parse(@minmax-size);
            .minmax-size(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@spacing=_) { 
            .parse(@spacing);
            .spacing(.loop[1], .loop[2]);
        }
        & when not (@border=_) {
            .parse(@border);
            .border(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@overflow=_) {
            .parse(@overflow);
            .overflow(.loop[1], .loop[2]);
        }
            
    // Layout
        & when not (@position=_) { 
            .parse(@position);
            & when (length(@position)=2) { .position(.loop[1], .loop[2]); }
            & when (length(@position)>2) { .position(.loop[1], .loop[2], .loop[3], .loop[4], .loop[5]); }
        }
        & when not (@align=_) { 
            .parse(@align);
            .align(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@float=_) { 
            .float(@float); 
        }
        & when not (@list-style=_) { 
            .list-style(@list-style); 
        }
        & when not (@zindex=_) { 
            .zindex(@zindex); 
        }

    // Visual
        & when not (@color=_) { 
            .parse(@color);
            .color(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@background=_) { 
            .parse(@background);
            .background(.loop[1], .loop[2], .loop[3], .loop[4], .loop[5], .loop[6], .loop[7]);
        }
        & when not (@gradient=_) { 
            .parse(@gradient);
            .gradient(.loop[1], .loop[2], .loop[3], .loop[4], .loop[5]);
        }
        & when not (@rounded=_) {
            .parse(@rounded);
            .rounded(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@shadow=_) {
            .parse(@shadow);
            .shadow(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@opacity=_) { 
            .opacity(@opacity); 
        }
            
    // Typographic
        & when not (@font=_) { 
            .parse(@font);
            .font(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@fontface=_) { 
            .parse(@fontface); 
            .fontface(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@paragraph=_) { 
            .parse(@paragraph); 
            .paragraph(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@text-decoration=_) { 
            .parse(@text-decoration); 
            .text-decoration(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@text-shadow=_) { 
            .parse(@text-shadow); 
            .text-shadow(.loop[1], .loop[2], .loop[3]);
        }

    // Transform
        & when not (@transform=_) {
            .transform(@transform); 
        }
        & when not (@perspective=_) { 
            .perspective(@perspective); 
        }
        & when not (@rotate3d=_) { 
            .parse(@rotate3d); 
            .rotate3d(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@scale3d=_) { 
            .parse(@scale3d); 
            .scale3d(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@skew=_) { 
            .parse(@skew); 
            .skew(.loop[1], .loop[2]);
        }
        & when not (@translate3d=_) { 
            .parse(@translate3d); 
            .translate3d(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@backface=_) { 
            .backface(@backface); 
        }
        & when not (@origin=_) { 
            .parse(@origin); 
            .origin(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@resize=_) { 
            .resize(@resize); 
        }

    // Filters
        & when not (@filter=_) { 
            .filter(@filter); 
        }
        & when not (@blur=_) { 
            .blur(@blur); 
        }
        & when not (@brightness=_) { 
            .brightness(@brightness); 
        }
        & when not (@contrast=_) { 
            .contrast(@contrast); 
        }
        & when not (@drop-shadow=_) { 
            .parse(@drop-shadow); 
            .drop-shadow(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@grayscale=_) { 
            .grayscale(@grayscale); 
        }
        & when not (@huerotate=_) { 
            .huerotate(@huerotate); 
        }
        & when not (@invert=_) { 
            .invert(@invert); 
        }
        & when not (@saturate=_) { 
            .saturate(@saturate); 
        }
        & when not (@sepia=_) { 
            .sepia(@sepia); 
        }
        & when not (@url=_) { 
            .url(@url); 
        }

    // Animation
        & when not (@animation=_) { 
            .parse(@animation);
            .animation(.loop[1], .loop[2], .loop[3], .loop[4], .loop[5], .loop[6], .loop[7], .loop[8]);
        }
        & when not (@transition=_) { 
            .parse(@transition);
            .transition(.loop[1], .loop[2], .loop[3], .loop[4]);
        }

    // Helpers
        & when not (@after=_) { 
            .parse(@after);
            .after(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@before=_) { 
            .parse(@before);
            .before(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@first-letter=_) { 
            .parse(@first-letter);
            .first-letter(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@first-line=_) { 
            .parse(@first-line);
            .first-line(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@placeholder=_) { 
            .parse(@placeholder);
            .placeholder(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@pseudo=_) { 
            .parse(@pseudo);
            .pseudo(.loop[1], .loop[2]);
        }
        & when not (@selection=_) { 
            .parse(@selection);
            .selection(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@center=_) { 
            .parse(@center);
            .center(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@center-h=_) { 
            .parse(@center-h);
            .center-h(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@center-v=_) { 
            .parse(@center-v);
            .center-v(.loop[1], .loop[2], .loop[3]);
        }
        & when not (@triangle=_) { 
            .parse(@triangle);
            .triangle(.loop[1], .loop[2], .loop[3], .loop[4]);
        }
        & when not (@custom=_) { 
            .parse(@custom);
            .custom(.loop[1], .loop[2], .loop[3], .loop[4], .loop[5], .loop[6]);
        }

        .parse(@args) {
            .loop(@i:8) when (@i > 0) {
                .loop((@i - 1));
                @{i}: if(length(@args) >= @i; extract(@args, @i); _);
            }
        }
}
