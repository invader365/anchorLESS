//
//  Anchor mixins

.mixins(@query:_; @align:_; @animation:_; @backface:_; @background:_; @blur:_; @border:_; @brightness:_; @color:_; @contrast:_; @custom:_; @display:_; 
    @dropshadow:_; @filter:_; @float:_; @font:_; @fontface:_; @gradient:_; @grayscale:_; @huerotate:_; @invert:_; @minmax-size:_; @opacity:_; 
    @origin:_; @paragraph:_; @perspective:_; @position:_; @resize:_; @rotate3d:_; @rounded:_; @saturate:_; @scale3d:_; @sepia:_; @shadow:_; @size:_; 
    @skew:_; @spacing:_; @transition:_; @translate3d:_; @transform:_; @textdecoration:_; @textshadow:_; @url:_; @zindex:_;) {

    @min: extract(@query, 1);
    @max: extract(@query, 2);

    & when (@query=_) {
        .return-mixins(@align; @animation; @backface; @background; @blur; @border; @brightness; @color; @contrast; @custom; @display; @dropshadow; 
            @filter; @float; @font; @fontface; @gradient; @grayscale; @huerotate; @invert; @minmax-size; @opacity; @origin; @paragraph; @perspective; 
            @position; @resize; @rotate3d; @rounded; @saturate; @scale3d; @sepia; @shadow; @size; @skew; @spacing; @transition; @translate3d; 
            @transform; @textdecoration; @textshadow; @url; @zindex;);
    }

    & when not (@query=_) {
        @minW:   if((@min=_); ''; 'and (minWidth: @{min}) ');
        @min-max: if((@max=_); ~'@{minW}'; ~'@{minW}and (max-width: @{max})');

        @media all @min-max {
            .return-mixins(@align; @animation; @backface; @background; @blur; @border; @brightness; @color; @contrast; @custom; @display; @dropshadow; 
                @filter; @float; @font; @fontface; @gradient; @grayscale; @huerotate; @invert; @minmax-size; @opacity; @origin; @paragraph; @perspective; 
                @position; @resize; @rotate3d; @rounded; @saturate; @scale3d; @sepia; @shadow; @size; @skew; @spacing; @transition; @translate3d; 
                @transform; @textdecoration; @textshadow; @url; @zindex;);
        }
    }
}

.return-mixins(@align; @animation; @backface; @background; @blur; @border; @brightness; @color; @contrast; @custom; @display; @dropshadow; 
    @filter; @float; @font; @fontface; @gradient; @grayscale; @huerotate; @invert; @minmax-size; @opacity; @origin; @paragraph; @perspective; 
    @position; @resize; @rotate3d; @rounded; @saturate; @scale3d; @sepia; @shadow; @size; @skew; @spacing; @transition; @translate3d; 
    @transform; @textdecoration; @textshadow; @url; @zindex;) {
            
    // Box-model
    & when not (@display=_) { .display.parse(@display); }
    & when not (@size=_) { .size.parse(@size); }
    & when not (@minmax-size=_) { .minmax-size.parse(@minmax-size); }
    & when not (@spacing=_) { .spacing.parse(@spacing); }
    & when not (@border=_) { .border.parse(@border); }
        
    // Layout
    & when not (@position=_) { .position.parse(@position); }
    & when not (@align=_) { .align.parse(@align); }
    & when not (@float=_) { .float(@float); }
    & when not (@zindex=_) { .zindex(@zindex); }

    // Visual
    & when not (@color=_) { .color.parse(@color); }
    & when not (@background=_) { .back.parse(@background); }
    & when not (@gradient=_) { .gradient.parse(@gradient); }
    & when not (@rounded=_) { .rounded.parse(@rounded); }
    & when not (@shadow=_) { .shadow.parse(@shadow); }
    & when not (@opacity=_) { .opacity(@opacity); }
        
    // Typographic
    & when not (@font=_) { .font.parse(@font); }
    & when not (@fontface=_) { .fontface.parse(@fontface); }
    & when not (@paragraph=_) { .paragraph.parse(@paragraph); }
    & when not (@textdecoration=_) { .textdecoration.parse(@textdecoration); }
    & when not (@textshadow=_) { .textshadow.parse(@textshadow); }

    // Transform
    & when not (@transform=_) { .transform(@transform); }
    & when not (@perspective=_) { .perspective(@perspective); }
    & when not (@rotate3d=_) { .rotate3d.parse(@rotate3d); }
    & when not (@scale3d=_) { .scale3d.parse(@scale3d); }
    & when not (@skew=_) { .skew.parse(@skew); }
    & when not (@translate3d=_) { .translate3d.parse(@translate3d); }
    & when not (@backface=_) { .backface(@backface); }
    & when not (@origin=_) { .origin.parse(@origin); }
    & when not (@resize=_) { .resize(@resize); }

    // Filters
    & when not (@filter=_) { .filter(@filter); }
    & when not (@blur=_) { .blur(@blur); }
    & when not (@brightness=_) { .brightness(@brightness); }
    & when not (@contrast=_) { .contrast(@contrast); }
    & when not (@dropshadow=_) { .dropshadow.parse(@dropshadow); }
    & when not (@grayscale=_) { .grayscale(@grayscale); }
    & when not (@huerotate=_) { .huerotate(@huerotate); }
    & when not (@invert=_) { .invert(@invert); }
    & when not (@saturate=_) { .saturate(@saturate); }
    & when not (@sepia=_) { .sepia(@sepia); }
    & when not (@url=_) { .url(@url); }

    // Animation
    & when not (@animation=_) { .animation.parse(@animation); }
    & when not (@transition=_) { .transition.parse(@transition); }

    // Assets
    & when not (@triangle=_) { .triangle.parse(@triangle); }

    // Others
    & when not (@custom=_) { .custom.parse(@custom); }
}
