//
//  Mixins

//
//  .mixins(
//      @back: background-color, background-image, background-repeat, background-position;
//      @shadow: spread, color, alpha;
//  );

.getVal(@args:_; @repeat:0) {
    @lenght: length(@args);
    @1: extract(@args, 1);
    @2: if((@lenght = @repeat) and (2 > @repeat), @@repeat, if((@lenght > 1), extract(@args, 2), _));
    @3: if((@lenght = @repeat) and (3 > @repeat), @@repeat, if((@lenght > 2), extract(@args, 3), _));
    @4: if((@lenght = @repeat) and (4 > @repeat), @@repeat, if((@lenght > 3), extract(@args, 4), _));
    @5: if((@lenght = @repeat) and (5 > @repeat), @@repeat, if((@lenght > 4), extract(@args, 5), _));
    @6: if((@lenght = @repeat) and (6 > @repeat), @@repeat, if((@lenght > 5), extract(@args, 6), _));
    @7: if((@lenght = @repeat) and (7 > @repeat), @@repeat, if((@lenght > 6), extract(@args, 7), _));
    @8: if((@lenght = @repeat) and (8 > @repeat), @@repeat, if((@lenght > 7), extract(@args, 8), _));
}

.anchor-mixins(@align:_; @animation:_; @background:_; @border:_; @color:_; @declaration:_; @display:_; @float:_; @font:_; 
               @fontface:_; @gradient:_; @min-size:_; @position:_; @rounded:_; @shadow:_; @size:_; @spacing:_; @text:_; 
               @transition:_; @textdeco:_; @tshadow:_; @zindex:_;) {
        // Layout properties
        .position(.getVal(@position)[@1], .getVal(@position)[@2], .getVal(@position, 2)[@3], .getVal(@position, 2)[@4], 
                  .getVal(@position, 2)[@5]);
        .align(.getVal(@align)[@1], .getVal(@align, 1)[@2], .getVal(@align, 1)[@3], .getVal(@align, 1)[@4]);
        .float(@float);

        // Box-model properties
        .display(.getVal(@display)[@1], .getVal(@display)[@2], .getVal(@display, 2)[@3]);
        .size(.getVal(@size)[@1], .getVal(@size, 1)[@2]);
        .spacing(.getVal(@spacing)[@1], .getVal(@spacing, 1)[@2]);
        .border(.getVal(@border)[@1], .getVal(@border)[@2], .getVal(@border)[@3]);
        .min-size(.getVal(@min-size)[@1], .getVal(@min-size, 1)[@2]);

        // Visual properties
        .color(.getVal(@color)[@1], .getVal(@color)[@2], .getVal(@color)[@3]);
        .back(.getVal(@background)[@1], .getVal(@background)[@2], .getVal(@background)[@3], .getVal(@background)[@4],
        .getVal(@background)[@5], .getVal(@background)[@6], .getVal(@background)[@7]);
        .gradient(.getVal(@gradient)[@1], .getVal(@gradient)[@2], .getVal(@gradient)[@3], .getVal(@gradient)[@4], 
                  .getVal(@gradient)[@5]);
        .rounded(.getVal(@rounded)[@1], .getVal(@rounded)[@2], .getVal(@rounded)[@3], .getVal(@rounded)[@4]);
        .shadow(.getVal(@shadow)[@1], .getVal(@shadow)[@2], .getVal(@shadow)[@3], .getVal(@shadow)[@4]);
        
        // Typographic properties
        .font(.getVal(@font)[@1], .getVal(@font)[@2], .getVal(@font)[@3]);
        .font-face(.getVal(@fontface)[@1], .getVal(@fontface)[@2], .getVal(@fontface)[@3], .getVal(@fontface)[@4]);
        .text(.getVal(@text)[@1], .getVal(@text)[@2], .getVal(@text)[@3]);
        .text.decoration(.getVal(@textdeco)[@1], .getVal(@textdeco)[@2], .getVal(@textdeco)[@3]);
        .text.shadow(.getVal(@tshadow)[@1], .getVal(@tshadow)[@2], .getVal(@tshadow)[@3]);

        // Animation properties
        .animation(.getVal(@animation)[@1], .getVal(@animation)[@2], .getVal(@animation)[@3], .getVal(@animation)[@4], 
                   .getVal(@animation)[@5], .getVal(@animation)[@6], .getVal(@animation)[@7], .getVal(@animation)[@8]);
        .transition(.getVal(@transition)[@1], .getVal(@transition)[@2], .getVal(@transition)[@3], .getVal(@transition)[@4]);

        // Others
        .declaration(.getVal(@declaration)[@1], .getVal(@declaration)[@2]);
        .zindex(@zindex);
}

.mixins(@min-max:_; @align:_; @animation:_; @background:_; @border:_; @color:_; @declaration:_; @display:_; @float:_; @font:_; 
        @fontface:_; @gradient:_; @min-size:_; @position:_; @rounded:_; @shadow:_; @size:_; @spacing:_; @text:_; @transition:_; 
        @textdeco:_; @tshadow:_; @zindex:_;) {

        @min-width: .getVal(@min-max)[@1];
        @max-width: .getVal(@min-max)[@2];

    & when (@min-width=_) and (@max-width=_) {
            .anchor-mixins(@align; @animation; @background; @border; @color; @declaration; @display; @float; @font; @fontface; @gradient; 
                @min-size; @position; @rounded; @shadow; @size; @spacing; @text; @transition; @textdeco; @tshadow; @zindex;);
    }

    & when not (@min-width=_) and (@max-width=_) {
        @media all and (min-width: @min-width) {
            .anchor-mixins(@align; @animation; @background; @border; @color; @declaration; @display; @float; @font; @fontface; @gradient; 
                @min-size; @position; @rounded; @shadow; @size; @spacing; @text; @transition; @textdeco; @tshadow; @zindex;);
        }
    }

    & when (@min-width=_) and not (@max-width=_) {
        @media all and (max-width: @max-width) {
            .anchor-mixins(@align; @animation; @background; @border; @color; @declaration; @display; @float; @font; @fontface; @gradient;
                @min-size; @position; @rounded; @shadow; @size; @spacing; @text; @transition; @textdeco; @tshadow; @zindex;);
        }
    }

    & when not (@min-width=_) and not (@max-width=_) {
        @media all and (min-width: @min-width) and (max-width: @max-width) {
            .anchor-mixins(@align; @animation; @background; @border; @color; @declaration; @display; @float; @font; @fontface; @gradient;
                @min-size; @position; @rounded; @shadow; @size; @spacing; @text; @transition; @textdeco; @tshadow; @zindex;);
        }
    }
}
