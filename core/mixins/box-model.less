//
//  Box-model properties
    
.display(@display:_, @size:_) {
    & when not (@size=_) {
        .display(@display, @size, @size);
    }
}

.display(@display:_, @width:_, @height:_, @min-width:_, @max-width:_) {

    @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

    & when not (@display=_) and (@query=_) {
        display: @display;
    }

    & when not (@width=_) and (@query=_) {
        width: @width;
    }

    & when not (@height=_) and (@query=_) {
        height: @height;
    }

    & when not (@query=_) {
        .mixins(
            @query;
            @display: @display, @width, @height;
        );
    }
}

//
//  .min-size(@min-width, @min-height, [@min-width, @max-width])
//  .mixins(
//    @min-size: min-width, min-height; [@min-width; @max-width]
//  );

.min-size (@min-size) {
    & when not (@min-size=_) {
      .min-size(@min-size, @min-size)
    }
}

.min-size(@min-width:_, @min-height:_, @min-width-q:_, @max-width-q:_) {
    
    @query: if((@min-width-q=_ and @max-width-q=_); _; @min-width-q, @max-width-q);

    & when not (@min-height=_) and (@query=_) {
        min-height: @min-height;
    }

    & when not (@min-width=_) and (@query=_) {
        min-width: @min-width;
    }

    & when not (@query=_) {
        .mixins(
            @query;
            @min-size: @min-width, @min-height;
        );
    }
}

//
// Size combination values
// 
// .size()                      // default value
// .size(10px)                  // duplicate value
// .size(10px, 20px)            // custom propertie values
// .size(10px, 20px, 570px)     // custom propertie values + min-width query
// .size(10px, 20px, _, 1200px) // custom propertie values + max-width query
// .size(10px, 20px, 570px, 1200px) // custom propertie values + min/max-width queries
// ----------------------------------------------------------------

.size (@size) {
    & when not (@size=_) {
      .size(@size, @size)
    }
}

.size(@width:_, @height:_, @query-min:_, @query-max:_) {
  
    & when not (@width=_) and (@query-min=_) and (@query-max=_) {
        width: @width;
    }
  
    & when not (@height=_) and (@query-min=_) and (@query-max=_) {
        height: @height;
    }

    & when not (@query-min=_), not (@query-max=_) {
        .mixins(
            @min-max: @query-min, @query-max;
            @size: @width, @height;
        );
    }
}

//
// .spacing(margin, padding, [min-width, max-width])

.spacing (@spacing) {
    & when not (@spacing=_) {
      .spacing(@spacing, @spacing)
    }
}

.spacing (@margin:_, @padding:_, @query-min:_, @query-max:_) {

    & when not (@margin=_) and (@padding=_) and (@query-min=_) and (@query-max=_) {
        margin: @margin;
    }

    & when (@margin=_) and not (@padding=_) and (@query-min=_) and (@query-max=_) {
        padding: @padding;
    }

    & when not (@margin=_) and not (@padding=_) and (@query-min=_) and (@query-max=_) {
        margin: @margin;
        padding: @padding;
    }

    & when not (@query-min=_), not (@query-max=_) {
        .mixins(
            @min-max: @query-min, @query-max;
            @spacing: @margin, @padding;
        );
    }
}