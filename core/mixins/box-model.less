//
//   Box-model properties

//
//  .border(@width, @style, @color);
//   ------------------------------------------------------
//   @width     :  medium|thin|thick|-length-|initial|inherit
//   @style     :  none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit
//   @color     :  color|transparent|initial|inherit

.border(@width:_, @style:_, @color:_) {

    @params: if(length(@width) = 1 and length(@style) = 1 and length(@color) = 1; single);

    & when not (@style=_) and (@params=single) {
        @rest: if(@color=_; @style; @style @color);
        border: @width @rest;
    }

    & when not (@width=_) and (@style=_)  {
        border-width: @width;
    }

    & when not (@width=_) and (@params=multi)  {
        border-width: @width;
    }

    & when not (@style=_) and (@params=multi) {
        border-style: @style;
    }

    & when not (@color=_) and (@style=_) {
        border-color: @color;
    }

    & when not (@color=_) and (@params=multi) {
        border-color: @color;
    }
}

//  .display(@display, @horiz-axis, @vert-axis, @comp);
//   ------------------------------------------------------
//   @display                    :  inline|block|inline-block|flex|grid|list-item|table|table-row|table-column|table-cell|none|initial|inherit
//   when (@display = block) 
//     @width                 :  auto|-length-|initial|inherit
//     @height                :  auto|-length-|initial|inherit
//   when (@display = flex)
//     @justify-content       :  flex-start|flex-end|center|space-between|space-around|initial|inherit
//     @align-items           :  flex-start|flex-end|center|space-between|space-around|initial|inherit
//     @flex-flow             :  flex-direction flex-wrap|initial|inherit
//   when (@display = grid)
//     @grid-template-columns :  none|auto|max-content|min-content|-length-|initial|inherit
//     @grid-template-rows    :  none|auto|max-content|min-content|-length-|initial|inherit
//     @grid-gap              :  grid-row-gap grid-column-gap

.display(@display:_, @horiz-axis:_, @vert-axis:_, @comp:_) {

    @prop1: if(@display=flex; justify-content; if(@display=grid; grid-template-columns; width));
    @prop2: if(@display=flex; align-items;     if(@display=grid; grid-template-rows;    height));
    @prop3: if(@display=flex; flex-flow;       if(@display=grid; gap; _));

    & when not (@display=_) {
        display: @display;
    }

    & when not (@horiz-axis=_) {
        @{prop1}: @horiz-axis;
    }

    & when not (@vert-axis=_) {
        @{prop2}: @vert-axis;
    }

    & when not (@prop3=_) and not (@comp=_) {
        @{prop3}: @comp;
    }
}

.display(@display:_, @horiz-axis:_) {
    & when (@display=block), (@display=inline-block) {
        .display(@display, @horiz-axis, @horiz-axis);
    }
}

//
//  .minmax-size(@min-width, @max-width, @min-height, @max-heigh);
//   ------------------------------------------------------
//   @min-width      :  -length-|initial|inherit
//   @max-width      :  -length-|initial|inherit
//   @min-height     :  -length-|initial|inherit
//   @max-height     :  -length-|initial|inherit

.minmax-size(@min-width:_, @max-width:_, @min-height:_, @max-height:_) {

    & when not (@min-width=_) {
        min-width: @min-width;
    }

    & when not (@max-width=_) {
        max-width: @max-width;
    }

    & when not (@min-height=_) {
        min-height: @min-height;
    }

    & when not (@max-height=_) {
        max-height: @max-height;
    }
}

//
//  .overflow(@overflow-x, @overflow-y)
//   ------------------------------------------------------
//   overflow-x         :  visible|hidden|scroll|auto|initial|inherit
//   overflow-y         :  visible|hidden|scroll|auto|initial|inherit

.overflow(@overflow-x:_, @overflow-y:_) {

    & when (@overflow-x=@overflow-y) {
        overflow: @overflow-x;
    }

    & when not (@overflow-y=_) {
        overflow-y: @overflow-y;
    }
        
    & when not (@overflow-x=_) {
        overflow-x: @overflow-x;
    }
}

//
//  .size(@width, @height);
//   ------------------------------------------------------
//   @width         :  auto|-length-|initial|inherit
//   @heigth        :  auto|-length-|initial|inherit

.size(@width:_, @height:_) {

    & when not (@width=_) {
        width: @width;
    }
  
    & when not (@height=_) {
        height: @height;
    }
}

.size(@width:_) {

    & when not (@width=_) {
        width: @width;
        height: @width;
    }
}

//
//  .spacing(@margin, @padding);
//   ------------------------------------------------------
//   @margin         :  -length-|auto|initial|inherit
//   @padding        :  -length-|auto|initial|inherit

.spacing (@margin:_, @padding:_) {
  
    & when not (@margin=_) {
        margin: @margin;
    }

    & when not (@padding=_) {
        padding: @padding;
    }
}

.spacing (@margin:_) {
  
    & when not (@margin=_) {
        margin: @margin;
        padding: @margin;
    }
}
