//
//   Box-model properties

//
//  .border(@width, @style, @color, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @width     :  medium|thin|thick|-length-|initial|inherit
//   @style     :  none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|initial|inherit
//   @color     :  color|transparent|initial|inherit

.border(@width:_, @style:_, @color:_, @min-query:_, @max-query:_) {

    @params: if(length(@width) = 1 and length(@style) = 1 and length(@color) = 1; single);
    @minmax: if(@min-query=_ and @max-query=_; _; @min-query, @max-query);

    & when not (@style=_) and (@params=single) and (@minmax=_) {
        @rest: if(@color=_; @style; @style @color);
        border: @width @rest;
    }

    & when not (@width=_) and (@style=_)  and (@minmax=_) {
        border-width: @width;
    }

    & when not (@width=_) and (@params=multi)  and (@minmax=_) {
        border-width: @width;
    }

    & when not (@style=_) and (@params=multi) and (@minmax=_) {
        border-style: @style;
    }

    & when not (@color=_) and (@style=_) and (@minmax=_) {
        border-color: @color;
    }

    & when not (@color=_) and (@params=multi) and (@minmax=_) {
        border-color: @color;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @border: @width, @style, @color;
        );
    }
}

//  .display(@mode, @property1, @property2, @property3, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @mode                    :  inline|block|inline-block|flex|grid|list-item|table|table-row|table-column|table-cell|none|initial|inherit
//   when (@mode = block) 
//     @width                 :  auto|-length-|initial|inherit
//     @height                :  auto|-length-|initial|inherit
//   when (@mode = flex)
//     @flex-flow             :  flex-direction flex-wrap|initial|inherit
//     @justify-content       :  flex-start|flex-end|center|space-between|space-around|initial|inherit
//     @align-items           :  flex-start|flex-end|center|space-between|space-around|initial|inherit
//   when (@mode = grid)
//     @grid-template-columns :  none|auto|max-content|min-content|-length-|initial|inherit
//     @grid-template-rows    :  none|auto|max-content|min-content|-length-|initial|inherit
//     @grid-gap              :  grid-row-gap grid-column-gap

.display(@mode:_, @property1:_, @property2:_, @property3:_, @min-query:_, @max-query:_) {

    @prop1: if(@mode=flex; flex-flow;       if(@mode=grid; grid-template-columns; width););
    @prop2: if(@mode=flex; justify-content; if(@mode=grid; grid-template-rows; height););
    @prop3: if(@mode=flex; align-items;     if(@mode=grid; gap); _);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@mode=_) and (@minmax=_) {
        display: @mode;
    }

    & when not (@property1=_) and (@minmax=_) {
        @{prop1}: @property1;
    }

    & when not (@property2=_) and (@minmax=_) {
        @{prop2}: @property2;
    }

    & when not (@property3=_) and (@minmax=_) {
        @{prop3}: @property3;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @display: @mode, @property1, @property2, @property3;
        );
    }
}

.display(@mode:_, @property1:_) {
    & when (@mode=block), (@mode=inline-block) {
        .display(@mode, @property1, @property1);
    }
}

//
//  .minmax-size(@min-width, @max-width, @min-height, @max-heigh, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @min-width      :  -length-|initial|inherit
//   @max-width      :  -length-|initial|inherit
//   @min-height     :  -length-|initial|inherit
//   @max-height     :  -length-|initial|inherit

.minmax-size(@min-width:_, @max-width:_, @min-height:_, @max-height:_, @min-query:_, @max-query:_) {
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@min-width=_) and (@minmax=_) {
        min-width: @min-width;
    }

    & when not (@max-width=_) and (@minmax=_) {
        max-width: @max-width;
    }

    & when not (@min-height=_) and (@minmax=_) {
        min-height: @min-height;
    }

    & when not (@max-height=_) and (@minmax=_) {
        max-height: @max-height;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @minmax-size: @min-width, @max-width, @min-height, @max-height;
        );
    }
}

//
//  .overflow(@overflow-x, @overflow-y, [@min-query, @max-query])
//   ------------------------------------------------------
//   overflow-x         :  visible|hidden|scroll|auto|initial|inherit
//   overflow-y         :  visible|hidden|scroll|auto|initial|inherit

.overflow(@overflow-x:_, @overflow-y:_, @min-query:_, @max-query:_) {

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when (@overflow-x=@overflow-y) and (@minmax=_) {
        overflow: @overflow-x;
    }

    & when not (@overflow-y=_) and (@minmax=_) {
        overflow-y: @overflow-y;
    }
        
    & when not (@overflow-x=_) and (@minmax=_) {
        overflow-x: @overflow-x;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @overflow: @overflow-x, @overflow-y;
        );
    }
}

//
//  .rounded.top-left(@radius, [@min-query, @max-query]);
//  .rounded.top-right(@radius, [@min-query, @max-query]);
//  .rounded.bottom-right(@radius, [@min-query, @max-query]);
//  .rounded.bottom-left(@radius, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @radius     :  -length- [length]|initial|inherit

.rounded {
    .top-left(@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-top-left-radius: @radius;
                -moz-border-radius-topleft: @radius;
                    border-top-left-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @top-left: @radius;
            );
        }
    }

    .top-right(@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
        
        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-top-right-radius: @radius;
                -moz-border-radius-topright: @radius;
                    border-top-right-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @top-right: @radius;
            );
        }
    }

    .bottom-right (@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
        
        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-bottom-right-radius: @radius;
                -moz-border-radius-bottomright: @radius;
                    border-bottom-right-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @bottom-right: @radius;
            );
        }
    }

    .bottom-left (@radius:_, @min-query:_, @max-query:_) {
    
        @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);
        
        & when not (@radius=_) and (@minmax=_) {
            -webkit-border-bottom-left-radius: @radius;
                -moz-border-radius-bottomleft: @radius;
                    border-bottom-left-radius: @radius;
        }

        & when not (@minmax=_) {
            .mixins(
                @query: @minmax;
                @bottom-left: @radius;
            );
        }
    }
}

//
//  .size(@width, @height, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @width         :  auto|-length-|initial|inherit
//   @heigth        :  auto|-length-|initial|inherit

.size(@width:_, @height:_, @min-query:_, @max-query:_) {
  
    @vheight: if(@height=_; @width; @height);
    @minmax:  if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@width=_) and (@minmax=_) {
        width: @width;
    }
  
    & when not (@vheight=_) and (@minmax=_) {
        height: @vheight;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @size: @width, @height;
        );
    }
}

//
//  .spacing(@margin, @padding, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @margin         :  -length-|auto|initial|inherit
//   @padding        :  -length-|auto|initial|inherit

.spacing (@margin:_, @padding:_, @min-query:_, @max-query:_) {
  
    @vpadding: if(not (@margin=_) and (@padding=_); @margin; @padding);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@margin=_) and (@minmax=_) {
        margin: @margin;
    }

    & when not (@vpadding=_) and (@minmax=_) {
        padding: @vpadding;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @spacing: @margin, @padding;
        );
    }
}
