//
//  Positioning

//
// .align(top, right, bottom, left, [min-width-query]) 

.align (@var) 
    when (@var=null) {}

.align (@top: auto, @right: auto, @bottom: auto, @left: auto, @query: 0) 
    when (@query > 0)   
{
    @media all and (min-width: @query) {
        .align(@top, @right, @bottom, @left);
    }
}

.align (@top: auto, @right: auto, @bottom: auto, @left: auto, @query: 0) 
    when not (@top=null) and (@query = 0)     
{
    top: @top; 
    right: @right;
    bottom: @bottom;
    left: @left;
}

.align {
    .left-top(@left) 
        when (@left=null) {}
    .left-top(@left: auto, @top: auto) 
        when not (@left=null) 
    {
        left: @left;
        top: @top; 
    }
    .left-bottom(@left) 
        when (@left=null) {}
    .left-bottom (@left: auto, @bottom: auto) 
        when not (@left=null) 
    {
        left: @left;
        bottom: @bottom;
    }
    .right-top(@right) 
        when (@right=null) {}
    .right-top (@right: auto, @top: auto) 
        when not (@right=null) 
    {
        right: @right;
        top: @top;
    }
    .right-bottom(@right) 
        when (@right=null) {}
    .right-bottom (@right: auto, @bottom: auto) 
        when not (@right=null) 
    {
        right: @right; 
        bottom: @bottom;
    }
}

//
// .columns(count, gap, width) 

.columns (@var) 
    when (@var=null) {}
    
.columns (@count: auto, @gap: normal, @width: auto) 
    when not (@count=null)    {
    -webkit-column-count: @count;
        -moz-column-count: @count;
            column-count: @count;
    -webkit-column-gap: @gap;
        -moz-column-gap: @gap;
            column-gap: @gap;
    -webkit-column-width: @width;
        -moz-column-width: @width;
            column-width: @width;
}

//
// .float(float, [min-width-query]) 

.float (@var) 
    when (@var=null) {}

.float (@float: none, @query: 0) 
    when not (@float=null) and (@query = 0)   
{
    float: @float;
}

.float (@float: none, @query: 0) 
    when (@query > 0)   
{
    @media all and (min-width: @query) {
        .float(@float);
    } 
}

//
// .index(index, [min-width-query]) 

.index (@var) 
    when (@var=null) {}

.index (@index: 0, @query: 0) 
    when not (@index=null) and (@query = 0)   
{
    z-index: @index;
}

.index (@index: 0, @query: 0) 
    when (@query > 0)   
{
    @media all and (min-width: @query) {
        .index(@index);
    }
}

//
// .position(position, [min-width-query]) 
// .position.align(position, top, right, bottom, left, [min-width-query]) 

.position (@var) 
    when (@var=null) {}

.position (@position: static, @query: 0)
    when not (@position=null) and (@query = 0)
{
    position: @position;
}

.position (@position: absolute, @query: 0) 
    when (@query > 0)   
{
    @media all and (min-width: @query) {
        .position(@position);
    }
}

.position {
    .align (@position) 
        when (@position=null) 
    {}
    .align (@position: relative, @top: auto, @right: auto, @bottom: auto, @left: auto, @query: 0) 
        when not (@position=null) and (@query = 0) 
    {
        position: @position;
        top: @top; 
        right: @right;
        bottom: @bottom;
        left: @left;
    }
    .align (@position: relative, @top: auto, @right: auto, @bottom: auto, @left: auto, @query: 0) 
        when (@query > 0) 
    {
        @media all and (min-width: @query) {
            .position.align(@position, @top, @right, @bottom, @left);
        }
    }
    .left-top (@position) 
        when (@position=null) 
    {}
    .left-top (@position: relative, @left: auto, @top: auto) 
        when not (@position=null) 
    {
        position: @position;
        left: @left;
        top: @top; 
    }
    .left-bottom (@position) 
        when (@position=null) 
    {}
    .left-bottom (@position: relative, @left: auto, @bottom: auto) 
        when not (@position=null) 
    {
        position: @position;
        left: @left;
        bottom: @bottom;
    }
    .right-top (@position) 
        when (@position=null) 
    {}
    .right-top (@position: relative, @right: auto, @top: auto) 
        when not (@position=null) 
    {
        position: @position;
        right: @right;
        top: @top; 
    }
    .right-bottom (@position) 
        when (@position=null) 
    {}
    .right-bottom (@position: relative, @right: auto, @bottom: auto) 
        when not (@position=null) 
    {
        position: @position;
        right: @right;
        bottom: @bottom;
    }
}
