//
//  Background and Color

//
// .back(color, image-url, repeat, position, [min-width-query, max-width-query])

.back(@param) 
    when (@param=null) {}

.back(@color: transparent, @image: none, @repeat: repeat, @position: 0 0, @query-min:_, @query-max:_) 
    when not (@color=null) and (@image= none) and (@query-min=_) and (@query-max=_) 
{
    background: @color @image @repeat @position;
}

.back(@color: transparent, @image: none, @repeat: repeat, @position: 0 0, @query-min:_, @query-max:_) 
    when not (@color=null) and not (@image= none) and (@query-min=_) and (@query-max=_) 
{
    background: @color url('@{image}') @repeat @position; 
}

.back(@color: transparent, @image: none, @repeat: repeat, @position: 0 0, @query-min:_, @query-max:_) 
    when (@query-min=_) and not (@query-max=_) 
{ 
    @media all and (max-width: @query-max) {
        .back(@color, @image, @repeat, @position);
    }
}

.back(@color: transparent, @image: none, @repeat: repeat, @position: 0 0, @query-min:_, @query-max:_)
    when not (@query-min=_) and (@query-max=_) 
{ 
    @media all and (min-width: @query-min) {
        .back(@color, @image, @repeat, @position);
    }
}

.back(@color: transparent, @image: none, @repeat: repeat, @position: 0 0, @query-min:_, @query-max:_) 
    when not (@query-min=_) and not (@query-max=_) 
{ 
    @media all and (min-width: @query-min) and (max-width: @query-max) {
        .back(@color, @image, @repeat, @position);
    }
}

.back {
    .attach(@attachment) 
        when (@attachment=null)  
    {}
    .attach(@attachment: scroll) when not (@attachment=null)  { 
        background-attachment: @attachment; 
    }
    .color(@color) 
        when (@color=null)  
    {}
    .color (@color: transparent) when not (@color=null) {
        background-color: @color; 
    }
    .clip(@clip) 
        when (@clip=null)  
    {}
    .clip (@clip: border) when not (@clip=null) {
        -webkit-background-clip: @clip;           // Safari 4? Chrome 6?
           -moz-background-clip: @clip;           // Firefox 3.6
                background-clip: ~'@{clip}-box';  // Firefox 4, Safari 5, Opera 10, IE9
    }
    .origin(@origin) 
        when (@origin=null)  
    {}
    .origin (@origin) {    
        -webkit-background-origin: @origin;  // Safari 4? Chrome 6?
           -moz-background-origin: @origin;  // Firefox 3.6
                background-origin: @origin;  // Firefox 4, Safari 5, Opera 10, IE9
    }
    .position(@position) 
        when (@position=null)  
    {}
    .position (@position: 0 0) when not (@position=null) { 
        background-position: @position;
    }
    .repeat(@repeat) 
        when (@repeat=null)  
    {}
    .repeat (@repeat: repeat) when not (@repeat=null) { 
        background-repeat: @repeat; 
    }
    .size(@size) 
        when (@size=null)  
    {}
    .size (@size: auto) when not (@size=null) { 
        -webkit-background-size: @size;  // Safari 3.0+, Chrome 1.0+
           -moz-background-size: @size;  // Firefox 3.6
                background-size: @size;  // IE 9+
    }
}

.back {
    .image (@param) 
        when (@param=null) {}

    .image (@image-url: none, @query-min:_, @query-max:_)
        when not (@image-url=null) and (@image-url= none) and (@query-min=_) and (@query-max=_)
    {
        background-image: @image-url; 
    }

    .image (@image-url: none, @query-min:_, @query-max:_)
        when not (@image-url=null) and not (@image-url= none) and (@query-min=_) and (@query-max=_)
    { 
        background-image: url('@{image-url}'); 
    }

    .image (@image-url: none, @query-min:_, @query-max:_)
        when (@query-min=_) and not (@query-max=_)
    {
        @media all and (max-width: @query-max) {
            .image(@image-url);
        } 
    }

    .image (@image-url: none, @query-min:_, @query-max:_)
        when not (@query-min=_) and (@query-max=_)
    {
        @media all and (min-width: @query-min) {
            .image(@image-url);
        } 
    }

    .image (@image-url: none, @query-min:_, @query-max:_)
    when not (@query-min=_) and not (@query-max=_)
    {
        @media all and (min-width: @query-min) and (max-width: @query-max) {
            .image(@image-url);
        } 
    }
}

//
// .color(color, background-color, border-color, [query-min, query-max])

.color (@param) 
    when (@param=null) {}

.color (@color:_, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
    when not (@color=null) and (@color=_) and (@back-color=_) and (@border-color=_) and (@query-min=_) and (@query-max=_)
{
    color: inherit; 
    background-color: transparent;
    border-color: inherit;
}

.color (@color:_, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
    when not (@color=null) and (@color=_) and (@back-color=_) and not (@border-color=_) and (@query-min=_) and (@query-max=_)
{
    border-color: @border-color;
}

.color (@color:_, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
    when not (@color=null) and (@color=_) and not (@back-color=_) and (@border-color=_) and (@query-min=_) and (@query-max=_)
{
    background-color: @background-color;
}

.color (@color:_, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
    when not (@color=null) and not (@color=_) and (@back-color=_) and (@border-color=_) and (@query-min=_) and (@query-max=_)
{
    color: @color;
}

.color (@color:_, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
    when not (@color=null) and (@color=_) and not (@back-color=_) and not (@border-color=_) and (@query-min=_) and (@query-max=_)
{
    background-color: @back-color;
    border-color: @border-color;
}

.color (@color:_, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
    when not (@color=null) and not (@color=_) and (@back-color=_) and not (@border-color=_) and (@query-min=_) and (@query-max=_)
{
    color: @color;
    border-color: @border-color;
}

.color (@color:_, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
    when not (@color=null) and not (@color=_) and not (@back-color=_) and (@border-color=_) and (@query-min=_) and (@query-max=_)
{
    color: @color;
    background-color: @back-color;
}

.color (@color:_, @back-color:_, @border-color:_, @query-min:_, @query-max:_) 
    when not (@color=null) and not (@color=_) and not (@back-color=_) and not (@border-color=_) and (@query-min=_) and (@query-max=_)
{
    color: @color; 
    background-color: @back-color;
    border-color: @border-color;
}

.color (@color:_, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
    when (@query-min=_) and not (@query-max=_)
{
    @media all and (max-width: @query-max) {
        .color(@color, @back-color, @border-color)
    }
}

.color (@color:_, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
    when not (@query-min=_) and (@query-max=_)
{
    @media all and (min-width: @query-min) {
        .color(@color, @back-color, @border-color)
    }
}

.color (@color:_, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
    when not (@query-min=_) and not (@query-max=_)
{
    @media all and (min-width: @query-min) and (max-width: @query-max) {
        .color(@color, @back-color, @border-color)
    }
}

//
// .gradient(start, stop, degrees, [query-min, query-max])
// .gradient.linear(start, stop, degrees, [query-min, query-max])
// .gradient.to-top(start, stop, [query-min, query-max])
// .gradient.to-bottom(start, stop, [query-min, query-max])
// .gradient.to-left(start, stop, [query-min, query-max])
// .gradient.to-right(start, stop, [query-min, query-max])
// .gradient.radial(inner, outer, [query-min, query-max])

.gradient (@param) 
    when (@param=null) {}

.gradient (@start: transparent, @stop: gray, @degrees: 180deg, @query-min:_, @query-max:_)
    when not (@start=null) and (@query-min=_) and (@query-max=_) 
{
    .gradient.linear(@start, @stop, @degrees);
}

.gradient (@start:_, @stop:_, @degrees:_, @query-min:_, @query-max:_)
    when (@query-min=_) and not (@query-max=_) 
{
    @media all and (max-width: @query-max) {
        .gradient.linear(@start, @stop, @degrees)
    }
}

.gradient (@start:_, @stop:_, @degrees:_, @query-min:_, @query-max:_)
    when not (@query-min=_) and (@query-max=_) 
{
    @media all and (min-width: @query-min) {
        .gradient.linear(@start, @stop, @degrees)
    }
}

.gradient (@start:_, @stop:_, @degrees:_, @query-min:_, @query-max:_)
    when not (@query-min=_) and not (@query-max=_)
{
    @media all and (min-width: @query-min) and (max-width: @query-max) {
        .gradient.linear(@start, @stop, @degrees)
    }
}

.gradient {
    .linear (@start) 
        when (@start=null) 
    {}
    .linear(@start: transparent, @stop: gray, @degrees: 180deg, @query-min:_, @query-max:_) 
        when not (@start=null) and (@query-min=_) and (@query-max=_)
    {
        background-image: -webkit-linear-gradient(@degrees, @start, @stop);  // Safari 5.1+, Chrome 10+
        background-image:   -moz-linear-gradient(@degrees, @start, @stop);   // Firefox 3.6+
        background-image:         linear-gradient(@degrees, @start, @stop);  // IE10
    }
    .linear (@start:_, @stop:_, @degrees:_, @query-min:_, @query-max:_)
        when (@query-min=_) and not (@query-max=_) 
    {
        @media all and (max-width: @query-max) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .linear (@start:_, @stop:_, @degrees:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and (@query-max=_)
    {
        @media all and (min-width: @query-min) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .linear (@start:_, @stop:_, @degrees:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and not (@query-max=_)
    {
        @media all and (min-width: @query-min) and (max-width: @query-max) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-bottom (@inner) 
        when (@inner=null) 
    {}
    .to-bottom(@start: transparent, @stop: gray, @query-min:_, @query-max:_)
        when not (@start=null) and (@query-min=_) and (@query-max=_)
    {
        .gradient.linear(@start, @stop, 180deg);
    }
    .to-bottom(@start:_, @stop:_, @query-min:_, @query-max:_)
        when (@query-min=_) and not (@query-max=_) 
    {
        @media all and (max-width: @query-max) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-bottom(@start:_, @stop:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and (@query-max=_) 
    {
        @media all and (min-width: @query-min) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-bottom(@start:_, @stop:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and not (@query-max=_)
    {
        @media all and (min-width: @query-min) and (max-width: @query-max) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-right(@inner) 
        when (@inner=null) 
    {}
    .to-right(@start: transparent, @stop: gray, @query-min:_, @query-max:_)
        when not (@start=null) and (@query-min=_) and (@query-max=_)
    {
        .gradient.linear(@start, @stop, 270deg);
    }
    .to-right(@start:_, @stop:_, @query-min:_, @query-max:_)
        when (@query-min=_) and not (@query-max=_) 
    {
        @media all and (max-width: @query-max) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-right(@start:_, @stop:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and (@query-max=_) 
    {
        @media all and (min-width: @query-min) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-right(@start:_, @stop:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and not (@query-max=_)
    {
        @media all and (min-width: @query-min) and (max-width: @query-max) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-top(@inner) 
        when (@inner=null) 
    {}
    .to-top(@start: transparent, @stop: gray, @query-min:_, @query-max:_)
        when not (@start=null) and (@query-min=_) and (@query-max=_)
    {
        .gradient.linear(@start, @stop, 0deg);
    }
    .to-top(@start:_, @stop:_, @query-min:_, @query-max:_)
        when (@query-min=_) and not (@query-max=_) 
    {
        @media all and (max-width: @query-max) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-top(@start:_, @stop:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and (@query-max=_) 
    {
        @media all and (min-width: @query-min) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-top(@start:_, @stop:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and not (@query-max=_)
    {
        @media all and (min-width: @query-min) and (max-width: @query-max) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-left(@inner) 
        when (@inner=null) 
    {}
    .to-left(@start: transparent, @stop: gray, @query-min:_, @query-max:_)
        when not (@start=null) and (@query-min=_) and (@query-max=_)
    {
        .gradient.linear(@start, @stop, 90deg);
    }
    .to-left(@start:_, @stop:_, @query-min:_, @query-max:_)
        when (@query-min=_) and not (@query-max=_) 
    {
        @media all and (max-width: @query-max) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-left(@start:_, @stop:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and (@query-max=_) 
    {
        @media all and (min-width: @query-min) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .to-left(@start:_, @stop:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and not (@query-max=_)
    {
        @media all and (min-width: @query-min) and (max-width: @query-max) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }
    .radial (@inner) 
        when (@inner=null) 
    {}
    .radial(@inner:_, @outer:_) 
        when not (@inner=null) and (@inner=_)
    {
        .radial(white, black)
    }
    .radial(@inner:_, @outer:_) 
        when not (@inner=null) and not (@inner=_)
    {
        background-image: -webkit-gradient(radial, center center, 0, center center, 460, from(@inner), to(@outer)); // Chrome, Safari 4+
        background-image: -webkit-radial-gradient(center, ellipse, @inner 0%, @outer 100%);  // Safari 5.1+, Chrome 10+
        background-image:    -moz-radial-gradient(center, ellipse, @inner 0%, @outer 100%);   // Firefox 3.6+
        background-image:         radial-gradient(ellipse at center, @inner 0%, @outer 100%);
    }
    .radial (@inner:_, @outer:_, @query-min:_, @query-max:_)
        when (@query-min=_) and not (@query-max=_) 
    {
        @media all and (max-width: @query-max) {
            .gradient.radial(@inner, @outer)
        }
    }

    .radial (@inner:_, @outer:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and (@query-max=_) 
    {
        @media all and (min-width: @query-min) {
            .gradient.radial(@inner, @outer)
        }
    }
    .radial (@inner:_, @outer:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and not (@query-max=_)
    {
        @media all and (min-width: @query-min) and (max-width: @query-max) {
            .gradient.radial(@inner, @outer)
        }
    }
}
