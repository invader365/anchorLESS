//
//  Background and Color

    .back (@param) 
        when (@param = null) {}

    .back (@color: transparent, @image: none, @repeat: repeat, @position: 0 0, @query-min:_, @query-max:_) 
        when not (@color = null) and (@image = none) and (@query-min=_) and (@query-max=_) 
    {
        background: @color @image @repeat @position;
    }

    .back (@color: transparent, @image: none, @repeat: repeat, @position: 0 0, @query-min:_, @query-max:_) 
        when not (@color = null) and not (@image = none) and (@query-min=_) and (@query-max=_) 
    {
        background: @color url('@{image}') @repeat @position; 
    }

    .back (@color: transparent, @image: none, @repeat: repeat, @position: 0 0, @query-min:_, @query-max:_) 
        when (@query-min=_) and not (@query-max=_) 
    { 
        @media all and (max-width: @query-max) {
            .back(@color, @image, @repeat, @position);
        }
    }

    .back (@color: transparent, @image: none, @repeat: repeat, @position: 0 0, @query-min:_, @query-max:_)
        when not (@query-min=_) and (@query-max=_) 
    { 
        @media all and (min-width: @query-min) {
            .back(@color, @image, @repeat, @position);
        }
    }

    .back (@color: transparent, @image: none, @repeat: repeat, @position: 0 0, @query-min:_, @query-max:_) 
        when not (@query-min=_) and not (@query-max=_) 
    { 
        @media all and (min-width: @query-min) and (max-width: @query-max) {
            .back(@color, @image, @repeat, @position);
        }
    }

    .back {
        .attach     (@param) 
            when (@param = null)  {}
        .color      (@param) 
            when (@param = null)  {}
        .origin     (@param) 
            when (@param = null)  {}
        .position   (@param) 
            when (@param = null)  {}
        .repeat     (@param) 
            when (@param = null)  {}
        .size       (@param) 
            when (@param = null)  {}
    }

    .back {
        .attach (@attachment: scroll) when not (@attachment = null)  { 
            background-attachment: @attachment; 
        }
        .color (@color: transparent) when not (@color = null) {
            background-color: @color; 
        }
        .clip (@clip: border) when not (@clip = null) {
            -webkit-background-clip: @clip;           // Safari 4? Chrome 6?
               -moz-background-clip: @clip;           // Firefox 3.6
                    background-clip: ~'@{clip}-box';  // Firefox 4, Safari 5, Opera 10, IE9
        }
        .origin (@origin) {    
            -webkit-background-orign: @orign;        // Safari 4? Chrome 6?
               -moz-background-orign: @orign;        // Firefox 3.6
                    background-orign: @orign;        // Firefox 4, Safari 5, Opera 10, IE9
        }
        .position (@position: 0 0) when not (@position = null) { 
            background-position: @position;
        }
        .repeat (@repeat: repeat) when not (@repeat = null) { 
            background-repeat: @repeat; 
        }
        .size (@size: auto) when not (@size = null) { 
            -webkit-background-size: @size;         // Safari 3.0+, Chrome 1.0+
               -moz-background-size: @size;         // Firefox 3.6
                    background-size: @size;         // IE 9+
        }
    }

    .back {
        .image (@param) 
            when (@param = null) {}

        .image (@image-url: none, @query-min:_, @query-max:_)
            when not (@image-url = null) and (@image-url = none) and (@query-min=_) and (@query-max=_)
        {
            background-image: @image-url; 
        }

        .image (@image-url: none, @query-min:_, @query-max:_)
            when not (@image-url = null) and not (@image-url = none) and (@query-min=_) and (@query-max=_)
        { 
            background-image: url('@{image-url}'); 
        }

        .image (@image-url: none, @query-min:_, @query-max:_)
            when (@query-min=_) and not (@query-max=_)
        {
            @media all and (max-width: @query-max) {
                .image(@image-url);
            } 
        }

        .image (@image-url: none, @query-min:_, @query-max:_)
            when not (@query-min=_) and (@query-max=_)
        {
            @media all and (min-width: @query-min) {
                .image(@image-url);
            } 
        }

        .image (@image-url: none, @query-min:_, @query-max:_)
        when not (@query-min=_) and not (@query-max=_)
        {
            @media all and (min-width: @query-min) and (max-width: @query-max) {
                .image(@image-url);
            } 
        }
    }
    
    .color (@param) 
        when (@param = null) {}

    .color (@color: _, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
        when not (@color = null) and (@color=_) and (@back-color=_) and (@border-color=_) and (@query-min=_) and (@query-max=_)
    {
        color: inherit; 
        background-color: transparent;
        border-color: inherit;
    }

    .color (@color: _, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
        when not (@color = null) and (@color=_) and (@back-color=_) and not (@border-color=_) and (@query-min=_) and (@query-max=_)
    {
        border-color: @border-color;
    }

    .color (@color: _, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
        when not (@color = null) and (@color=_) and not (@back-color=_) and (@border-color=_) and (@query-min=_) and (@query-max=_)
    {
        background-color: @background-color;
    }

    .color (@color: _, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
        when not (@color = null) and not (@color=_) and (@back-color=_) and (@border-color=_) and (@query-min=_) and (@query-max=_)
    {
        color: @color;
    }

    .color (@color: _, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
        when not (@color = null) and (@color=_) and not (@back-color=_) and not (@border-color=_) and (@query-min=_) and (@query-max=_)
    {
        background-color: @back-color;
        border-color: @border-color;
    }

    .color (@color: _, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
        when not (@color = null) and not (@color=_) and (@back-color=_) and not (@border-color=_) and (@query-min=_) and (@query-max=_)
    {
        color: @color;
        border-color: @border-color;
    }

    .color (@color: _, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
        when not (@color = null) and not (@color=_) and not (@back-color=_) and (@border-color=_) and (@query-min=_) and (@query-max=_)
    {
        color: @color;
        background-color: @back-color;
    }

    .color (@color: _, @back-color:_, @border-color:_, @query-min:_, @query-max:_) 
        when not (@color = null) and not (@color=_) and not (@back-color=_) and not (@border-color=_) and (@query-min=_) and (@query-max=_)
    {
        color: @color; 
        background-color: @back-color;
        border-color: @border-color;
    }

    .color (@color: _, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
        when (@query-min=_) and not (@query-max=_)
    {
        @media all and (max-width: @query-max) {
            .color(@color, @back-color, @border-color)
        }
    }

    .color (@color: _, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and (@query-max=_)
    {
        @media all and (min-width: @query-min) {
            .color(@color, @back-color, @border-color)
        }
    }

    .color (@color: _, @back-color:_, @border-color:_, @query-min:_, @query-max:_)
        when not (@query-min=_) and not (@query-max=_)
    {
        @media all and (min-width: @query-min) and (max-width: @query-max) {
            .color(@color, @back-color, @border-color)
        }
    }
    
    .gradient (@param) 
        when (@param = null) {}

    .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) 
        when not (@start = null) 
    {
        .gradient.linear(@start, @stop, @degrees, @image);
    }

    .gradient {
        .linear (@param) 
            when (@param = null) {}
        .to-bottom   (@param) 
            when (@param = null) {}
        .to-left     (@param) 
            when (@param = null) {}
        .to-right    (@param) 
            when (@param = null) {}
        .to-top      (@param) 
            when (@param = null) {}
        .radial      (@param) 
            when (@param = null) {}
    }

    .gradient {
        .linear(@start: transparent, @stop: gray, @degrees: 180deg, @image: none) 
            when not (@start = null) 
        {
            .back(@start, @image, repeat-x, center);
             background-image: -webkit-linear-gradient(@degrees, @start, @stop);                     // Safari 5.1+, Chrome 10+
             background-image:    -moz-linear-gradient(@degrees, @start, @stop);                     // Firefox 3.6+
             background-image:         linear-gradient(@degrees, @start, @stop);                     // IE10
        }
        .to-bottom(@start: transparent, @stop: gray, @image: none) 
            when not (@start = null) 
        {
            .gradient.linear(@start, @stop, 180deg, @image);
        }
        .to-right(@start: transparent, @stop: gray, @image: none) 
            when not (@start = null) 
        {
            .gradient.linear(@start, @stop, 270deg, @image);
        }
        .to-top(@start: transparent, @stop: gray, @image: none) 
            when not (@start = null) 
        {
            .gradient.linear(@start, @stop, 0deg, @image);
        }
        .to-left(@start: transparent, @stop: gray, @image: none) 
            when not (@start = null) 
        {
            .gradient.linear(@start, @stop, 90deg, @image);
        }
        .radial(@inner: transparent, @outer: gray, @image: none) 
            when not (@inner = null) 
        {
            .back(@inner, @image, repeat-x, center);
             background-image: -webkit-gradient(radial, center center, 0, center center, 460, from(@inner), to(@outer));// Chrome, Safari 4+
             background-image: -webkit-radial-gradient(center, ellipse, @inner 0%, @outer 100%);   // Safari 5.1+, Chrome 10+
             background-image:    -moz-radial-gradient(center, ellipse, @inner 0%, @outer 100%);   // Firefox 3.6+
             background-image:         radial-gradient(ellipse at center, @inner 0%, @outer 100%); // W3C
        }
    }

    .rgba (@param) 
        when (@param = null) {}

    .rgba (@hex-color: #fff, @alpha: 0.5) 
        when not (@hex-color = null) 
    { 
        background-color: @hex-color;
        background-color: hsla(hue(@hex-color), saturation(@hex-color), lightness(@hex-color), @alpha); 
    }