//
//  Visual appearance properties

//
//  .back(color, image, repeat, position/backsize, repeat, origin, clip, attachment, [min-width, max-width]);
//   ------------------------------------------------------
//   background-color     |  -color-/transparent/initial/inherit
//   background-image     |  none/url/initial/inherit
//   background-repeat    |  repeat/repeat-x/repeat-y/no-repeat/initial/inherit
//   background-position  |  center/left top/xpos ypos/initial/inherit

.back(@color:_, @image:_, @position-s-backsize:_, @repeat:_, @origin:_, @clip:_, @attachment:_, @min-width:_, @max-width:_) {
    
    @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

    @1: if((not (@color=_)); if((isstring(@color)); url('@{color}'); @color));
    @2: if((not (@image=_)); @1 if((isstring(@image)); url('@{image}'); @image); @1);
    @3: if((not (@position-s-backsize=_)); @2 @position-s-backsize; @2);
    @4: if((not (@repeat=_)); @3 @repeat; @3);
    @5: if((not (@origin=_)); @4 @origin; @4);
    @6: if((not (@clip=_)); @5 @clip; @5);
    @args: if((not (@attachment=_)); @6 @attachment; @6);

    & when not (@color=_) and (@query=_) {
        background: @args;
    }

    & when not (@query=_) {
        .mixins(
            @query; 
            @back: @color, @image, @position-s-backsize, @repeat, @origin, @clip, @attachment;
        );
    }
}

//
//  .color(color, background-color, border-color, [min-width, max-width]);
//   ------------------------------------------------------
//   color             |  -color-/initial/inherit
//   background-color  |  -color-/transparent/initial/inherit
//   border-color      |  -color-/transparent/initial/inherit

.color(@color:_, @back-color:_, @border-color:_, @min-width:_, @max-width:_) {
    
    @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

    & when not (@color=_) and (@query=_) {
        color: @color;
    }

    & when not (@back-color=_) and (@query=_) {
        background-color: @back-color;
    }

    & when not (@border-color=_) and (@query=_) {
        border-color: @border-color;
    }

    & when not (@query=_) {
        .mixins(
            @query; 
            @color: @color, @back-color, @border-color;
        );
    }
}

//
//  .gradient(gradient, start, stop1, stop2, stop3, [min-width, max-width])
//   ------------------------------------------------------
//   gradient         |  linear/-angle-/to-top/to-bottom/to-right/to-left  radial/ellipse/circle
//   start/stop       |  color + [position]

.gradient(@grad:_, @start:_, @stop1:_, @stop2:_, @stop3:_, @min-width:_, @max-width:_) {
    
    @mode: if((@grad=radial) or (@grad=ellipse) or (@grad=circle); radial; linear);
    
    @a0: if((@grad=_) or (@grad=linear); 180deg; @grad);
    @a1: if((@a0=to-left);   270deg; @a0);
    @a2: if((@a1=to-bottom); 180deg; @a1);
    @a3: if((@a2=to-right);   90deg; @a2);
    @angle: if((@a3=to-top);   0deg; @a3);
    
    @shape: if((@grad=radial); circle; ellipse);

    @s1: if(not (@stop1=_); @stop1);
    @s2: if(not (@stop2=_); @s1, @stop2; @s1);
    @stops: if(not (@stop3=_); @s2, @stop3; @s2);

    @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

    & when (iscolor(extract(@grad, 1))) and (iscolor(extract(@start, 1))) and (@stop1=_) and (@query=_) {
        .gradient(linear, @grad, @start);
    }

    & when not (@grad=_) and not (@mode=radial) and not (@start=_) and not (@stop1=_) and (@query=_) {
        background-image: -webkit-linear-gradient(@angle, @start, @stops);  // Safari 5.1+, Chrome 10+
        background-image:    -moz-linear-gradient(@angle, @start, @stops);  // Firefox 3.6+
        background-image:         linear-gradient(@angle, @start, @stops);  // IE10
    }
    
    & when not (@grad=_) and (@mode=radial) and not (@start=_) and not (@stop1=_) and (@query=_) {
        background-image: -webkit-radial-gradient(center, @shape, @start, @stops);  // Safari 5.1+, Chrome 10+
        background-image:    -moz-radial-gradient(center, @shape, @start, @stops);   // Firefox 3.6+
        background-image:       radial-gradient(@shape at center, @start, @stops);
    }

    & when not (@query=_) {
        .mixins(
            @query; 
            @gradient: @grad, @start, @stop1, @stop2, @stop3
        );
    }
}

//
//  .shadow(spread, color, alpha, inset)
//   ------------------------------------------------------
//   spread     |  none/h-offset v-offset blur/inset/initial/inherit
//   color      |  -color-/transparent/initial/inherit
//   alpha      |  percentage [0-100%]
//   inset      |  inner shadow

.shadow(@spread:_, @color:_, @alpha:_, @inset:_, @min-width:_, @max-width:_) {
    
    @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

    & when not (@spread=_) and not (@color=_) and (@query=_) {
        @amount: if(not (@alpha=_); @alpha/1; 100%);
        @rgba: fade(@color, @amount);
        @mode: if(not (@inset=_); @rgba, inset; @rgba);

        -webkit-box-shadow: @spread @mode;  // Android 2.3+, iOS 4.0.2-4.2
                box-shadow: @spread @mode;  // Chrome 6+, Firefox 4+, IE 9+
    }

    & when not (@query=_) {
        .mixins(
            @query; 
            @shadow: @spread, @color, @alpha, @inset;
        );
    }
}
