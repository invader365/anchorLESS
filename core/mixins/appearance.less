//
// Appearance

//
//.appearance(@appearance, [@min-width-query, @max-width-query])

.appearance(@appearance) 
    when (@appearance=null) {}

.appearance(@appearance:_, @min-width-query:_, @max-width-query:_)
    when not (@appearance=null) and (@appearance= _) and (@min-width-query=_) and (@max-width-query=_)
{
    .appearance(normal)
}

.appearance(@appearance:_, @min-width-query:_, @max-width-query:_)
    when not (@appearance=null) and not (@appearance= _) and (@min-width-query=_) and (@max-width-query=_)
{
    -webkit-appearance: @appearance;
       -moz-appearance: @appearance;
            appearance: @appearance;
}

.appearance(@appearance:_, @min-width-query:_, @max-width-query:_)
    when (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (max-width: @max-width-query) {
        .appearance(@appearance)
    }
}

.appearance(@appearance:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) {
        .appearance(@appearance)
    }
}

.appearance(@appearance:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
        .appearance(@appearance)
    }
}

//
// .backface(@visibility, [@min-width-query, @max-width-query])

.backface(@visibility) 
    when (@visibility=null) {}

.backface(@visibility:_, @min-width-query:_, @max-width-query:_)
    when not (@visibility=null) and (@visibility=_) and (@min-width-query=_) and (@max-width-query=_)
{
    .backface(visible)
}

.backface(@visibility:_, @min-width-query:_, @max-width-query:_)
    when not (@visibility=null) and not (@visibility=_) and (@min-width-query=_) and (@max-width-query=_)
{
    -webkit-backface-visibility: @visibility;
       -moz-backface-visibility: @visibility;
            backface-visibility: @visibility;
}

.backface(@visibility:_, @min-width-query:_, @max-width-query:_)
    when (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (max-width: @max-width-query) {
        .backface(@visibility)
    }
}

.backface(@visibility:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) {
        .backface(@visibility)
    }
}

.backface(@visibility:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
        .backface(@visibility)
    }
}

//
// .box-sizing (@box-model, [@min-width-query, @max-width-query])

.box-sizing(@box-model) 
    when (@box-model=null) {}

.box-sizing (@box-model:_, @min-width-query:_, @max-width-query:_)
    when not (@box-model=null) and (@box-model=_) and (@min-width-query=_) and (@max-width-query=_)
{
    .box-sizing(content-box)
}

.box-sizing (@box-model:_, @min-width-query:_, @max-width-query:_)
    when not (@box-model=null) and not (@box-model=_) and (@min-width-query=_) and (@max-width-query=_)
{
    -webkit-box-sizing: @box-model;    // Safari 5
       -moz-box-sizing: @box-model;    // Firefox 19
            box-sizing: @box-model;    // IE 8+
}

.box-sizing(@box-model:_, @min-width-query:_, @max-width-query:_)
    when (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (max-width: @max-width-query) {
        .box-sizing(@box-model)
    }
}

.box-sizing(@box-model:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) {
        .box-sizing(@box-model)
    }
}

.box-sizing(@box-model:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
        .box-sizing(@box-model)
    }
}

//
// .display(@display, [@min-width-query, @max-width-query])

.display(@param) 
    when (@param=null) {}

.display(@display:_, @min-width-query:_, @max-width-query:_) 
    when not (@display=null) and (@display=_) and (@min-width-query=_) and (@max-width-query=_)
{
    .display(none);
}

.display(@display:_, @min-width-query:_, @max-width-query:_) 
    when not (@display=null) and not (@display=_) and (@min-width-query=_) and (@max-width-query=_)
{
    display: @display;
}

.display(@display:_, @min-width-query:_, @max-width-query:_)
    when (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (max-width: @max-width-query) {
        .display(@display)
    }
}

.display(@display:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) {
        .display(@display)
    }
}

.display(@display:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
        .display(@display)
    }
}

//
// .opacity(@opacity, [@min-width-query, @max-width-query])
    
.opacity(@opacity) 
    when (@opacity=null) {}

.opacity(@opacity:_, @min-with-query:_, @max-with-query:_)
    when not (@opacity=null) and (@opacity=_) and (@min-with-query=_) and (@max-with-query=_) 
{
    opacity: 0;
    filter: ~"alpha(opacity=0)";
}

.opacity(@opacity:_, @min-with-query:_, @max-with-query:_)
    when not (@opacity=null) and not (@opacity=_) and (@min-with-query=_) and (@max-with-query=_) 
{
    @filter: @opacity * 100;
    opacity: @opacity;
    filter: ~"alpha(opacity=@{filter})";
}

.opacity(@opacity:_, @min-width-query:_, @max-width-query:_)
    when (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (max-width: @max-width-query) {
        .opacity(@opacity)
    }
}

.opacity(@opacity:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) {
        .opacity(@opacity)
    }
}

.opacity(@opacity:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
        .opacity(@opacity)
    }
}

//
// .overflow(@overflow-x, @overflow-y, [@min-width-query, @max-width-query])

.overflow(@overflow-x)
    when (@overflow-x=null) {}

.overflow(@overflow-x:_, @overflow-y:_, @min-width-query:_, @max-width-query:_)
    when not (@overflow-x=null) and (@overflow-x=_) and (@overflow-y=_) and (@min-width-query=_) and (@max-width-query=_)
{
    overflow: visible;
    -webkit-overflow-scrolling: touch;
}

.overflow(@overflow-x:_, @overflow-y:_, @min-width-query:_, @max-width-query:_)
    when not (@overflow-x=null) and not (@overflow-x=_) and not (@overflow-y=_) and (@min-width-query=_) and (@max-width-query=_)
{
    overflow-x: @overflow-x;
    overflow-y: @overflow-y;
    -webkit-overflow-scrolling: touch;
}

.overflow(@overflow-x:_, @overflow-y:_, @min-width-query:_, @max-width-query:_)
    when not (@overflow-x=null) and (@overflow-x=_) and not (@overflow-y=_) and (@min-width-query=_) and (@max-width-query=_)
{
    overflow-y: @overflow-y;
    -webkit-overflow-scrolling: touch;
}

.overflow(@overflow-x:_, @overflow-y:_, @min-width-query:_, @max-width-query:_) 
    when not (@overflow-x=null) and not (@overflow-x=_) and (@overflow-y=_) and (@min-width-query=_) and (@max-width-query=_)
{
    overflow-x: @overflow-x;
    -webkit-overflow-scrolling: touch;
}

.overflow(@overflow-x:_, @overflow-y:_, @min-width-query:_, @max-width-query:_)
    when (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (max-width: @max-width-query) {
        .overflow(@overflow-x, @overflow-y)
    }
}

.overflow(@overflow-x:_, @overflow-y:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) {
        .overflow(@overflow-x, @overflow-y)
    }
}

.overflow(@overflow-x:_, @overflow-y:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
        .overflow(@overflow-x, @overflow-y)
    }
}

//
// .placeholder(@property, @value, [@min-width-query, @max-width-query])

.placeholder(@property) 
    when (@property=null) {}

.placeholder(@property:_, @value:_, @min-width-query:_, @max-width-query:_)
    when not (@property=_) and not (@property=_) and not (@value=_) and (@min-width-query=_) and (@max-width-query=_)
{
    &::-webkit-input-placeholder {  // Chrome, Safari, Edge
        @{property}: @value;
    }
    &:-ms-input-placeholder {       // IE 10+
        @{property}: @value;
    }
    &::-moz-placeholder {           // Firefox 19+
        @{property}: @value;
    } 
    &::placeholder {
        @{property}: @value;
    } 
}

.placeholder(@property:_, @value:_, @min-width-query:_, @max-width-query:_)
    when (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (max-width: @max-width-query) {
        .placeholder(@property, @value)
    }
}

.placeholder(@property:_, @value:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) {
        .placeholder(@property, @value)
    }
}

.placeholder(@property:_, @value:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
        .placeholder(@property, @value)
    }
}

//
// .shadow(@spread, @color, [@alpha, @min-width-query, @max-width-query])

.shadow(@spread) 
    when (@spread=null) {}

.shadow(@spread:_, @color:_, @alpha:_, @min-width-query:_, @max-width-query:_) 
    when not (@spread=null) and (@spread=_) and (@min-width-query=_) and (@max-width-query=_)
{
    .shadow(none, transparent, 100%);
}

.shadow(@spread:_, @color:_, @alpha:_, @min-width-query:_, @max-width-query:_) 
    when not (@spread=null) and not (@spread=_) and (@min-width-query=_) and (@max-width-query=_)
{
    @rgba: fade(@color, @alpha/1);
    -webkit-box-shadow: @spread @rgba;  // Android 2.3+, iOS 4.0.2-4.2
            box-shadow: @spread @rgba;  // Chrome 6+, Firefox 4+, IE 9+
}

.shadow(@spread:_, @color:_, @alpha:_, @min-width-query:_, @max-width-query:_)
    when (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (max-width: @max-width-query) {
        .shadow(@spread, @color, @alpha)
    }
}

.shadow(@spread:_, @color:_, @alpha:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) {
        .shadow(@spread, @color, @alpha)
    }
}

.shadow(@spread:_, @color:_, @alpha:_, @min-width-query:_, @max-width-query:_)
    when not (@min-width-query=_) and not (@max-width-query=_)
{
    @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
        .shadow(@spread, @color, @alpha)
    }
}

//
// .shadow.inset(@spread, @color, [@alpha, @min-width-query, @max-width-query])

.shadow {
    .inset(@spread) 
        when (@spread=null) {}

    .inset(@spread:_, @color:_, @alpha:_, @min-width-query:_, @max-width-query:_) 
        when not (@spread=null) and (@spread=_) and (@min-width-query=_) and (@max-width-query=_)
    {
        .shadow.inset(none, transparent, 100%);
    }

    .inset(@spread:_, @color:_, @alpha:_, @min-width-query:_, @max-width-query:_)
        when not (@spread=null) and not (@spread=_) and (@min-width-query=_) and (@max-width-query=_)
    {
        @rgba: fade(@color, @alpha/1);
        -webkit-box-shadow: @spread @rgba inset;  // Android 2.3+, iOS 4.0.2-4.2
                box-shadow: @spread @rgba inset;  // Chrome 6+, Firefox 4+, IE 9+
    }

    .inset(@spread:_, @color:_, @alpha:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_)
    {
        @media all and (max-width: @max-width-query) {
            .shadow.inset(@spread, @color, @alpha)
        }
    }
    
    .inset(@spread:_, @color:_, @alpha:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_)
    {
        @media all and (min-width: @min-width-query) {
            .shadow.inset(@spread, @color, @alpha)
        }
    }
    
    .inset(@spread:_, @color:_, @alpha:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_)
    {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .shadow.inset(@spread, @color, @alpha)
        }
    }
}