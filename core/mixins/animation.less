//
//  Animation and Transition

//
//  .animation(name, duration, timing-function, delay, iteration-count, direction, fill-mode, play-state, [min-width, max-width]);
//   ------------------------------------------------------
//   name            |  name of the @keyframes animation
//   duration        |  -time-/initial/inherit
//   timing-function |  linear/ease/ease-in/ease-out/ease-in-out/step-start/step-end/steps(int,start/end)/initial/inherit
//   delay           |  -time-/initial/inherit
//   iteration-count |  -number-/infinite/initial/inherit
//   direction       |  normal/reverse/alternate/alternate-reverse/initial/inherit
//   fill-mode       |  none/forwards/backwards/both/initial/inherit
//   play-state      |  paused/running/initial/inherit


.animation(@name:_, @duration:_, @timing:_, @delay:_, @iteration:_, @direction:_, @fill-mode:_, @play-state:_, @min-width:_, @max-width:_) {

    @1: if((not (@name=_)); @name);
    @2: if((not (@duration=_)); @1 @duration; @1);
    @3: if((not (@timing=_)); @2 @timing; @2);
    @4: if((not (@delay=_)); @3 @delay; @3);
    @5: if((not (@iteration=_)); @4 @iteration; @4 1); // defaults to 1
    @6: if((not (@direction=_)); @5 @direction; @5);
    @7: if((not (@fill-mode=_)); @6 @fill-mode; @6);
    @args: if((not (@play-state=_)); @7 @play-state; @7);
    
    @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

    & when not (@name=_) and not (@duration=_) and (@query=_) {
        -webkit-animation: @args;  // Safari, Chrome
           -moz-animation: @args;
            -ms-animation: @args;
                animation: @args;
    }

    & when not (@query=_) {
        .mixins(
            @query; 
            @animation: @name, @duration, @timing, @delay, @iteration, @direction, @fill-mode, @play-state;
        );
    }
}

//
//  .transition(property, duration, timing-function, delay, [min-width, max-width])
//   ------------------------------------------------------
//   property        |  none/all/-property-/initial/inherit
//   duration        |  -time-/initial/inherit
//   timing-function |  linear/ease/ease-in/ease-out/ease-in-out/step-start/step-end/steps(int,start/end)/initial/inherit
//   delay           |  -time-/initial/inherit

.transition(@property:_, @duration:_, @timing:_, @delay:_, @min-width:_, @max-width:_) {

    @1: if((not (@property=_)); @property);
    @2: if((not (@duration=_)); @1 @duration; @1 0s); // defaults to 0s
    @3: if((not (@timing=_)); @2 @timing; @2);
    @args: if((not (@delay=_)); @3 @delay; @3);

    @query: if((@min-width=_ and @max-width=_); _; @min-width, @max-width);

    & when not (@property=_) and (@query=_) {
        -webkit-transition: @args;
                transition: @args;
    }

    & when not (@query=_) {
        .mixins(
            @query; 
            @transition: @property, @duration, @timing, @delay;
        );
    }
}
