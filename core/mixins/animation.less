//
//  Animation and Transition

//
//  .animation(@name, @duration, @timing-function, @delay, @iteration-count, @direction, @fill-mode, @play-state, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @name            :  name of the @keyframes animation
//   @duration        :  -time-|initial|inherit
//   @timing-function :  linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start/end)|initial|inherit
//   @delay           :  -time-|initial|inherit
//   @iteration-count :  -number-|infinite|initial|inherit
//   @direction       :  normal|reverse|alternate|alternate-reverse|initial|inherit
//   @fill-mode       :  none|forwards|backwards|both|initial|inherit
//   @play-state      :  paused|running|initial|inherit

.animation(@name:_, @duration:_, @timing:_, @delay:_, @iteration:_, @direction:_, @fill-mode:_, @play-state:_, @min-query:_, @max-query:_) {

    @1: if((not (@name=_)); @name);
    @2: if((not (@duration=_)); @1 @duration; @1);
    @3: if((not (@timing=_)); @2 @timing; @2);
    @4: if((not (@delay=_)); @3 @delay; @3);
    @5: if((not (@iteration=_)); @4 @iteration; @4);
    @6: if((not (@direction=_)); @5 @direction; @5);
    @7: if((not (@fill-mode=_)); @6 @fill-mode; @6);
    @args: if((not (@play-state=_)); @7 @play-state; @7);
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@name=_) and not (@duration=_) and (@minmax=_) {
        -webkit-animation: @args;  // Safari, Chrome
           -moz-animation: @args;
            -ms-animation: @args;
                animation: @args;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @animation: @name, @duration, @timing, @delay, @iteration, @direction, @fill-mode, @play-state;
        );
    }
    
    .parse(@args) {

        .loop(@i:8) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .animation(.loop[$1], .loop[$2], .loop[$3], .loop[$4], .loop[$5], .loop[$6], .loop[$7], .loop[$8]);
    }
}

//
//  .transition(@property, @duration, @timing-function, @delay, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @property        :  none|all|-property-|initial|inherit
//   @duration        :  -time-|initial|inherit
//   @timing-function :  linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start/end)|initial|inherit
//   @delay           :  -time-|initial|inherit

.transition(@property:_, @duration:_, @timing:_, @delay:_, @min-query:_, @max-query:_) {

    @1: if((not (@property=_)); @property);
    @2: if((not (@duration=_)); @1 @duration; @1);
    @3: if((not (@timing=_)); @2 @timing; @2);
    @args: if((not (@delay=_)); @3 @delay; @3);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@property=_) and not (@duration=_) and (@minmax=_) {
        -webkit-transition: @args;
                transition: @args;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @transition: @property, @duration, @timing, @delay;
        );
    }
    
    .parse(@args) {

        .loop(@i:4) when (@i > 0) {
            .loop((@i - 1));
            @{i}: if(length(@args) >= @i; extract(@args, @i); _);
        }
        
        .transition(.loop[$1], .loop[$2], .loop[$3], .loop[$4]);
    }
}
