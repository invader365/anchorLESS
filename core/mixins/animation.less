//
//  Animation and Transition

//
// .animation(@name, @duration, @ease, @delay, @iteration, @direction, [@min-width-query, @max-width-query])

.animation(@name) 
    when (@name=null) {}

.animation(@name:_, @duration:0, @ease:ease, @delay:0, @iteration:1, @direction:normal, @min-width-query:_, @max-width-query:_) {
    & when not (@name=null) and (@name=_) and (@min-width-query=_) and (@max-width-query=_) {
        .animation(none, 0, ease, 0, 1, normal)
    }

    & when not (@name=null) and not (@name=_) and (@min-width-query=_) and (@max-width-query=_) {
        -webkit-animation: @name @duration @ease @delay @iteration @direction;  // Safari, Chrome
           -moz-animation: @name @duration @ease @delay @iteration @direction;
            -ms-animation: @name @duration @ease @delay @iteration @direction;
                animation: @name @duration @ease @delay @iteration @direction;
    }

    & when not (@min-width-query=_), not (@max-width-query=_) {
        .mixins(
            @min-max: @min-width-query, @max-width-query;
            @animation: @name, @duration, @ease, @delay, @iteration, @direction;
        );
    }
}

//
// .animation.delay(@delay)
// .animation.direction(@direction)
// .animation.duration(@duration)
// .animation.ease(@ease)
// .animation.fill-mode(@fill-mode)
// .animation.iteration(@iteration)
// .animation.name(@name)
// .animation.play-state(@play-state)

.animation {
    .delay(@delay) {
        -webkit-animation-delay: @delay;
           -moz-animation-delay: @delay;
             -o-animation-delay: @delay;
                animation-delay: @delay;
    }

    .direction(@direction) {
        -webkit-animation-direction: @direction;
           -moz-animation-direction: @direction;
             -o-animation-direction: @direction;
                animation-direction: @direction;
    }

    .duration(@duration) {
        -webkit-animation-duration: @duration;
           -moz-animation-duration: @duration;
             -o-animation-duration: @duration;
                animation-duration: @duration;
    }

    .ease(@ease) {
        -webkit-animation-timing-function: @ease;
           -moz-animation-timing-function: @ease;
             -o-animation-timing-function: @ease;
                animation-timing-function: @ease;
    }

    .fill-mode(@fill-mode) {
        -webkit-animation-fill-mode: @fill-mode;
           -moz-animation-fill-mode: @fill-mode;
             -o-animation-fill-mode: @fill-mode;
                animation-fill-mode: @fill-mode;
    }

    .iteration(@iteration) {
        -webkit-animation-iteration-count: @iteration;
           -moz-animation-iteration-count: @iteration;
             -o-animation-iteration-count: @iteration;
                animation-iteration-count: @iteration;
    }

    .name(@name) {
        -webkit-animation-name: @name;
           -moz-animation-name: @name;
             -o-animation-name: @name;
                animation-name: @name;
    }

    .play-state(@play-state) {
        -webkit-animation-play-state: @play-state;
           -moz-animation-play-state: @play-state;
             -o-animation-play-state: @play-state;
                animation-play-state: @play-state;
    }
}

//
// .transition(@property, @duration, @function, @delay, [@min-width-query, @max-width-query])

.transition(@property) 
    when (@property=null) {}

.transition(@property: all, @duration: 0s, @function: ease, @delay: 0s, @min-width-query:_, @max-width-query:_) {
    & when not (@property=null) and (@property=_) and (@min-width-query=_) and (@max-width-query=_) {
        .transition(all, 0s, ease, 0s);
    }

    & when not (@property=null) and (@property=_) and (@min-width-query=_) and (@max-width-query=_) {
        -webkit-transition: @property @duration @function @delay;
                transition: @property @duration @function @delay;
    }

    & when not (@min-width-query=_), not (@max-width-query=_) {
        .mixins(
            @min-max: @min-width-query, @max-width-query;
            @transition: @property, @duration, @function, @delay;
        );
    }
}
