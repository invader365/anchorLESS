//
//  Animation and Transition

//
//  .animation(@name, @duration, @timing-function, @delay, @iteration-count, @direction, @fill-mode, @play-state, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @name            :  name of the @keyframes animation
//   @duration        :  -time-|initial|inherit
//   @timing-function :  linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start/end)|initial|inherit
//   @delay           :  -time-|initial|inherit
//   @iteration-count :  -number-|infinite|initial|inherit
//   @direction       :  normal|reverse|alternate|alternate-reverse|initial|inherit
//   @fill-mode       :  none|forwards|backwards|both|initial|inherit
//   @play-state      :  paused|running|initial|inherit

.animation(@name:_, @duration:_, @timing:_, @delay:_, @iteration:_, @direction:_, @fill-mode:_, @play-state:_, @min-query:_, @max-query:_) {

    @1: if(not (@name=_); @name);
    @2: if(@duration=_;   @1; @1 @duration);
    @3: if(@timing=_;     @2; @2 @timing);
    @4: if(@delay=_;      @3; @3 @delay);
    @5: if(@iteration=_;  @4; @4 @iteration);
    @6: if(@direction=_;  @5; @5 @direction);
    @7: if(@fill-mode=_;  @6; @6 @fill-mode);
    @args: if(@play-state=_; @7; @7 @play-state);
    
    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@name=_) and (@minmax=_) {
        -webkit-animation: @args;  // Safari, Chrome
           -moz-animation: @args;
            -ms-animation: @args;
                animation: @args;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @animation: @name, @duration, @timing, @delay, @iteration, @direction, @fill-mode, @play-state;
        );
    }
    
    & when (@name=fade-in)      { ._fade-in(); }
    
    & when (@name=fade-out)     { ._fade-out(); }
    
    & when (@name=shake)        { ._shake(); }
    
    & when (@name=slide-down)   { ._slide-down(); }
    
    & when (@name=slide-up)     { ._slide-up(); }

    & when (@name=zoom-in)      { ._zoom-in(); }
    
    & when (@name=zoom-out)     { ._zoom-out(); }
}

//
//  .transition(@property, @duration, @timing-function, @delay, [@min-query, @max-query]);
//   ------------------------------------------------------
//   @property        :  none|all|-property-|initial|inherit
//   @duration        :  -time-|initial|inherit
//   @timing-function :  linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start/end)|initial|inherit
//   @delay           :  -time-|initial|inherit

.transition(@property:_, @duration:_, @timing:_, @delay:_, @min-query:_, @max-query:_) {

    @1: if((not (@property=_)); @property);
    @2: if((not (@duration=_)); @1 @duration; @1 1s);
    @3: if((not (@timing=_)); @2 @timing; @2);
    @args: if((not (@delay=_)); @3 @delay; @3);

    @minmax: if((@min-query=_ and @max-query=_); _; @min-query, @max-query);

    & when not (@property=_) and (@minmax=_) {
        -webkit-transition: @args;
             -o-transition: @args;
                transition: @args;
    }

    & when not (@minmax=_) {
        .mixins(
            @query: @minmax;
            @transition: @property, @duration, @timing, @delay;
        );
    }
}
