//  Tables

    .table {
        .border (@width: 0, @style: none, @color: none) when not (@width = skip) {
            & tr th,
            & tr td             { border-width: @width; border-style: @style; border-color: @color; }
        }
        .border-outer (@width: 0, @style: none, @color: none) when not (@width = skip) {
            &                   { border-width: @width; border-style: @style; border-color: @color; }
        }
        .color (@color: inherit, @back: skip, @rows: all) when not (@color = skip) and not (@rows = all) {
            & tr:nth-child(@{rows}) td,
            & tr.@{rows} td     { color: @color; .back.color(@back) }
        }
        .color (@color: inherit, @back: skip, @rows: all) when not (@color = skip) and (@rows = all) {
            & tr td             { color: @color; .back.color(@back); }
        }
        .font (@font: normal 1em, @family: inherit) when not (@font = skip) {
            & tr td             { .font(@font, @family); }
        }
        .head-color (@color: inherit, @back: skip) when not (@color = skip) {
            & tr th             { .color(@color, @back); }
        }
        .head-font (@font: normal 1em, @family: inherit) when not (@font = skip) {
            & tr th             { .font(@font, @family); }
        }
        .padding (@padding: 0) when not (@padding = skip) {
            & tr th,
            & tr td             { padding: @padding; }
        }
        .rounded (@radius: none) when not (@radius = skip) {  
            &                               { .re-rounded(@radius){ .rounded(@radius); }; }  // Double name stack Fix
            & tr:first-child th:first-child { .rounded.left-top(@radius); }
            & tr:first-child th:last-child  { .rounded.right-top(@radius); }
            & tr:last-child  td:first-child { .rounded.left-bottom(@radius); }
            & tr:last-child  td:last-child  { .rounded.right-bottom(@radius); }
        }
    }