//
// Deprecated mixins wonÂ´t be available as of v2+

//
//  Use .position(absolute, top, right, bottom, left)

.absolute {
    .align (@top: auto, @right: auto, @bottom: auto, @left: auto, @query: 0) 
        when not (@top = skip) and (@query = 0) 
    {
        .position.align(absolute, @top, @right, @bottom, @left);
    }
    .left-top (@left: auto, @top: auto) 
        when not (@left = skip) 
    {
        .position.left-top(absolute, @left, @top);
    }
    .left-bottom (@left: auto, @bottom: auto) 
        when not (@left = skip) 
    {
        .position.left-bottom(absolute, @left, @bottom);
    }
    .right-top (@right: auto, @top: auto) 
        when not (@right = skip) 
    {
        .position.right-top(absolute, @right, @top);
    }
    .right-bottom (@right: auto, @bottom: auto) 
        when not (@right = skip) 
    {
        .position.right-bottom(absolute, @right, @bottom);
    }
}

.absolute {
    .align (@top: auto, @right: auto, @bottom: auto, @left: auto, @query: 0) 
        when (@query > 0) 
    {
        @media all and (min-width: @query) {
            .absolute.align(@top, @right, @bottom, @left);
        }
    }
}

//
//  Use .align.top-left(@top, left)

.align {
    .left-top(@left) 
        when (@left=null) {}

    .left-top(@left: auto, @top: auto) 
        when not (@left=null) 
    {
        left: @left;
        top: @top; 
    }
    .left-bottom(@left) 
        when (@left=null) {}

    .left-bottom (@left: auto, @bottom: auto) 
        when not (@left=null) 
    {
        left: @left;
        bottom: @bottom;
    }
    .right-top(@right) 
        when (@right=null) {}

    .right-top (@right: auto, @top: auto) 
        when not (@right=null) 
    {
        right: @right;
        top: @top;
    }
    .right-bottom(@right) 
        when (@right=null) {}

    .right-bottom (@right: auto, @bottom: auto) 
        when not (@right=null) 
    {
        right: @right; 
        bottom: @bottom;
    }
}

//
// .animation.delay(@delay)
// .animation.direction(@direction)
// .animation.duration(@duration)
// .animation.ease(@ease)
// .animation.fill-mode(@fill-mode)
// .animation.iteration(@iteration)
// .animation.name(@name)

.animation {
    .delay(@delay) {
        -webkit-animation-delay: @delay;
           -moz-animation-delay: @delay;
             -o-animation-delay: @delay;
                animation-delay: @delay;
    }

    .direction(@direction) {
        -webkit-animation-direction: @direction;
           -moz-animation-direction: @direction;
             -o-animation-direction: @direction;
                animation-direction: @direction;
    }

    .duration(@duration) {
        -webkit-animation-duration: @duration;
           -moz-animation-duration: @duration;
             -o-animation-duration: @duration;
                animation-duration: @duration;
    }

    .ease(@ease) {
        -webkit-animation-timing-function: @ease;
           -moz-animation-timing-function: @ease;
             -o-animation-timing-function: @ease;
                animation-timing-function: @ease;
    }

    .fill-mode(@fill-mode) {
        -webkit-animation-fill-mode: @fill-mode;
           -moz-animation-fill-mode: @fill-mode;
             -o-animation-fill-mode: @fill-mode;
                animation-fill-mode: @fill-mode;
    }

    .iteration(@iteration) {
        -webkit-animation-iteration-count: @iteration;
           -moz-animation-iteration-count: @iteration;
             -o-animation-iteration-count: @iteration;
                animation-iteration-count: @iteration;
    }

    .name(@name) {
        -webkit-animation-name: @name;
           -moz-animation-name: @name;
             -o-animation-name: @name;
                animation-name: @name;
    }
}

//
//.appearance(@appearance, [@min-width-query, @max-width-query])

.appearance(@appearance) 
    when (@appearance=null) {}

.appearance(@appearance:_, @min-width-query:_, @max-width-query:_) {
    & when not (@appearance=null) and (@appearance= _) and (@min-width-query=_) and (@max-width-query=_) {
        .appearance(normal)
    }

    & when not (@appearance=null) and not (@appearance= _) and (@min-width-query=_) and (@max-width-query=_) {
        -webkit-appearance: @appearance;
           -moz-appearance: @appearance;
                appearance: @appearance;
    }

    & when not (@min-width-query=_), not (@max-width-query=_) {
        .mixins(
            @min-max: @min-width-query, @max-width-query;
            @animation: @appearance;
        );
    }
}

//
// .back.attach(@attachment, [@min-width-query, @max-width-query])
// .back.color(@color, [@min-width-query, @max-width-query])
// .back.clip(@clip, [@min-width-query, @max-width-query])
// .back.image(@path, [@min-width-query, @max-width-query])
// .back.origin(@origin, [@min-width-query, @max-width-query])
// .back.position(@position, [@min-width-query, @max-width-query])
// .back.repeat(@repeat, [@min-width-query, @max-width-query])
// .back.size(@size, [@min-width-query, @max-width-query])

._back {
    .attach(@attachment) 
        when (@attachment=null) {}

    .attach(@attachment:_, @min-width-query:_, @max-width-query:_) 
        when not (@attachment=null) and (@attachment=_) and (@min-width-query=_) and (@max-width-query=_) { 
        .back.attach(scroll); 
    }

    .attach(@attachment:_, @min-width-query:_, @max-width-query:_) 
        when not (@attachment=null) and not (@attachment=_) and (@min-width-query=_) and (@max-width-query=_) { 
        background-attachment: @attachment; 
    }

    .attach(@attachment:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (max-width: @max-width-query) {
            .back.attach(@attachment);
        } 
    }

    .attach(@attachment:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) {
        @media all and (min-width: @min-width-query) {
            .back.attach(@attachment);
        } 
    }

    .attach(@attachment:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .back.attach(@attachment);
        } 
    }

    .color(@color) 
        when (@color=null) {}

    .color(@color:_, @min-width-query:_, @max-width-query:_) 
        when not (@color=null) and (@color=_) and (@min-width-query=_) and (@max-width-query=_) {
        .back.color(transparent); 
    }

    .color(@color:_, @min-width-query:_, @max-width-query:_) 
        when not (@color=null) and not (@color=_) and (@min-width-query=_) and (@max-width-query=_) {
        background-color: @color; 
    }

    .color(@color:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (max-width: @max-width-query) {
            .back.color(@color);
        } 
    }

    .color(@color:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) {
        @media all and (min-width: @min-width-query) {
            .back.color(@color);
        } 
    }

    .color(@color:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .back.color(@color);
        } 
    }

    .clip(@clip) 
        when (@clip=null) {}

    .clip (@clip:_, @min-width-query:_, @max-width-query:_) 
        when not (@clip=null) and (@clip=_) and (@min-width-query=_) and (@max-width-query=_) {
        .back.clip(border)
    }

    .clip (@clip:_, @min-width-query:_, @max-width-query:_) 
        when not (@clip=null) and not (@clip=_) and (@min-width-query=_) and (@max-width-query=_) {
        -webkit-background-clip: @clip;           // Safari 4? Chrome 6?
           -moz-background-clip: @clip;           // Firefox 3.6
                background-clip: ~'@{clip}-box';  // Firefox 4, Safari 5, Opera 10, IE9
    }

    .clip(@clip:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (max-width: @max-width-query) {
            .back.clip(@clip);
        } 
    }

    .clip(@clip:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) {
        @media all and (min-width: @min-width-query) {
            .back.clip(@clip);
        } 
    }

    .clip(@clip:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .back.clip(@clip);
        } 
    }

    .image(@path) 
        when (@path=null) {}

    .image(@path:none, @min-width-query:_, @max-width-query:_)
        when not (@path=null) and (@path=none) and (@min-width-query=_) and (@max-width-query=_) {
        background-image: none; 
    }

    .image(@path:none, @min-width-query:_, @max-width-query:_)
        when not (@path=null) and not (@path=none) and (@min-width-query=_) and (@max-width-query=_) { 
        background-image: url('@{path}'); 
    }

    .image(@path:none, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (max-width: @max-width-query) {
            .back.image(@path);
        } 
    }

    .image(@path:none, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) {
        @media all and (min-width: @min-width-query) {
            .back.image(@path);
        } 
    }

    .image(@path:none, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .back.image(@path);
        } 
    }

    .origin(@origin) 
        when (@origin=null) {}

    .origin(@origin:_, @min-width-query:_, @max-width-query:_)
        when not (@origin=null) and (@origin=_) and (@min-width-query=_) and (@max-width-query=_) {
        .back.origin(padding-box); 
    }

    .origin (@origin:_, @min-width-query:_, @max-width-query:_)
        when not (@origin=null) and not (@origin=_) and (@min-width-query=_) and (@max-width-query=_) {    
        -webkit-background-origin: @origin;  // Safari 4? Chrome 6?
           -moz-background-origin: @origin;  // Firefox 3.6
                background-origin: @origin;  // Firefox 4, Safari 5, Opera 10, IE9
    }

    .origin(@origin:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (max-width: @max-width-query) {
            .back.origin(@origin);
        } 
    }

    .origin(@origin:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) {
        @media all and (min-width: @min-width-query) {
            .back.origin(@origin);
        } 
    }

    .origin(@origin:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .back.origin(@origin);
        } 
    }

    .position(@position) 
        when (@position=null) {}

    .position(@position:_, @min-width-query:_, @max-width-query:_) 
        when not (@position=null) and (@position=_) and (@min-width-query=_) and (@max-width-query=_) { 
        .back.position(0 0);
    }

    .position(@position:_, @min-width-query:_, @max-width-query:_) 
        when not (@position=null) and not (@position=_) and (@min-width-query=_) and (@max-width-query=_) { 
        background-position: @position;
    }

    .position(@position:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (max-width: @max-width-query) {
            .back.position(@position);
        } 
    }

    .position(@position:none, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) {
        @media all and (min-width: @min-width-query) {
            .back.position(@position);
        } 
    }

    .position(@position:none, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .back.position(@position);
        } 
    }

    .repeat(@repeat) 
        when (@repeat=null) {}

    .repeat(@repeat:_, @min-width-query:_, @max-width-query:_)
        when not (@repeat=null) and (@repeat=_) and (@min-width-query=_) and (@max-width-query=_) { 
        .back.repeat(repeat); 
    }

    .repeat(@repeat:_, @min-width-query:_, @max-width-query:_) 
        when not (@repeat=null) and not (@repeat=_) and (@min-width-query=_) and (@max-width-query=_) { 
        background-repeat: @repeat; 
    }

    .repeat(@repeat:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (max-width: @max-width-query) {
            .back.repeat(@repeat);
        } 
    }

    .repeat(@repeat:none, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) {
        @media all and (min-width: @min-width-query) {
            .back.repeat(@repeat);
        } 
    }

    .repeat(@repeat:none, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .back.repeat(@repeat);
        } 
    }

    .size(@size) 
        when (@size=null) {}

    .size(@size:_, @min-width-query:_, @max-width-query:_)
        when not (@size=null) and (@size=_) and (@min-width-query=_) and (@max-width-query=_) { 
        .back.size(auto);
    }

    .size(@size:_, @min-width-query:_, @max-width-query:_)
        when not (@size=null) and not (@size=_) and (@min-width-query=_) and (@max-width-query=_) { 
        -webkit-background-size: @size;  // Safari 3.0+, Chrome 1.0+
           -moz-background-size: @size;  // Firefox 3.6
                background-size: @size;  // IE 9+
    }

    .size(@size:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (max-width: @max-width-query) {
            .back.size(@size);
        } 
    }

    .size(@size:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) {
        @media all and (min-width: @min-width-query) {
            .back.size(@size);
        } 
    }

    .size(@size:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .back.size(@size);
        } 
    }
}

//
//  Use .back.clip(@back-clip)

.background-clip (@clip: border) 
    when not (@clip = null)
{
    -webkit-background-clip: @clip;           // Safari 4? Chrome 6?
       -moz-background-clip: @clip;           // Firefox 3.6
            background-clip: ~'@{clip}-box';  // Firefox 4, Safari 5, Opera 10, IE9
}

//
//  Use .back.origin(@back-origin)

.background-origin (@orign: padding-box) 
    when not (@orign = null) 
{
    -webkit-background-orign: @orign;  // Safari 4? Chrome 6?
       -moz-background-orign: @orign;  // Firefox 3.6
            background-orign: @orign;  // Firefox 4, Safari 5, Opera 10, IE9
}

//
//  Use .back.size(@back-size)

.background-size (@back-size: auto) 
    when not (@back-size = null) 
{
    -webkit-background-size: @back-size;  // Safari 3.0+, Chrome 1.0+
       -moz-background-size: @back-size;  // Firefox 3.6
            background-size: @back-size;  // IE 9+
}

//
//  Use
// .border(@width, @style, @color [@min-width-query, @max-width-query])
// .border(@width, _, _, [@min-width-query, @max-width-query])
// .border(_, @style, _, [@min-width-query, @max-width-query])
// .border(_, _, @color, [@min-width-query, @max-width-query])

.border {
    .min (@border: 0, @query: 0) when not (@border = null) and (@query = 0) {
        border: @border;
    }
    .width (@width: 0) when not (@width = null) {
        border-width: @width;
    }
    .style (@style: none) when not (@style = null) {
        border-style: @style;
    }
    .color (@color: none) when not (@color = null) {
        border-color: @color;
    }
}

.border { 
    .min (@border: 0, @query: 0) when (@query > 0) {
        @media all and (min-width: @query) {
            .border.min(@border, @query);
        }
    }
}

//
// Deprecated

.columns (@var) 
    when (@var=null) {}
    
.columns (@count: auto, @gap: normal, @width: auto) 
    when not (@count=null)    {
    -webkit-column-count: @count;
        -moz-column-count: @count;
            column-count: @count;
    -webkit-column-gap: @gap;
        -moz-column-gap: @gap;
            column-gap: @gap;
    -webkit-column-width: @width;
        -moz-column-width: @width;
            column-width: @width;
}

//
//  Use .position(fixed, top, right, bottom, left)

.fixed {
    .align (@top: auto, @right: auto, @bottom: auto, @left: auto, @query: 0) 
        when not (@top = skip) and (@query = 0) 
    {
    .position.align(fixed, @top, @right, @bottom, @left);
    }
    .left-top (@left: auto, @top: auto) 
        when not (@left = skip) 
    {
        .position.left-top(fixed, @left, @top);
    }
    .left-bottom (@left: auto, @bottom: auto) 
        when not (@left = skip) 
    {
        .position.left-bottom(fixed, @left, @bottom);
    }
    .right-top (@right: auto, @top: auto) 
        when not (@right = skip) 
    {
        .position.right-top(fixed, @right, @top);
    }
    .right-bottom (@right: auto, @bottom: auto) 
        when not (@right = skip) 
    {
        .position.right-bottom(fixed, @right, @bottom);
    }
}

.fixed {
    .align (@top: auto, @right: auto, @bottom: auto, @left: auto, @query: 0) 
        when (@query > 0) 
    {
        @media all and (min-width: @query) {
            .fixed.align(@top, @right, @bottom, @left);
        }
    }
}

//
// .font-size(@size, [@min-width, @max-width])

.font-size (@param) 
    when (@param=null) {}

.font-size (@size: 1em, @query: 0) 
    when not (@size=null) and (@query=0) 
{
    font-size: @size;
}

.font-size (@font: none, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .font-size(@font);
    } 
}

//
// .gradient.linear(start, stop, degrees, [@min-width-query, @max-width-query])
// .gradient.to-top(start, stop, [@min-width-query, @max-width-query])
// .gradient.to-bottom(start, stop, [@min-width-query, @max-width-query])
// .gradient.to-left(start, stop, [@min-width-query, @max-width-query])
// .gradient.to-right(start, stop, [@min-width-query, @max-width-query])
// .gradient.radial(inner, outer, [@min-width-query, @max-width-query])

.gradient {
    .linear(@start) 
        when (@start=null) {}

    .linear(@start:_, @stop:_, @degrees:180deg, @min-width-query:_, @max-width-query:_)
        when not (@start=null) and (@start=_) and (@stop=_) and (@min-width-query=_)  and (@max-width-query=_) 
    {
        .gradient.linear(white, black, 180deg)
    }

    .linear(@start:_, @stop:_, @degrees:180deg, @min-width-query:_, @max-width-query:_)
        when not (@start=null) and (@start=_) and not (@stop=_) and (@min-width-query=_)  and (@max-width-query=_) 
    {
        .gradient.linear(white, @stop, @degrees)
    }

    .linear(@start, @stop, @degrees:180deg, @min-width-query:_, @max-width-query:_) 
        when not (@start=null) and not (@start=_) and (@stop=_) and (@min-width-query=_) and (@max-width-query=_) {
        .gradient.linear(@start, black, @degrees)
    }

    .linear(@start:_, @stop:_, @degrees:_, @min-width-query:_, @max-width-query:_) 
        when not (@start=null) and not (@start=_) and not (@stop=_) and (@min-width-query=_) and (@max-width-query=_) {
        background-image: -webkit-linear-gradient(@degrees, @start, @stop);  // Safari 5.1+, Chrome 10+
        background-image:   -moz-linear-gradient(@degrees, @start, @stop);   // Firefox 3.6+
        background-image:         linear-gradient(@degrees, @start, @stop);  // IE10
    }

    .linear(@start:_, @stop:_, @degrees:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) 
    {
        @media all and (max-width: @max-width-query) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }

    .linear(@start:_, @stop:_, @degrees:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) {
        @media all and (min-width: @min-width-query) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }

    .linear(@start:_, @stop:_, @degrees:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .gradient.linear(@start, @stop, @degrees)
        }
    }

    .to-bottom (@inner) 
        when (@inner=null) {}

    .to-bottom(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@start=null) and (@start=_) and (@stop=_) and (@min-width-query=_) and (@max-width-query=_) {
        .gradient.to-bottom(white, black);
    }

    .to-bottom(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@start=null) and not (@start=_) and not (@stop=_) and (@min-width-query=_) and (@max-width-query=_) {
        .gradient.linear(@start, @stop, 180deg);
    }
    
    .to-bottom(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) 
    {
        @media all and (max-width: @max-width-query) {
            .gradient.to-bottom(@start, @stop)
        }
    }
    
    .to-bottom(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) 
    {
        @media all and (min-width: @min-width-query) {
            .gradient.to-bottom(@start, @stop)
        }
    }
    
    .to-bottom(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .gradient.to-bottom(@start, @stop)
        }
    }
   
    .to-right(@inner) 
        when (@inner=null) {}

    .to-right(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@start=null) and not (@start=_) and (@min-width-query=_) and (@max-width-query=_) {
        .gradient.to-right(white, black);
    }

    .to-right(@start: transparent, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@start=null) and not (@start=_) and (@min-width-query=_) and (@max-width-query=_) {
        .gradient.linear(@start, @stop, 270deg);
    }

    .to-right(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) 
    {
        @media all and (max-width: @max-width-query) {
            .gradient.to-right(@start, @stop)
        }
    }

    .to-right(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) 
    {
        @media all and (min-width: @min-width-query) {
            .gradient.to-right(@start, @stop)
        }
    }

    .to-right(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .gradient.to-right(@start, @stop)
        }
    }

    .to-top(@inner) 
        when (@inner=null) {}

    .to-top(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@start=null) and (@start=_) and (@min-width-query=_) and (@max-width-query=_) {
        .gradient.to-top(transparent, black, 0deg);
    }

    .to-top(@start: transparent, @stop: gray, @min-width-query:_, @max-width-query:_)
        when not (@start=null) and not (@start=_) and (@min-width-query=_) and (@max-width-query=_) {
        .gradient.linear(@start, @stop, 0deg);
    }

    .to-top(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) 
    {
        @media all and (max-width: @max-width-query) {
            .gradient.to-top(@start, @stop)
        }
    }

    .to-top(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) 
    {
        @media all and (min-width: @min-width-query) {
            .gradient.to-top(@start, @stop)
        }
    }

    .to-top(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .gradient.to-top(@start, @stop)
        }
    }

    .to-left(@inner) 
        when (@inner=null) {}

    .to-left(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@start=null) and (@start=_) and (@min-width-query=_) and (@max-width-query=_) {
        .gradient.to-left(white, black);
    }

    .to-left(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@start=null) and not (@start=_) and (@min-width-query=_) and (@max-width-query=_) {
        .gradient.linear(@start, @stop, 90deg);
    }

    .to-left(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) 
    {
        @media all and (max-width: @max-width-query) {
            .gradient.to-left(@start, @stop)
        }
    }

    .to-left(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) 
    {
        @media all and (min-width: @min-width-query) {
            .gradient.to-left(@start, @stop)
        }
    }

    .to-left(@start:_, @stop:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .gradient.to-left(@start, @stop)
        }
    }

    .radial (@inner) 
        when (@inner=null) {}

    .radial(@inner:_, @outer:_, @min-width-query:_, @max-width-query:_)
        when not (@inner=null) and (@inner=_) and (@outer=_) and (@min-width-query=_) and (@max-width-query=_) 
    {
        .gradient.radial(white, black)
    }

    .radial(@inner:_, @outer:_, @min-width-query:_, @max-width-query:_)
        when not (@inner=null) and (@inner=_) and not (@outer=_) and (@min-width-query=_) and (@max-width-query=_) 
    {
        .gradient.radial(white, @outer)
    }

    .radial(@inner:_, @outer:_, @min-width-query:_, @max-width-query:_)
        when not (@inner=null) and not (@inner=_) and (@outer=_) and (@min-width-query=_) and (@max-width-query=_) 
    {
        .gradient.radial(@inner, black)
    }

    .radial(@inner:_, @outer:_, @min-width-query:_, @max-width-query:_)
        when not (@inner=null) and not (@inner=_) and not (@outer=_) and (@min-width-query=_) and (@max-width-query=_) 
    {
        background-image: -webkit-gradient(radial, center center, 0, center center, 460, from(@inner), to(@outer)); // Chrome, Safari 4+
        background-image: -webkit-radial-gradient(center, ellipse, @inner 0%, @outer 100%);  // Safari 5.1+, Chrome 10+
        background-image:    -moz-radial-gradient(center, ellipse, @inner 0%, @outer 100%);   // Firefox 3.6+
        background-image:         radial-gradient(ellipse at center, @inner 0%, @outer 100%);
    }

    .radial (@inner:_, @outer:_, @min-width-query:_, @max-width-query:_)
        when (@min-width-query=_) and not (@max-width-query=_) 
    {
        @media all and (max-width: @max-width-query) {
            .gradient.radial(@inner, @outer)
        }
    }

    .radial (@inner:_, @outer:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and (@max-width-query=_) 
    {
        @media all and (min-width: @min-width-query) {
            .gradient.radial(@inner, @outer)
        }
    }

    .radial (@inner:_, @outer:_, @min-width-query:_, @max-width-query:_)
        when not (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .gradient.radial(@inner, @outer)
        }
    }
}

//
// Use .size(_, @height, [@min-width-query, @max-width-query])

.height (@height: auto, @query: 0) 
    when not (@height = null) and (@query = 0) 
{
    height: @height;
}

.height (@height: auto, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .height(@height);
    } 
}

//
// Use .back.image(@image-url, [@min-width-query, @max-width-query])

.image (@image-url: none) 
    when not (@image-url = null) and (@image-url = none) 
{
    background-image: none; 
}

.image (@image-url: none) 
    when not (@image-url = null) and not (@image-url = none) 
{
    background-image: url('@{image-url}'); 
}

//
// Use .text.indent(@size, [@min-width, @max-width])

.indent (@param) 
    when (@param=null) {}

.indent (@indent: 0, @query: 0) 
    when not (@indent=null) and (@query=0) 
{
    text-indent: @indent;
}

.indent (@indent: 0, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .indent(@indent);
    }
}

//
//  .index()

.index(@index) 
    when (@index=null) {}

.index(@index:_, @min-width-query:_, @max-width-query:_) {
    & when not (@index=null) and (@index=_) and (@min-width-query=_) and (@max-width-query=_) {
        .index(0);
    }

    & when not (@index=null) and not (@index=_) and (@min-width-query=_) and (@max-width-query=_) {
        z-index: @index;
    }

    & when (@min-width-query=_) and not (@max-width-query=_) {
        @media all and (max-width: @max-width-query) {
            .index(@index);
        }
    }

    & when not (@min-width-query=_) and (@max-width-query=_) {
        @media all and (min-width: @min-width-query) {
            .index(@index);
        }
    }

    & when not (@min-width-query=_) and not (@max-width-query=_)
    {
        @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
            .index(@index);
        }
    }
}

//
// Use .spacing(@margin, _, [@min-width-query, @max-width-query])

.margin (@margin: none, @query: 0) 
    when not (@margin = null) and (@query = 0) 
{
    margin: @margin;
}

.margin (@margin: none, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .margin(@margin);
    } 
}

//
// Use .min-size(_, @max-width,[@min-width-query, @max-width-query])

.max-width (@width: 0, @query: 0) 
    when not (@width = null) and (@query = 0) 
{
    max-width: @width;
}

.max-width (@width: 0, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .max-width(@width);
    }
}

//
// Use .min-size(@min-width, _, [@min-width-query, @max-width-query])

.min-width (@width: 0, @query: 0) 
    when not (@width = null) and (@query = 0) 
{
    min-width: @width;
}

.min-width (@width: 0, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .min-width(@width);
    }
}

//
// Use .spacing(_,@padding, [@min-width-query, @max-width-query])

.padding (@padding: 0, @query: 0) 
    when not (@padding = null) and (@query = 0) 
{
    padding: @padding;
}

.padding (@padding: 0, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .padding(@padding);
    }
}

//
//  Use .position(relative, top, right, bottom, left)

.relative {
    .align (@top: auto, @right: auto, @bottom: auto, @left: auto, @query: 0) 
        when not (@top = skip) and (@query = 0) 
    {
        .position.align(relative, @top, @right, @bottom, @left);
    }
    .left-top (@left: auto, @top: auto) 
        when not (@left = skip) 
    {
        .position.left-top(relative, @left, @top);
    }
    .left-bottom (@left: auto, @bottom: auto) 
        when not (@left = skip) 
    {
        .position.left-bottom(relative, @left, @bottom);
    }
    .right-top (@right: auto, @top: auto) 
        when not (@right = skip) 
    {
        .position.right-top(relative, @right, @top);
    }
    .right-bottom (@right: auto, @bottom: auto) 
        when not (@right = skip) 
    {
        .position.right-bottom(relative, @right, @bottom);
    }
}

.relative {
    .align (@top: auto, @right: auto, @bottom: auto, @left: auto, @query: 0) 
        when (@query > 0) 
    {
        @media all and (min-width: @query) {
            .relative.align(@top, @right, @bottom, @left);
        }
    }
}

//
//  Deprecated

.rgba (@param) 
    when (@param= null) {}

.rgba (@hex-color: #fff, @alpha: 0.5) 
    when not (@hex-color= null) 
{ 
    background-color: @hex-color;
    background-color: hsla(hue(@hex-color), saturation(@hex-color), lightness(@hex-color), @alpha); 
}

//
// Use
// .rounded(@top-left, @top-right, @bottom-right, @bottom-left, [@query-min, @query-max])
// ie:
// .rounded(@top-left, @top-right, _, _, [@query-min, @query-max])   // rounded top side
// .rounded(_, _, _, @bottom-left, [@query-min, @query-max])         // rounded bottom-left corner

.rounded {
    .top (@radius: 0) when not (@radius = null) {
        .rounded.left-top     (@radius);
        .rounded.right-top    (@radius);
    }
    .right (@radius: 0) when not (@radius = null) {
        .rounded.right-top    (@radius);
        .rounded.right-bottom (@radius);
    }
    .bottom (@radius: 0) when not (@radius = null) {
        .rounded.left-bottom (@radius);
        .rounded.right-bottom (@radius);
    }
    .left (@radius: 0) when not (@radius = null) {
        .rounded.left-top     (@radius);
        .rounded.left-bottom  (@radius);
    }
    .left-top (@radius: 0) when not (@radius = null) {
        -webkit-border-top-left-radius: @radius;
           -moz-border-radius-topleft: @radius;
                border-top-left-radius: @radius;
    }
    .left-bottom (@radius: 0) when not (@radius = null) {
        -webkit-border-bottom-left-radius: @radius;
           -moz-border-radius-bottomleft: @radius;
                border-bottom-left-radius: @radius;
    }
    .right-top (@radius: 0) when not (@radius = null) {
        -webkit-border-top-right-radius: @radius;
           -moz-border-radius-topright: @radius;
                border-top-right-radius: @radius;
    }
    .right-bottom (@radius: 0) when not (@radius = null) {
        -webkit-border-bottom-right-radius: @radius;
           -moz-border-radius-bottomright: @radius;
                border-bottom-right-radius: @radius;
    }
}//
//  States

.hover {
    .color (@color: inherit, @back-color: skip) {
        &:hover { 
            color: @color; 
            .back.color(@back-color); 
        }
    } 

    .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
        &:hover { 
            .gradient(@start, @stop, @degrees, @image); 
        }
    }
}

.active {
    .color (@color: inherit, @back-color: skip) {
        &:active { 
            color: @color; 
            .back.color(@back-color); 
        }
    }

    .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
        &:active { 
            .gradient(@start, @stop, @degrees, @image); 
        }
    }
}

.focus {
    .color (@color: inherit, @back-color: skip) {
        &:focus { 
            color: @color; 
            .back.color(@back-color); 
        }
    }

    .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
        &:focus { 
            .gradient(@start, @stop, @degrees, @image); 
        }
    }
}

.visited {
    .color (@color: inherit, @back-color: skip) {
        &:visited { 
            color: @color; 
            .back.color(@back-color); 
        }
    }

    .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
        &:visited { 
            .gradient(@start, @stop, @degrees, @image); 
        }
    }
}

.hover-focus {
    .color (@color: inherit, @back-color: skip) {
        &:hover,
        &:focus { color: @color; .back.color(@back-color); } // added border
    }

    .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
        &:hover,
        &:focus { .gradient(@start, @stop, @degrees, @image); }
    }
}

.normal-active {
    .color (@color: inherit, @back-color: skip) {
        &,
        &:active { color: @color; .back.color(@back-color); } // added border
    }

    .gradient (@start: transparent, @stop: gray, @degrees: 180deg, @image: none) {
        &,
        &:active { .gradient(@start, @stop, @degrees, @image); }
    }
}


//
// Use .shadow(spread, color, alpha)

.shadow-multi (@param) 
    when (@param=null) {}

.shadow-multi (@shadows: none) 
    when not (@shadows=null) 
{
    -webkit-box-shadow: @shadows;
            box-shadow: @shadows;
}

//
// .shadow.inset(@spread, @color, [@alpha, @min-width-query, @max-width-query])

.shadow {
    .inset(@spread) 
        when (@spread=null) {}

    .inset(@spread:_, @color:_, @alpha:_, @min-width-query:_, @max-width-query:_) {
        & when not (@spread=null) and (@spread=_) and (@min-width-query=_) and (@max-width-query=_) {
            .shadow.inset(none, transparent, 100%);
        }

        & when not (@spread=null) and not (@spread=_) and (@min-width-query=_) and (@max-width-query=_) {
            @rgba: fade(@color, @alpha/1);
            -webkit-box-shadow: @spread @rgba inset;  // Android 2.3+, iOS 4.0.2-4.2
                    box-shadow: @spread @rgba inset;  // Chrome 6+, Firefox 4+, IE 9+
        }

        & when not (@min-width-query=_), not (@max-width-query=_) {
            .mixins(
                @min-max: @min-width-query, @max-width-query;
                @shadow-inset: @spread, @color, @alpha;
            );
        }
    }
}

//
// Use .min-size(@min-width, @max-width, [@min-width-query, @max-width-query])

.size-min (@min-width: auto, @min-height: auto, @query: 0) 
    when not (@min-width = null) and (@query = 0) 
{
    min-width: @min-width;
    min-height: @min-height;
}

.size-min (@min-width: 0, @min-height: 0, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .size-min(@min-width, @min-height);
    }
}

//
// Use .size(@size)

.square (@size: auto, @query: 0) 
    when not (@size = null) and (@query = 0) 
{
    width: @size;
    height: @size;
}

.square (@size: auto, @query: 0) when (@query > 0) {
    @media all and (min-width: @query) {
        .square(@square, @display);
    }
}

//
//  Not listed/categorized

.strong-div-width (@swidth: 100%, @dwidth: 100%, @query: 0) 
    when not (@swidth = null) and (@query = 0) 
{
    & > strong { 
        display: block; 
        width: @swidth; 
        float: left; }
    & > div { 
        width: @dwidth; 
    }
}

.strong-div-width (@swidth: 100%, @dwidth: 100%, @query: 0) 
    when not (@swidth = null) and (@query > 0) 
{
    @media print, screen and (min-width: @query) {
        .strong-div-width (@swidth, @dwidth);
    }
}
//
// .text.align(@align, [@min-width-query, @max-width-query])
// .text.decoration(@line, @color, @style, [@min-width-query, @max-width-query])
// .text.indent(@indent, [@min-width-query, @max-width-query])
// .text-shadow(@spread, @color, @alpha, [@min-width-query, @max-width-query])
// .text.transform(@transform, [@min-width-query, @max-width-query])

.text {
    .align (@align) 
        when (@align=null) {}

    .align(@align:_, @min-width-query:_, @max-width-query:_) {
        & when not (@align=null) and (@align=_) and (@min-width-query=_) and (@max-width-query=_) {
            text-align: left;
        }

        & when not (@align=null) and not (@align=_) and (@min-width-query=_) and (@max-width-query=_) {
            text-align: @align;
        }

        & when (@min-width-query=_) and not (@max-width-query=_) {
            @media all and (max-width: @max-width-query) {
                .text.align(@align)
            }
        }
        
        & when not (@min-width-query=_) and (@max-width-query=_) {
            @media all and (min-width: @min-width-query) {
                .text.align(@align)
            }
        }
        
        & when not (@min-width-query=_) and not (@max-width-query=_) {
            @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
                .text.align(@align)
            }
        }
    }

    .indent(@indent) 
        when (@indent=null) {}
    
    .indent(@indent:_, @min-width-query:_, @max-width-query:_) {
        & when not (@indent=null) and (@indent=_) and (@min-width-query=_) and (@max-width-query=_)
        {
            text-indent: 0;
        }
        
        & when not (@indent=null) and not (@indent=_) and (@min-width-query=_) and (@max-width-query=_) {
            text-indent: @indent;
        }

        & when (@min-width-query=_) and not (@max-width-query=_) {
            @media all and (max-width: @max-width-query) {
                .text.indent(@indent)
            }
        }
        
        & when not (@min-width-query=_) and (@max-width-query=_) {
            @media all and (min-width: @min-width-query) {
                .text.indent(@indent)
            }
        }
        
        & when not (@min-width-query=_) and not (@max-width-query=_) {
            @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
                .text.indent(@indent)
            }
        }
    }

    .transform (@transform) 
        when (@transform=null) {}

    .transform(@transform:_, @min-width-query:_, @max-width-query:_) {
        & when not (@transform=null) and (@transform=_) {
            text-transform: none;
        }

        & when not (@transform=null) and not (@transform=_) {
            text-transform: @transform;
        }

        & when (@min-width-query=_) and not (@max-width-query=_) {
            @media all and (max-width: @max-width-query) {
                .text.transform(@transform)
            }
        }
        
        & when not (@min-width-query=_) and (@max-width-query=_) {
            @media all and (min-width: @min-width-query) {
                .text.transform(@transform)
            }
        }
        
        & when not (@min-width-query=_) and not (@max-width-query=_) {
            @media all and (min-width: @min-width-query) and (max-width: @max-width-query) {
                .text.transform(@transform)
            }
        }
    }
}

//
// Use text helper
// .text.left()
// .text.center()
// .text.right()
// .text.justify()

.text-align (@param) 
    when (@param=null) {}

.text-align (@align: center, @query: 0) 
    when not (@align=null) and (@query=0) 
{
    text-align: @align;
}

.text-align (@align: center, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .text-align(@align);
    }
}

//
// .text.shadow(@spread, @color, @alpha, [@min-width-query, @max-width-query])

.text-shadow (@param) 
    when (@param=null) {}

.text-shadow (@spread: 0 0, @color: #fff, @alpha: .5, @query: 0) 
    when not (@spread=null) and (@query=0) {
        
    text-shadow: @spread hsla(hue(@color), saturation(@color), lightness(@color), @alpha); 
}

.text-shadow (@spread: 0 0, @color: #fff, @alpha: .5, @query: 0) 
    when (@query > 0) 
{
    @media all and (min-width: @query) {
        .text-shadow(@shadow, @color, @alpha);
    }
}

//
// Use .transition(@property, duration, function, delay, [@min-width-query, @max-width-query])

.transition-multi (@param) 
    when (@param= null) {}

.transition-multi (@transitions: all 0s ease 0s) 
    when not (@transitions= null) 
{
    -webkit-transition: @transitions;
            transition: @transitions;
}

//
// Deprecated: non standar property

.tap-highlight(@color) 
    when (@color=null) {}

.tap-highlight(@color:_) 
    when not (@color=null) and (@color=_)
{
    .tap-highlight(none)
}

.tap-highlight(@color: gray) 
    when not (@color=null) and not (@color=_)
{
    -webkit-tap-highlight-color: @color;
       -moz-tap-highlight-color: @color;
            tap-highlight-color: @color;
}

//
// Use .noselect() helper

.user-select(@select:_) 
    when not (@select=null) and (@select=_)
{
    .user-select(none)
}

.user-select(@select:_)
    when not (@select=null) and not (@select=_)
{
    -webkit-user-select: @select;
       -moz-user-select: @select;
        -ms-user-select: @select;
}

//
// Use .size(@width, _, [@min-width-query, @max-width-query])

.width (@width: auto, @query: 0) when not (@width = null) and (@query = 0) {
    width: @width;
}

.width (@width: 0, @query: 0) when (@query > 0) {
    @media all and (min-width: @query) {
        .width(@width);
    }
}
